*Settings
Documentation                           Port Channel RTAG7 Hashing Test Suite
Suite Setup                             lag suite setup
Suite Teardown                          lag suite teardown
Test Setup                              lag test setup
Test Teardown                           lag test teardown
Force Tags                              SwitchLight  4.5.0  accton  AS5710  lag  hashing  rtag7  
Library                                 keywords/AppController.py
Library                                 keywords/BsnCommon.py
Library                                 keywords/BigTap.py
Library                                 keywords/SwitchLight.py
Library                                 keywords/Ixia.py

* Variable
${switch1_alias}                        app-ras5710-1
${switch2_alias}                        app-ras4600-1

${s2s1_10g_name}                        port-channel1  
${s2s1_10g_port_range}                  49-52
${s2s1_10g_port_range_small1}           49-50
${s2s1_10g_port_range_small2}           51-52
${s2s1_10g_number}                      1
${s2_lag_mem_1}                         50          #Broadcom portmapping is off by 1. This could change in future leading to script failures
${s2_lag_mem_2}                         51          #Broadcom portmapping is off by 1. This could change in future leading to script failures   
${s2_lag_mem_3}                         52          #Broadcom portmapping is off by 1. This could change in future leading to script failures
${s2_lag_mem_4}                         53          #Broadcom portmapping is off by 1. This could change in future leading to script failures
${s2s1_3}                               ethernet51
${s2s1_4}                               ethernet52
${s2_dummy_filter}                      ethernet13
${s2_dummy_fnick}                       F1
${s2_dummy_delivery}                    ethernet14
${s2_dummy_dnick}                       D1

${s1s2_10g_name}                        port-channel1
${s1s2_10g_port_range}                  45-48
${s1s2_10g_number}                      1

${filter_1}                             ethernet12
${filter_nick_1}                        ixia-3-2
${filter_2}                             ethernet2
${filter_nick_2}                        ixia-1-6
${delivery_1}                           ethernet1
${delivery_nick_1}                      ixia-2-1
${delivery_2}                           ethernet2
${delivery_nick_2}                      ixia-2-2
${delivery_3}                           ethernet1
${delivery_nick_3}                      ixia-1-5

${src_mac}                              00:11:01:01:01:01  
${src_mac_step}                         00:00:00:00:01:00
${src_cnt}                              28
${dst_mac}                              00:12:01:01:01:01
${dst_cnt}                              28
${dst_mac_step}                         00:00:00:00:01:00
${frame_rate}                           1000
${frame_cnt}                            10000
${frame_size}                           64
${src_port}                             8101
${dst_port}                             8201
${range}                                16


${hash_seed_1}                          1234  
${hash_seed_2}                          8848
${hash_seed_3}                          1942
${hash_seed_4}                          1980

* Test Case
TC001: Verify Source MAC address hashing for L2 packets
    ${stream}=  L2 add  name=atoc  flow=a->c  src_mac=${src_mac}  src_cnt=${src_cnt}  src_mac_step=${src_mac_step}  
    ...  dst_mac=${dst_mac}  dst_cnt=1  dst_mac_step=00:00:00:00:00:00
    ...  frame_rate=${frame_rate}  frame_size=${frame_size}  frame_cnt=${frame_cnt}  
    send and verify traffic  True  True  True  True  
    [Tags]  feature

TC002: Verify Destination MAC address hashing for L2 packets
    ${stream}=  L2 add  name=atoc  flow=a->c  src_mac=${src_mac}  src_cnt=1  src_mac_step=00:00:00:00:00:00
    ...  dst_cnt=${dst_cnt}  dst_mac_step=${dst_mac_step}  dst_mac=${dst_mac}
    ...  frame_rate=${frame_rate}  frame_size=${frame_size}  frame_cnt=${frame_cnt}  
    send and verify traffic  True  True  True  True  
    [Tags]  feature

TC003: Verify Destination MAC address hashing for L2 packets
    ${stream}=  L2 add  name=atoc  flow=a->c  src_mac=${src_mac}  src_cnt=1  src_mac_step=00:00:00:00:00:00
    ...  dst_mac=${dst_mac}  dst_cnt=1  dst_mac_step=00:00:00:00:00:00
    ...  ethertype=800  ethertype_cnt=28  ethertype_step=2
    ...  frame_rate=${frame_rate}  frame_size=${frame_size}  frame_cnt=${frame_cnt}
    send and verify traffic  True  True  True  True  
    [Tags]  feature
    
TC004:Verify VLAN Id hashing for L2 packets
    ${stream}=  L2 add  name=atoc  flow=a->c  src_mac=${src_mac}  src_cnt=1  src_mac_step=00:00:00:00:00:00
    ...  dst_mac=${dst_mac}  dst_cnt=1  dst_mac_step=00:00:00:00:00:00
    ...  vlan_id=2  vlan_step=20  vlan_cnt=${src_cnt}
    ...  frame_rate=${frame_rate}  frame_size=${frame_size}  frame_cnt=${frame_cnt}
    send and verify traffic  True  True  True  True  
    [Tags]  feature  

TC005:Verify source IPv4 address hashing
    ${stream}=  L3 add  flow=a->c  frame_rate=${frame_rate}  frame_size=${frame_size}  frame_cnt=${frame_cnt}  no_arp=True   name=atoc
    ...     src_mac=${src_mac}  src_mac_step=00:00:00:00:00:00
    ...     src_ip=100.1.1.1  src_ip_step=0.0.1.0  src_cnt=28  src_gw_prefix=24  src_gw=100.2.1.1  src_gw_step=0.0.0.0
    ...     dst_mac=${dst_mac}  dst_mac_step=00:00:00:00:00:00
    ...     dst_ip=100.2.1.1  dst_ip_step=0.0.0.0  dst_cnt=1  dst_gw_prefix=24  dst_gw=100.1.1.1  dst_gw_step=0.0.0.0
    send and verify traffic  True  True  True  True  
    [Tags]  feature

TC006:Verify destination IPv4 address hashing
    ${stream}=  L3 add  flow=a->c  frame_rate=${frame_rate}  frame_size=${frame_size}  frame_cnt=${frame_cnt}  no_arp=True   name=atoc
    ...     src_mac=${src_mac}  src_mac_step=00:00:00:00:00:00
    ...     src_ip=100.1.1.1  src_ip_step=0.0.0.0  src_cnt=1  src_gw_prefix=24  src_gw=100.2.1.1  src_gw_step=0.0.0.0
    ...     dst_mac=${dst_mac}  dst_mac_step=00:00:00:00:00:00
    ...     dst_ip=100.2.1.1  dst_ip_step=0.0.1.0  dst_cnt=28  dst_gw_prefix=24  dst_gw=100.1.1.1  dst_gw_step=0.0.0.0
    send and verify traffic  True  True  True  True
    [Tags]  feature

TC007:Verify TCP source port hashing
    :FOR    ${port}  IN RANGE  1001  33001  2000
    \   ${stream}=  L3 add  flow=a->c  frame_rate=${frame_rate}  frame_size=${frame_size}  frame_cnt=${frame_cnt}  no_arp=True
    \   ...     src_mac=${src_mac}  src_mac_step=00:00:00:00:00:00
    \   ...     src_ip=100.1.1.1  src_ip_step=0.0.0.0  src_cnt=1  src_gw_prefix=24  src_gw=100.2.1.1  src_gw_step=0.0.0.0
    \   ...     dst_mac=${dst_mac}  dst_mac_step=00:00:00:00:00:00
    \   ...     dst_ip=100.2.1.1  dst_ip_step=0.0.0.0  dst_cnt=1  dst_gw_prefix=24  dst_gw=100.1.1.1  dst_gw_step=0.0.0.0
    \   ...     protocol=TCP  src_port=${port}  dst_port=8080  name=atoc
    cli execute command  s1  clear interface statistics
    cli execute command  s2  clear interface statistics
    start traffic
    sleep  10
    stop traffic
    ${member1_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet45  tx
    Should Not Be Equal As Integers  ${member1_s1}  0
    ${member2_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet46  tx
    Should Not Be Equal As Integers  ${member2_s1}  0
    ${member3_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet47  tx
    Should Not Be Equal As Integers  ${member3_s1}  0
    ${member4_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet48  tx
    Should Not Be Equal As Integers  ${member4_s1}  0
    ${member1_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet49  rx
    Should Not Be Equal As Integers  ${member1_s2}  0
    ${member2_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet50  rx
    Should Not Be Equal As Integers  ${member2_s2}  0
    ${member3_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet51  rx
    Should Not Be Equal As Integers  ${member3_s2}  0
    ${member4_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet52  rx
    Should Not Be Equal As Integers  ${member4_s2}  0
    ${range_1}=   Evaluate  ${member1_s1} - ${member1_s2}
    ${range_2}=   Evaluate  ${member2_s1} - ${member2_s2}
    ${range_3}=   Evaluate  ${member3_s1} - ${member3_s2}
    ${range_4}=   Evaluate  ${member4_s1} - ${member4_s2}
    ${result1}=  verify value is in range  ${range_1}  -10  10
    Should be true  ${result1}
    ${result2}=  verify value is in range  ${range_2}  -10  10
    Should be true  ${result2}
    ${result3}=  verify value is in range  ${range_3}  -10  10
    Should be true  ${result3}
    ${result4}=  verify value is in range  ${range_4}  -10  10
    Should be true  ${result4}
    ${mem1s1}=  Convert to Integer  ${member1_s1}
    ${mem2s1}=  Convert to Integer  ${member2_s1}
    ${mem3s1}=  Convert to Integer  ${member3_s1}
    ${mem4s1}=  Convert to Integer  ${member4_s1}
    ${percent_1}=   Evaluate  100*(operator.truediv(int(${mem1s1}),160000))  operator
    ${percent_2}=   Evaluate  100*(operator.truediv(int(${mem2s1}),160000))  operator
    ${percent_3}=   Evaluate  100*(operator.truediv(int(${mem3s1}),160000))  operator
    ${percent_4}=   Evaluate  100*(operator.truediv(int(${mem4s1}),160000))  operator
    ${result1}=  verify value is in range  ${percent_1}  15  32
    Should be true  ${result1}
    ${result2}=  verify value is in range  ${percent_2}  15  32
    Should be true  ${result2}
    ${result3}=  verify value is in range  ${percent_3}  15  32
    Should be true  ${result3}
    ${result4}=  verify value is in range  ${percent_4}  15  32
    Should be true  ${result4}
    [Tags]  feature  

TC008:Verify TCP destination port hashing
    :FOR    ${port}  IN RANGE  1001  33001  2000
    \   ${stream}=  L3 add  flow=a->c  frame_rate=${frame_rate}  frame_size=${frame_size}  frame_cnt=${frame_cnt}  no_arp=True
    \   ...     src_mac=${src_mac}  src_mac_step=00:00:00:00:00:00
    \   ...     src_ip=100.1.1.1  src_ip_step=0.0.0.0  src_cnt=1  src_gw_prefix=24  src_gw=100.2.1.1  src_gw_step=0.0.0.0
    \   ...     dst_mac=${dst_mac}  dst_mac_step=00:00:00:00:00:00
    \   ...     dst_ip=100.2.1.1  dst_ip_step=0.0.0.0  dst_cnt=1  dst_gw_prefix=24  dst_gw=100.1.1.1  dst_gw_step=0.0.0.0
    \   ...     protocol=TCP  src_port=8080  dst_port=${port}  name=atoc
    cli execute command  s1  clear interface statistics
    cli execute command  s2  clear interface statistics
    start traffic
    sleep  10
    stop traffic
    ${member1_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet45  tx
    Should Not Be Equal As Integers  ${member1_s1}  0
    ${member2_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet46  tx
    Should Not Be Equal As Integers  ${member2_s1}  0
    ${member3_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet47  tx
    Should Not Be Equal As Integers  ${member3_s1}  0
    ${member4_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet48  tx
    Should Not Be Equal As Integers  ${member4_s1}  0
    ${member1_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet49  rx
    Should Not Be Equal As Integers  ${member1_s2}  0
    ${member2_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet50  rx
    Should Not Be Equal As Integers  ${member2_s2}  0
    ${member3_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet51  rx
    Should Not Be Equal As Integers  ${member3_s2}  0
    ${member4_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet52  rx
    Should Not Be Equal As Integers  ${member4_s2}  0
    ${range_1}=   Evaluate  ${member1_s1} - ${member1_s2}
    ${range_2}=   Evaluate  ${member2_s1} - ${member2_s2}
    ${range_3}=   Evaluate  ${member3_s1} - ${member3_s2}
    ${range_4}=   Evaluate  ${member4_s1} - ${member4_s2}
    ${result1}=  verify value is in range  ${range_1}  -10  10
    Should be true  ${result1}
    ${result2}=  verify value is in range  ${range_2}  -10  10
    Should be true  ${result2}
    ${result3}=  verify value is in range  ${range_3}  -10  10
    Should be true  ${result3}
    ${result4}=  verify value is in range  ${range_4}  -10  10
    Should be true  ${result4}
    ${mem1s1}=  Convert to Integer  ${member1_s1}
    ${mem2s1}=  Convert to Integer  ${member2_s1}
    ${mem3s1}=  Convert to Integer  ${member3_s1}
    ${mem4s1}=  Convert to Integer  ${member4_s1}
    ${percent_1}=   Evaluate  100*(operator.truediv(int(${mem1s1}),160000))  operator
    ${percent_2}=   Evaluate  100*(operator.truediv(int(${mem2s1}),160000))  operator
    ${percent_3}=   Evaluate  100*(operator.truediv(int(${mem3s1}),160000))  operator
    ${percent_4}=   Evaluate  100*(operator.truediv(int(${mem4s1}),160000))  operator
    ${result1}=  verify value is in range  ${percent_1}  15  32
    Should be true  ${result1}
    ${result2}=  verify value is in range  ${percent_2}  15  32
    Should be true  ${result2}
    ${result3}=  verify value is in range  ${percent_3}  15  32
    Should be true  ${result3}
    ${result4}=  verify value is in range  ${percent_4}  15  32
    Should be true  ${result4}
    [Tags]  feature  

TC009:Verify UDP source port hashing
    :FOR    ${port}  IN RANGE  1001  33001  2000
    \   ${stream}=  L3 add  flow=a->c  frame_rate=${frame_rate}  frame_size=${frame_size}  frame_cnt=${frame_cnt}  no_arp=True
    \   ...     src_mac=${src_mac}  src_mac_step=00:00:00:00:00:00
    \   ...     src_ip=100.1.1.1  src_ip_step=0.0.0.0  src_cnt=1  src_gw_prefix=24  src_gw=100.2.1.1  src_gw_step=0.0.0.0
    \   ...     dst_mac=${dst_mac}  dst_mac_step=00:00:00:00:00:00
    \   ...     dst_ip=100.2.1.1  dst_ip_step=0.0.0.0  dst_cnt=1  dst_gw_prefix=24  dst_gw=100.1.1.1  dst_gw_step=0.0.0.0
    \   ...     protocol=UDP  src_port=${port}  dst_port=8080  name=atoc
    cli execute command  s1  clear interface statistics
    cli execute command  s2  clear interface statistics
    start traffic
    sleep  10
    stop traffic
    ${member1_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet45  tx
    Should Not Be Equal As Integers  ${member1_s1}  0
    ${member2_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet46  tx
    Should Not Be Equal As Integers  ${member2_s1}  0
    ${member3_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet47  tx
    Should Not Be Equal As Integers  ${member3_s1}  0
    ${member4_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet48  tx
    Should Not Be Equal As Integers  ${member4_s1}  0
    ${member1_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet49  rx
    Should Not Be Equal As Integers  ${member1_s2}  0
    ${member2_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet50  rx
    Should Not Be Equal As Integers  ${member2_s2}  0
    ${member3_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet51  rx
    Should Not Be Equal As Integers  ${member3_s2}  0
    ${member4_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet52  rx
    Should Not Be Equal As Integers  ${member4_s2}  0
    ${range_1}=   Evaluate  ${member1_s1} - ${member1_s2}
    ${range_2}=   Evaluate  ${member2_s1} - ${member2_s2}
    ${range_3}=   Evaluate  ${member3_s1} - ${member3_s2}
    ${range_4}=   Evaluate  ${member4_s1} - ${member4_s2}
    ${result1}=  verify value is in range  ${range_1}  -10  10
    Should be true  ${result1}
    ${result2}=  verify value is in range  ${range_2}  -10  10
    Should be true  ${result2}
    ${result3}=  verify value is in range  ${range_3}  -10  10
    Should be true  ${result3}
    ${result4}=  verify value is in range  ${range_4}  -10  10
    Should be true  ${result4}
    ${mem1s1}=  Convert to Integer  ${member1_s1}
    ${mem2s1}=  Convert to Integer  ${member2_s1}
    ${mem3s1}=  Convert to Integer  ${member3_s1}
    ${mem4s1}=  Convert to Integer  ${member4_s1}
    ${percent_1}=   Evaluate  100*(operator.truediv(int(${mem1s1}),160000))  operator
    ${percent_2}=   Evaluate  100*(operator.truediv(int(${mem2s1}),160000))  operator
    ${percent_3}=   Evaluate  100*(operator.truediv(int(${mem3s1}),160000))  operator
    ${percent_4}=   Evaluate  100*(operator.truediv(int(${mem4s1}),160000))  operator
    ${result1}=  verify value is in range  ${percent_1}  15  32
    Should be true  ${result1}
    ${result2}=  verify value is in range  ${percent_2}  15  32
    Should be true  ${result2}
    ${result3}=  verify value is in range  ${percent_3}  15  32
    Should be true  ${result3}
    ${result4}=  verify value is in range  ${percent_4}  15  32
    Should be true  ${result4}
    [Tags]  feature  

TC010:Verify UDP destination port hashing
    :FOR    ${port}  IN RANGE  1001  33001  2000
    \   ${stream}=  L3 add  flow=a->c  frame_rate=${frame_rate}  frame_size=${frame_size}  frame_cnt=${frame_cnt}  no_arp=True
    \   ...     src_mac=${src_mac}  src_mac_step=00:00:00:00:00:00
    \   ...     src_ip=100.1.1.1  src_ip_step=0.0.0.0  src_cnt=1  src_gw_prefix=24  src_gw=100.2.1.1  src_gw_step=0.0.0.0
    \   ...     dst_mac=${dst_mac}  dst_mac_step=00:00:00:00:00:00
    \   ...     dst_ip=100.2.1.1  dst_ip_step=0.0.0.0  dst_cnt=1  dst_gw_prefix=24  dst_gw=100.1.1.1  dst_gw_step=0.0.0.0
    \   ...     protocol=UDP  src_port=8080  dst_port=${port}  name=atoc
    cli execute command  s1  clear interface statistics
    cli execute command  s2  clear interface statistics
    start traffic
    sleep  10
    stop traffic
    ${member1_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet45  tx
    Should Not Be Equal As Integers  ${member1_s1}  0
    ${member2_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet46  tx
    Should Not Be Equal As Integers  ${member2_s1}  0
    ${member3_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet47  tx
    Should Not Be Equal As Integers  ${member3_s1}  0
    ${member4_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet48  tx
    Should Not Be Equal As Integers  ${member4_s1}  0
    ${member1_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet49  rx
    Should Not Be Equal As Integers  ${member1_s2}  0
    ${member2_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet50  rx
    Should Not Be Equal As Integers  ${member2_s2}  0
    ${member3_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet51  rx
    Should Not Be Equal As Integers  ${member3_s2}  0
    ${member4_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet52  rx
    Should Not Be Equal As Integers  ${member4_s2}  0
    ${range_1}=   Evaluate  ${member1_s1} - ${member1_s2}
    ${range_2}=   Evaluate  ${member2_s1} - ${member2_s2}
    ${range_3}=   Evaluate  ${member3_s1} - ${member3_s2}
    ${range_4}=   Evaluate  ${member4_s1} - ${member4_s2}
    ${result1}=  verify value is in range  ${range_1}  -10  10
    Should be true  ${result1}
    ${result2}=  verify value is in range  ${range_2}  -10  10
    Should be true  ${result2}
    ${result3}=  verify value is in range  ${range_3}  -10  10
    Should be true  ${result3}
    ${result4}=  verify value is in range  ${range_4}  -10  10
    Should be true  ${result4}
    ${mem1s1}=  Convert to Integer  ${member1_s1}
    ${mem2s1}=  Convert to Integer  ${member2_s1}
    ${mem3s1}=  Convert to Integer  ${member3_s1}
    ${mem4s1}=  Convert to Integer  ${member4_s1}
    ${percent_1}=   Evaluate  100*(operator.truediv(int(${mem1s1}),160000))  operator
    ${percent_2}=   Evaluate  100*(operator.truediv(int(${mem2s1}),160000))  operator
    ${percent_3}=   Evaluate  100*(operator.truediv(int(${mem3s1}),160000))  operator
    ${percent_4}=   Evaluate  100*(operator.truediv(int(${mem4s1}),160000))  operator
    ${result1}=  verify value is in range  ${percent_1}  15  32
    Should be true  ${result1}
    ${result2}=  verify value is in range  ${percent_2}  15  32
    Should be true  ${result2}
    ${result3}=  verify value is in range  ${percent_3}  15  32
    Should be true  ${result3}
    ${result4}=  verify value is in range  ${percent_4}  15  32
    Should be true  ${result4}
    [Tags]  feature

TC011:Verify source IPv6 address hashing
    ${stream}=  L3 add  flow=a->c  frame_rate=${frame_rate}  frame_size=${frame_size}  frame_cnt=${frame_cnt}  no_arp=True   name=atoc
    ...     src_mac=${src_mac}  src_mac_step=00:00:00:00:00:00  ethertype=86dd
    ...     src_ip=2001:2001:0:0:0:0:0:1  src_ip_step=0:0:0:0:0:0:0:1  src_cnt=28  src_gw_prefix=128  src_gw=2002:2002:0:0:0:0:0:1  src_gw_step=0:0:0:0:0:0:0:0
    ...     dst_mac=${dst_mac}  dst_mac_step=00:00:00:00:00:00
    ...     dst_ip=2002:2002:0:0:0:0:0:1  dst_ip_step=0:0:0:0:0:0:0:0  dst_cnt=1  dst_gw_prefix=128  dst_gw=2001:2001:0:0:0:0:0:1  dst_gw_step=0:0:0:0:0:0:0:1
    send and verify traffic  True  True  True  True  
    [Tags]  feature

TC012:Verify destination IPv6 address hashing
    ${stream}=  L3 add  flow=a->c  frame_rate=${frame_rate}  frame_size=${frame_size}  frame_cnt=${frame_cnt}  no_arp=True   name=atoc
    ...     src_mac=${src_mac}  src_mac_step=00:00:00:00:00:00  ethertype=86dd
    ...     src_ip=2001:2001:0:0:0:0:0:1  src_ip_step=0:0:0:0:0:0:0:0  src_cnt=1  src_gw_prefix=128  src_gw=2002:2002:0:0:0:0:0:1  src_gw_step=0:0:0:0:0:0:0:1
    ...     dst_mac=${dst_mac}  dst_mac_step=00:00:00:00:00:00
    ...     dst_ip=2002:2002:0:0:0:0:0:1  dst_ip_step=0:0:0:0:0:0:0:1  dst_cnt=28  dst_gw_prefix=128  dst_gw=2001:2001:0:0:0:0:0:1  dst_gw_step=0:0:0:0:0:0:0:0
    send and verify traffic  True  True  True  True
    [Tags]  feature 

TC013:Verify TCP source port hashing
    :FOR    ${port}  IN RANGE  1001  33001  2000
    \   ${ntype}=  Convert to String  ${port}
    \   ${sname}=  Catenate  atoc  ${ntype}
    \   ${stream}=  L3 add  flow=a->c  frame_rate=${frame_rate}  frame_size=${frame_size}  frame_cnt=${frame_cnt}  no_arp=True   name=${sname}
    \   ...     src_mac=${src_mac}  src_mac_step=00:00:00:00:00:00  ethertype=86dd
    \   ...     src_ip=2001:2001:0:0:0:0:0:1  src_ip_step=0:0:0:0:0:0:0:0  src_cnt=1  src_gw_prefix=128  src_gw=2002:2002:0:0:0:0:0:1  src_gw_step=0:0:0:0:0:0:0:0
    \   ...     dst_mac=${dst_mac}  dst_mac_step=00:00:00:00:00:00
    \   ...     dst_ip=2002:2002:0:0:0:0:0:1  dst_ip_step=0:0:0:0:0:0:0:0  dst_cnt=1  dst_gw_prefix=128  dst_gw=2001:2001:0:0:0:0:0:1  dst_gw_step=0:0:0:0:0:0:0:0
    \   ...     protocol=TCP  src_port=${port}  dst_port=8080
    cli execute command  s1  clear interface statistics
    cli execute command  s2  clear interface statistics
    start traffic
    sleep  10
    stop traffic
    ${member1_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet45  tx
    Should Not Be Equal As Integers  ${member1_s1}  0
    ${member2_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet46  tx
    Should Not Be Equal As Integers  ${member2_s1}  0
    ${member3_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet47  tx
    Should Not Be Equal As Integers  ${member3_s1}  0
    ${member4_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet48  tx
    Should Not Be Equal As Integers  ${member4_s1}  0
    ${member1_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet49  rx
    Should Not Be Equal As Integers  ${member1_s2}  0
    ${member2_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet50  rx
    Should Not Be Equal As Integers  ${member2_s2}  0
    ${member3_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet51  rx
    Should Not Be Equal As Integers  ${member3_s2}  0
    ${member4_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet52  rx
    Should Not Be Equal As Integers  ${member4_s2}  0
    ${range_1}=   Evaluate  ${member1_s1} - ${member1_s2}
    ${range_2}=   Evaluate  ${member2_s1} - ${member2_s2}
    ${range_3}=   Evaluate  ${member3_s1} - ${member3_s2}
    ${range_4}=   Evaluate  ${member4_s1} - ${member4_s2}
    ${result1}=  verify value is in range  ${range_1}  -10  10
    Should be true  ${result1}
    ${result2}=  verify value is in range  ${range_2}  -10  10
    Should be true  ${result2}
    ${result3}=  verify value is in range  ${range_3}  -10  10
    Should be true  ${result3}
    ${result4}=  verify value is in range  ${range_4}  -10  10
    Should be true  ${result4}
    ${mem1s1}=  Convert to Integer  ${member1_s1}
    ${mem2s1}=  Convert to Integer  ${member2_s1}
    ${mem3s1}=  Convert to Integer  ${member3_s1}
    ${mem4s1}=  Convert to Integer  ${member4_s1}
    ${percent_1}=   Evaluate  100*(operator.truediv(int(${mem1s1}),160000))  operator
    ${percent_2}=   Evaluate  100*(operator.truediv(int(${mem2s1}),160000))  operator
    ${percent_3}=   Evaluate  100*(operator.truediv(int(${mem3s1}),160000))  operator
    ${percent_4}=   Evaluate  100*(operator.truediv(int(${mem4s1}),160000))  operator
    ${result1}=  verify value is in range  ${percent_1}  15  32
    Should be true  ${result1}
    ${result2}=  verify value is in range  ${percent_2}  15  32
    Should be true  ${result2}
    ${result3}=  verify value is in range  ${percent_3}  15  32
    Should be true  ${result3}
    ${result4}=  verify value is in range  ${percent_4}  15  32
    Should be true  ${result4}
    [Tags]  feature  

TC014:Verify TCP destination port hashing
    :FOR    ${port}  IN RANGE  1001  33001  2000
    \   ${ntype}=  Convert to String  ${port}
    \   ${sname}=  Catenate  atoc  ${ntype}
    \   ${stream}=  L3 add  flow=a->c  frame_rate=${frame_rate}  frame_size=${frame_size}  frame_cnt=${frame_cnt}  no_arp=True   name=${sname}
    \   ...     src_mac=${src_mac}  src_mac_step=00:00:00:00:00:00  ethertype=86dd
    \   ...     src_ip=2001:2001:0:0:0:0:0:1  src_ip_step=0:0:0:0:0:0:0:0  src_cnt=1  src_gw_prefix=128  src_gw=2002:2002:0:0:0:0:0:1  src_gw_step=0:0:0:0:0:0:0:0
    \   ...     dst_mac=${dst_mac}  dst_mac_step=00:00:00:00:00:00
    \   ...     dst_ip=2002:2002:0:0:0:0:0:1  dst_ip_step=0:0:0:0:0:0:0:0  dst_cnt=1  dst_gw_prefix=128  dst_gw=2001:2001:0:0:0:0:0:1  dst_gw_step=0:0:0:0:0:0:0:0
    \   ...     protocol=TCP  src_port=8080  dst_port=${port}
    cli execute command  s1  clear interface statistics
    cli execute command  s2  clear interface statistics
    start traffic
    sleep  10
    stop traffic
    ${member1_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet45  tx
    Should Not Be Equal As Integers  ${member1_s1}  0
    ${member2_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet46  tx
    Should Not Be Equal As Integers  ${member2_s1}  0
    ${member3_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet47  tx
    Should Not Be Equal As Integers  ${member3_s1}  0
    ${member4_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet48  tx
    Should Not Be Equal As Integers  ${member4_s1}  0
    ${member1_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet49  rx
    Should Not Be Equal As Integers  ${member1_s2}  0
    ${member2_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet50  rx
    Should Not Be Equal As Integers  ${member2_s2}  0
    ${member3_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet51  rx
    Should Not Be Equal As Integers  ${member3_s2}  0
    ${member4_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet52  rx
    Should Not Be Equal As Integers  ${member4_s2}  0
    ${range_1}=   Evaluate  ${member1_s1} - ${member1_s2}
    ${range_2}=   Evaluate  ${member2_s1} - ${member2_s2}
    ${range_3}=   Evaluate  ${member3_s1} - ${member3_s2}
    ${range_4}=   Evaluate  ${member4_s1} - ${member4_s2}
    ${result1}=  verify value is in range  ${range_1}  -10  10
    Should be true  ${result1}
    ${result2}=  verify value is in range  ${range_2}  -10  10
    Should be true  ${result2}
    ${result3}=  verify value is in range  ${range_3}  -10  10
    Should be true  ${result3}
    ${result4}=  verify value is in range  ${range_4}  -10  10
    Should be true  ${result4}
    ${mem1s1}=  Convert to Integer  ${member1_s1}
    ${mem2s1}=  Convert to Integer  ${member2_s1}
    ${mem3s1}=  Convert to Integer  ${member3_s1}
    ${mem4s1}=  Convert to Integer  ${member4_s1}
    ${percent_1}=   Evaluate  100*(operator.truediv(int(${mem1s1}),160000))  operator
    ${percent_2}=   Evaluate  100*(operator.truediv(int(${mem2s1}),160000))  operator
    ${percent_3}=   Evaluate  100*(operator.truediv(int(${mem3s1}),160000))  operator
    ${percent_4}=   Evaluate  100*(operator.truediv(int(${mem4s1}),160000))  operator
    ${result1}=  verify value is in range  ${percent_1}  15  32
    Should be true  ${result1}
    ${result2}=  verify value is in range  ${percent_2}  15  32
    Should be true  ${result2}
    ${result3}=  verify value is in range  ${percent_3}  15  32
    Should be true  ${result3}
    ${result4}=  verify value is in range  ${percent_4}  15  32
    Should be true  ${result4}
    [Tags]  feature  

TC015:Verify UDP source port hashing
    :FOR    ${port}  IN RANGE  1001  33001  2000
    \   ${ntype}=  Convert to String  ${port}
    \   ${sname}=  Catenate  atoc  ${ntype}
    \   ${stream}=  L3 add  flow=a->c  frame_rate=${frame_rate}  frame_size=${frame_size}  frame_cnt=${frame_cnt}  no_arp=True   name=${sname}
    \   ...     src_mac=${src_mac}  src_mac_step=00:00:00:00:00:00  ethertype=86dd
    \   ...     src_ip=2001:2001:0:0:0:0:0:1  src_ip_step=0:0:0:0:0:0:0:0  src_cnt=1  src_gw_prefix=128  src_gw=2002:2002:0:0:0:0:0:1  src_gw_step=0:0:0:0:0:0:0:0
    \   ...     dst_mac=${dst_mac}  dst_mac_step=00:00:00:00:00:00
    \   ...     dst_ip=2002:2002:0:0:0:0:0:1  dst_ip_step=0:0:0:0:0:0:0:0  dst_cnt=1  dst_gw_prefix=128  dst_gw=2001:2001:0:0:0:0:0:1  dst_gw_step=0:0:0:0:0:0:0:0
    \   ...     protocol=UDP  src_port=${port}  dst_port=8080
    cli execute command  s1  clear interface statistics
    cli execute command  s2  clear interface statistics
    start traffic
    sleep  10
    stop traffic
    ${member1_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet45  tx
    Should Not Be Equal As Integers  ${member1_s1}  0
    ${member2_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet46  tx
    Should Not Be Equal As Integers  ${member2_s1}  0
    ${member3_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet47  tx
    Should Not Be Equal As Integers  ${member3_s1}  0
    ${member4_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet48  tx
    Should Not Be Equal As Integers  ${member4_s1}  0
    ${member1_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet49  rx
    Should Not Be Equal As Integers  ${member1_s2}  0
    ${member2_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet50  rx
    Should Not Be Equal As Integers  ${member2_s2}  0
    ${member3_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet51  rx
    Should Not Be Equal As Integers  ${member3_s2}  0
    ${member4_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet52  rx
    Should Not Be Equal As Integers  ${member4_s2}  0
    ${range_1}=   Evaluate  ${member1_s1} - ${member1_s2}
    ${range_2}=   Evaluate  ${member2_s1} - ${member2_s2}
    ${range_3}=   Evaluate  ${member3_s1} - ${member3_s2}
    ${range_4}=   Evaluate  ${member4_s1} - ${member4_s2}
    ${result1}=  verify value is in range  ${range_1}  -10  10
    Should be true  ${result1}
    ${result2}=  verify value is in range  ${range_2}  -10  10
    Should be true  ${result2}
    ${result3}=  verify value is in range  ${range_3}  -10  10
    Should be true  ${result3}
    ${result4}=  verify value is in range  ${range_4}  -10  10
    Should be true  ${result4}
    ${mem1s1}=  Convert to Integer  ${member1_s1}
    ${mem2s1}=  Convert to Integer  ${member2_s1}
    ${mem3s1}=  Convert to Integer  ${member3_s1}
    ${mem4s1}=  Convert to Integer  ${member4_s1}
    ${percent_1}=   Evaluate  100*(operator.truediv(int(${mem1s1}),160000))  operator
    ${percent_2}=   Evaluate  100*(operator.truediv(int(${mem2s1}),160000))  operator
    ${percent_3}=   Evaluate  100*(operator.truediv(int(${mem3s1}),160000))  operator
    ${percent_4}=   Evaluate  100*(operator.truediv(int(${mem4s1}),160000))  operator
    ${result1}=  verify value is in range  ${percent_1}  15  32
    Should be true  ${result1}
    ${result2}=  verify value is in range  ${percent_2}  15  32
    Should be true  ${result2}
    ${result3}=  verify value is in range  ${percent_3}  15  32
    Should be true  ${result3}
    ${result4}=  verify value is in range  ${percent_4}  15  32
    Should be true  ${result4}
    [Tags]  feature  

TC016:Verify UDP destination port hashing
    :FOR    ${port}  IN RANGE  1001  33001  2000
    \   ${ntype}=  Convert to String  ${port}
    \   ${sname}=  Catenate  atoc  ${ntype}
    \   ${stream}=  L3 add  flow=a->c  frame_rate=${frame_rate}  frame_size=${frame_size}  frame_cnt=${frame_cnt}  no_arp=True   name=${sname}
    \   ...     src_mac=${src_mac}  src_mac_step=00:00:00:00:00:00  ethertype=86dd
    \   ...     src_ip=2001:2001:0:0:0:0:0:1  src_ip_step=0:0:0:0:0:0:0:0  src_cnt=1  src_gw_prefix=128  src_gw=2002:2002:0:0:0:0:0:1  src_gw_step=0:0:0:0:0:0:0:0
    \   ...     dst_mac=${dst_mac}  dst_mac_step=00:00:00:00:00:00
    \   ...     dst_ip=2002:2002:0:0:0:0:0:1  dst_ip_step=0:0:0:0:0:0:0:0  dst_cnt=1  dst_gw_prefix=128  dst_gw=2001:2001:0:0:0:0:0:1  dst_gw_step=0:0:0:0:0:0:0:0
    \   ...     protocol=UDP  src_port=8080  dst_port=${port}
    cli execute command  s1  clear interface statistics
    cli execute command  s2  clear interface statistics
    start traffic
    sleep  10
    stop traffic
    ${member1_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet45  tx
    Should Not Be Equal As Integers  ${member1_s1}  0
    ${member2_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet46  tx
    Should Not Be Equal As Integers  ${member2_s1}  0
    ${member3_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet47  tx
    Should Not Be Equal As Integers  ${member3_s1}  0
    ${member4_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet48  tx
    Should Not Be Equal As Integers  ${member4_s1}  0
    ${member1_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet49  rx
    Should Not Be Equal As Integers  ${member1_s2}  0
    ${member2_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet50  rx
    Should Not Be Equal As Integers  ${member2_s2}  0
    ${member3_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet51  rx
    Should Not Be Equal As Integers  ${member3_s2}  0
    ${member4_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet52  rx
    Should Not Be Equal As Integers  ${member4_s2}  0
    ${range_1}=   Evaluate  ${member1_s1} - ${member1_s2}
    ${range_2}=   Evaluate  ${member2_s1} - ${member2_s2}
    ${range_3}=   Evaluate  ${member3_s1} - ${member3_s2}
    ${range_4}=   Evaluate  ${member4_s1} - ${member4_s2}
    ${result1}=  verify value is in range  ${range_1}  -10  10
    Should be true  ${result1}
    ${result2}=  verify value is in range  ${range_2}  -10  10
    Should be true  ${result2}
    ${result3}=  verify value is in range  ${range_3}  -10  10
    Should be true  ${result3}
    ${result4}=  verify value is in range  ${range_4}  -10  10
    Should be true  ${result4}
    ${mem1s1}=  Convert to Integer  ${member1_s1}
    ${mem2s1}=  Convert to Integer  ${member2_s1}
    ${mem3s1}=  Convert to Integer  ${member3_s1}
    ${mem4s1}=  Convert to Integer  ${member4_s1}
    ${percent_1}=   Evaluate  100*(operator.truediv(int(${mem1s1}),160000))  operator
    ${percent_2}=   Evaluate  100*(operator.truediv(int(${mem2s1}),160000))  operator
    ${percent_3}=   Evaluate  100*(operator.truediv(int(${mem3s1}),160000))  operator
    ${percent_4}=   Evaluate  100*(operator.truediv(int(${mem4s1}),160000))  operator
    ${result1}=  verify value is in range  ${percent_1}  15  32
    Should be true  ${result1}
    ${result2}=  verify value is in range  ${percent_2}  15  32
    Should be true  ${result2}
    ${result3}=  verify value is in range  ${percent_3}  15  32
    Should be true  ${result3}
    ${result4}=  verify value is in range  ${percent_4}  15  32
    Should be true  ${result4}
    [Tags]  feature  

TC017: Verify hashing does not work when only SRC Mac is changed in L3 Packets
    ${stream}=  L3 add  flow=a->c  frame_rate=${frame_rate}  frame_size=${frame_size}  frame_cnt=${frame_cnt}  no_arp=True   name=atoc
    ...     src_mac=${src_mac}  src_mac_step=00:00:00:00:01:00  src_cnt=28
    ...     src_ip=100.1.1.1  src_ip_step=0.0.0.0  src_gw_prefix=24  src_gw=100.2.1.1  src_gw_step=0.0.0.0
    ...     dst_mac=${dst_mac}  dst_mac_step=00:00:00:00:00:00
    ...     dst_ip=100.2.1.1  dst_ip_step=0.0.0.0  dst_cnt=1  dst_gw_prefix=24  dst_gw=100.1.1.1  dst_gw_step=0.0.0.0
    clear stats
    cli execute command  s1  clear interface statistics
    cli execute command  s2  clear interface statistics
    start traffic
    sleep  10
    stop traffic
    ${testpass}=  Set Variable  FAIL
    ${member1_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet45  tx
    ${member2_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet46  tx
    ${member3_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet47  tx
    ${member4_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet48  tx
    ${member1_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet49  rx
    ${member2_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet50  rx
    ${member3_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet51  rx
    ${member4_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet52  rx
    ${testpass}=  Set Variable If
    ...   ${member1_s2} > 9990  PASS
    ...   ${member2_s2} > 9990  PASS
    ...   ${member3_s2} > 9990  PASS
    ...   ${member4_s2} > 9990  PASS
    Should be equal as strings  ${testpass}  PASS
    [Tags]  negative

TC018: Change hash seeds and verify source MAC address hashing for L2 packets
    cli delete portchannel  s1  ${s1s2_10g_number}
    cli delete portchannel  s2  ${s2s1_10g_number}
    sleep  5
    cli add hashseed  s1  ${hash_seed_3}  ${hash_seed_3}
    configure lag interfaces with hash mode  enhanced
    sleep  5
    ${stream}=  L2 add  name=atoc  flow=a->c  src_mac=${src_mac}  src_cnt=${src_cnt}  src_mac_step=${src_mac_step}  
    ...  dst_mac=${dst_mac}  dst_cnt=1  dst_mac_step=00:00:00:00:00:00
    ...  frame_rate=${frame_rate}  frame_size=${frame_size}  frame_cnt=${frame_cnt}  
    send and verify traffic  True  True  True  True  
    [Tags]  negative

TC019: Change hash seeds and verify source IPv4 address hashing for L3 packets
    cli delete portchannel  s1  ${s1s2_10g_number}
    cli delete portchannel  s2  ${s2s1_10g_number}
    sleep  5
    cli add hashseed  s1  ${hash_seed_3}  ${hash_seed_3}
    configure lag interfaces with hash mode  enhanced
    sleep  5
    ${stream}=  L3 add  flow=a->c  frame_rate=${frame_rate}  frame_size=${frame_size}  frame_cnt=${frame_cnt}  no_arp=True   name=atoc
    ...     src_mac=${src_mac}  src_mac_step=00:00:00:00:00:00
    ...     src_ip=100.1.1.1  src_ip_step=0.0.1.0  src_cnt=28  src_gw_prefix=24  src_gw=100.2.1.1  src_gw_step=0.0.0.0
    ...     dst_mac=${dst_mac}  dst_mac_step=00:00:00:00:00:00
    ...     dst_ip=100.2.1.1  dst_ip_step=0.0.0.0  dst_cnt=1  dst_gw_prefix=24  dst_gw=100.1.1.1  dst_gw_step=0.0.0.0
    send and verify traffic  True  True  True  True  
    [Tags]  negative

TC020: Verify symmetric source MAC address hashing with L2 Traffic
    rest delete policy  admin-view  P1
    rest add policy  admin-view  P1  forward
    rest add policy match  admin-view  P1  1  {"any-traffic": true, "sequence": 1}
    rest add policy interface  admin-view  P1  ${filter_nick_1}  filter
    rest add policy interface  admin-view  P1  ${s2_dummy_dnick}  delivery
    rest add policy  admin-view  P2  forward
    rest add policy match  admin-view  P2  1  {"any-traffic": true, "sequence": 1}
    rest add policy interface  admin-view  P2  ${s2_dummy_fnick}  filter
    rest add policy interface  admin-view  P2  ${delivery_nick_3}  delivery
    Sleep  10
    ${verify_policy1}=  rest verify bigtap policy  P1  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  P2  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2}
    ${stream}=  L2 add  flow=a->b  frame_rate=${frame_rate}  frame_size=${frame_size}  frame_cnt=${frame_cnt}
    ...     src_mac=00:01:02:03:04:01  dst_mac=00:0A:0B:0C:0D:01
    ...     name=a_b_flow
    clear stats
    cli execute command  s1  clear interface statistics
    cli execute command  s2  clear interface statistics
    start traffic
    sleep  10
    stop traffic
    sleep  5
    ${testpass}=  Set Variable  FAIL
    ${member1_tx}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet45  tx
    ${member2_tx}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet46  tx
    ${member3_tx}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet47  tx
    ${member4_tx}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet48  tx
    ${member1_rx}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet45  rx
    ${member2_rx}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet46  rx
    ${member3_rx}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet47  rx
    ${member4_rx}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet48  rx
    ${mem1rx}=  Convert To Integer  ${member1_rx}
    ${mem2rx}=  Convert To Integer  ${member2_rx}
    ${mem3rx}=  Convert To Integer  ${member3_rx}
    ${mem4rx}=  Convert To Integer  ${member4_rx}
    ${frmcnt}=  Convert To Integer  ${frame_cnt}
    ${link1tx}=  Set Variable If  ${member1_tx} > 100  TRUE  FALSE
    ${link2tx}=  Set Variable If  ${member2_tx} > 100  TRUE  FALSE
    ${link3tx}=  Set Variable If  ${member3_tx} > 100  TRUE  FALSE
    ${link4tx}=  Set Variable If  ${member4_tx} > 100  TRUE  FALSE
    Run keyword if  '${link1tx}' == 'TRUE'  Should Be Equal As Integers  ${mem1rx}  ${frmcnt}
    Run keyword if  '${link2tx}' == 'TRUE'  Should Be Equal As Integers  ${mem2rx}  ${frmcnt}
    Run keyword if  '${link3tx}' == 'TRUE'  Should Be Equal As Integers  ${mem3rx}  ${frmcnt}
    Run keyword if  '${link4tx}' == 'TRUE'  Should Be Equal As Integers  ${mem4rx}  ${frmcnt}
    rest delete policy  admin-view  P1
    rest delete policy  admin-view  P2
    rest add policy  admin-view  P1  forward
    rest add policy match  admin-view  P1  1  {"any-traffic": true, "sequence": 1}
    rest add policy interface  admin-view  P1  ${filter_nick_1}  filter
    rest add policy interface  admin-view  P1  ${delivery_nick_1}  delivery
    Sleep  10
    [Tags]  feature

TC021: Verify symmetric source IP address hashing with L3 Traffic
    rest delete policy  admin-view  P1
    rest add policy  admin-view  P1  forward
    rest add policy match  admin-view  P1  1  {"any-traffic": true, "sequence": 1}
    rest add policy interface  admin-view  P1  ${filter_nick_1}  filter
    rest add policy interface  admin-view  P1  ${s2_dummy_dnick}  delivery
    rest add policy  admin-view  P2  forward
    rest add policy match  admin-view  P2  1  {"any-traffic": true, "sequence": 1}
    rest add policy interface  admin-view  P2  ${s2_dummy_fnick}  filter
    rest add policy interface  admin-view  P2  ${delivery_nick_3}  delivery
    Sleep  10
    ${verify_policy1}=  rest verify bigtap policy  P1  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  P2  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2}
    ${stream}=  L2 add  flow=a->b  frame_rate=${frame_rate}  frame_size=${frame_size}  frame_cnt=${frame_cnt}
    ...     src_mac=00:01:02:03:04:01  dst_mac=00:0A:0B:0C:0D:01  no_arp=True
    ...     src_ip=100.1.1.1  dst_ip=100.1.1.2  ethertype=0800
    ...     name=a_b_flow
    clear stats
    cli execute command  s1  clear interface statistics
    cli execute command  s2  clear interface statistics
    start traffic
    sleep  10
    stop traffic
    sleep  5
    ${testpass}=  Set Variable  FAIL
    ${member1_tx}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet45  tx
    ${member2_tx}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet46  tx
    ${member3_tx}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet47  tx
    ${member4_tx}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet48  tx
    ${member1_rx}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet45  rx
    ${member2_rx}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet46  rx
    ${member3_rx}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet47  rx
    ${member4_rx}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet48  rx
    ${mem1rx}=  Convert To Integer  ${member1_rx}
    ${mem2rx}=  Convert To Integer  ${member2_rx}
    ${mem3rx}=  Convert To Integer  ${member3_rx}
    ${mem4rx}=  Convert To Integer  ${member4_rx}
    ${frmcnt}=  Convert To Integer  ${frame_cnt}
    ${link1tx}=  Set Variable If  ${member1_tx} > 100  TRUE  FALSE
    ${link2tx}=  Set Variable If  ${member2_tx} > 100  TRUE  FALSE
    ${link3tx}=  Set Variable If  ${member3_tx} > 100  TRUE  FALSE
    ${link4tx}=  Set Variable If  ${member4_tx} > 100  TRUE  FALSE
    Run keyword if  '${link1tx}' == 'TRUE'  Should Be Equal As Integers  ${mem1rx}  ${frmcnt}
    Run keyword if  '${link2tx}' == 'TRUE'  Should Be Equal As Integers  ${mem2rx}  ${frmcnt}
    Run keyword if  '${link3tx}' == 'TRUE'  Should Be Equal As Integers  ${mem3rx}  ${frmcnt}
    Run keyword if  '${link4tx}' == 'TRUE'  Should Be Equal As Integers  ${mem4rx}  ${frmcnt}
    rest delete policy  admin-view  P1
    rest delete policy  admin-view  P2
    rest add policy  admin-view  P1  forward
    rest add policy match  admin-view  P1  1  {"any-traffic": true, "sequence": 1}
    rest add policy interface  admin-view  P1  ${filter_nick_1}  filter
    rest add policy interface  admin-view  P1  ${delivery_nick_1}  delivery
    Sleep  10
    [Tags]  feature

TC023: Flap port-channel interface and verify Source MAC address hashing for L2 packets
    ${stream}=  L2 add  name=atoc  flow=a->c  src_mac=${src_mac}  src_cnt=${src_cnt}  src_mac_step=${src_mac_step}  
    ...  dst_mac=${dst_mac}  dst_cnt=1  dst_mac_step=00:00:00:00:00:00
    ...  frame_rate=${frame_rate}  frame_size=${frame_size}  frame_cnt=${frame_cnt}  
    send and verify traffic  True  True  True  True  
    ${ret_value_1}=  cli disable interface  s1  ${s1s2_10g_name}
    Should Be True  ${ret_value_1}        
    Sleep  30
    ${ret_value_1}=  cli enable interface  s1  ${s1s2_10g_name}
    Should Be True  ${ret_value_1}        
    Sleep  30    
    send and verify traffic  True  True  True  True  
    [Tags]  ha

TC023: Restart process OFAD and verify Source MAC address hashing for L2 packets
    ${stream}=  L2 add  name=atoc  flow=a->c  src_mac=${src_mac}  src_cnt=${src_cnt}  src_mac_step=${src_mac_step}  
    ...  dst_mac=${dst_mac}  dst_cnt=1  dst_mac_step=00:00:00:00:00:00
    ...  frame_rate=${frame_rate}  frame_size=${frame_size}  frame_cnt=${frame_cnt}  
    send and verify traffic  True  True  True  True  
    bash restart process  s1  ofad
    Sleep  30
    send and verify traffic  True  True  True  True  
    [Tags]  ha
    
TC024: Reboot switch and verify Source MAC address hashing for L2 packets
    ${stream}=  L2 add  name=atoc  flow=a->c  src_mac=${src_mac}  src_cnt=${src_cnt}  src_mac_step=${src_mac_step}  
    ...  dst_mac=${dst_mac}  dst_cnt=1  dst_mac_step=00:00:00:00:00:00
    ...  frame_rate=${frame_rate}  frame_size=${frame_size}  frame_cnt=${frame_cnt}  
    send and verify traffic  True  True  True  True  
    cli restart switch  s1  save_config="yes"
    Sleep  30
    send and verify traffic  True  True  True  True  
    [Tags]  ha

* Keywords

configure lag interfaces with hash mode  [Arguments]  ${lag_mode}  
    # Configure LAG on s1
    cli add portchannel  s1  ${s1s2_10g_number}  ${s1s2_10g_port_range}  ${lag_mode}
    # Configure LAG on s2    
    cli add portchannel  s2  ${s2s1_10g_number}  ${s2s1_10g_port_range}  ${lag_mode}
    Sleep   10

lag suite setup
    base suite setup
    cli add hashseed  s1  ${hash_seed_1}  ${hash_seed_2}
    configure lag interfaces with hash mode  enhanced
    rest add interface role  s1  ${filter_1}  filter  ${filter_nick_1}
    rest add interface role  s1  ${filter_2}  filter  ${filter_nick_2}
    rest add interface role  s1  ${delivery_3}  delivery  ${delivery_nick_3}
    rest add interface role  s2  ${delivery_1}  delivery  ${delivery_nick_1}
    rest add interface role  s2  ${s2_dummy_filter}    filter    ${s2_dummy_fnick}
    rest add interface role  s2  ${s2_dummy_delivery}  delivery  ${s2_dummy_dnick}
    rest add policy  admin-view  P1  forward
    rest add policy match  admin-view  P1  1  {"any-traffic": true, "sequence": 1}
    rest add policy interface  admin-view  P1  ${filter_nick_1}  filter
    rest add policy interface  admin-view  P1  ${delivery_nick_1}  delivery
    Sleep  10
    
verify portchannel interface is up  [Arguments]  ${switch}  ${interface_name}  
    ${inft_state}=  cli show interface state  ${switch}  ${interface_name}
    Should Contain  ${inft_state}  up

send and verify traffic  [Arguments]  ${member1s2}  ${member2s2}  ${member3s2}  ${member4s2}
    clear stats
    cli execute command  s1  clear interface statistics
    cli execute command  s2  clear interface statistics
    start traffic
    sleep  10
    stop traffic
    ${member1_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet45  tx
    Should Not Be Equal As Integers  ${member1_s1}  0
    ${member2_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet46  tx
    Should Not Be Equal As Integers  ${member2_s1}  0
    ${member3_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet47  tx
    Should Not Be Equal As Integers  ${member3_s1}  0
    ${member4_s1}=  cli return member interface stats  s1  ${s1s2_10g_number}  ethernet48  tx
    Should Not Be Equal As Integers  ${member4_s1}  0
    ${member1_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet49  rx
    Should Not Be Equal As Integers  ${member1_s2}  0
    ${member2_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet50  rx
    Should Not Be Equal As Integers  ${member2_s2}  0
    ${member3_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet51  rx
    Should Not Be Equal As Integers  ${member3_s2}  0
    ${member4_s2}=  cli return member interface stats  s2  ${s2s1_10g_number}  ethernet52  rx
    Should Not Be Equal As Integers  ${member4_s2}  0
    ${range_1}=   Evaluate  ${member1_s1} - ${member1_s2}
    ${range_2}=   Evaluate  ${member2_s1} - ${member2_s2}
    ${range_3}=   Evaluate  ${member3_s1} - ${member3_s2}
    ${range_4}=   Evaluate  ${member4_s1} - ${member4_s2}
    ${result1}=  verify value is in range  ${range_1}  -10  10
    Should be true  ${result1}
    ${result2}=  verify value is in range  ${range_2}  -10  10
    Should be true  ${result2}
    ${result3}=  verify value is in range  ${range_3}  -10  10
    Should be true  ${result3}
    ${result4}=  verify value is in range  ${range_4}  -10  10
    Should be true  ${result4}
    ${mem1s1}=  Convert to Integer  ${member1_s1}
    ${mem2s1}=  Convert to Integer  ${member2_s1}
    ${mem3s1}=  Convert to Integer  ${member3_s1}
    ${mem4s1}=  Convert to Integer  ${member4_s1}
    ${percent_1}=   Evaluate  100*(operator.truediv(int(${mem1s1}),${frame_cnt}))  operator
    ${percent_2}=   Evaluate  100*(operator.truediv(int(${mem2s1}),${frame_cnt}))  operator
    ${percent_3}=   Evaluate  100*(operator.truediv(int(${mem3s1}),${frame_cnt}))  operator
    ${percent_4}=   Evaluate  100*(operator.truediv(int(${mem4s1}),${frame_cnt}))  operator
    ${result1}=  verify value is in range  ${percent_1}  15  32
    Should be true  ${result1}
    ${result2}=  verify value is in range  ${percent_2}  15  32
    Should be true  ${result2}
    ${result3}=  verify value is in range  ${percent_3}  15  32
    Should be true  ${result3}
    ${result4}=  verify value is in range  ${percent_4}  15  32
    Should be true  ${result4}

lag test setup
    ${result1}=  write version to file
    Should be true  ${result1}
    ${result}=  start syslog monitor
    Should be true  ${result}
    ixia initialize  tg1  init=true

lag test teardown
    delete traffic
    sleep  2
    ${result1}=  stop syslog monitor
    Should be true  ${result1}
    
lag suite teardown
    cli delete portchannel  s1  ${s1s2_10g_number}
    cli delete portchannel  s2  ${s2s1_10g_number}
    rest delete policy  admin-view  P1
    rest delete policy  admin-view  P2
    rest delete interface role  s1  ${filter_1}  filter  ${filter_nick_1} 
    rest delete interface role  s1  ${filter_2}  filter  ${filter_nick_2} 
    rest delete interface role  s1  ${delivery_3}  delivery  ${delivery_nick_3}
    rest delete interface role  s2  ${delivery_1}  delivery  ${delivery_nick_1}
    rest delete interface role  s2  ${s2_dummy_filter}  filter  ${s2_dummy_fnick}
    rest delete interface role  s2  ${s2_dummy_delivery}  delivery  ${s2_dummy_dnick}
    rest delete interface  s1  ${filter_1}
    rest delete interface  s1  ${filter_2}    
    rest delete interface  s2  ${delivery_1}
    rest delete switch  s1
    rest delete switch  s2
    base suite teardown