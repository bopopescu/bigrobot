*Settings
Documentation               BigTap SwitchLight Platform Test Suite
Suite Setup                 rtag3 suite setup
Suite Teardown              rtag3 suite teardown
Test Setup                  rtag3 test setup
Test Teardown               rtag3 test teardown
Force Tags                  BigTap  SwitchLight  dell-s4810  switch-platform  RTAG3  lag  hashing
Library                     keywords/BsnCommon.py
Library                     keywords/AppController.py
Library                     keywords/BigTap.py
Library                     keywords/SwitchLight.py
Library                     keywords/Ixia.py
Library                     Collections.py
Library                     OperatingSystem.py
Library                     String.py

* Variable
${switchlight_version}                  Switch Light OS SWL-BT-
${s1_10g_name_1}                        port-channel1  
${s1_10g_port_range_1}                  15,17,25,27
${s1_10g_number_1}                      1
${s1_lag_mem_1_1}                       15
${s1_lag_mem_1_2}                       17
${s1_lag_mem_1_3}                       25
${s1_lag_mem_1_4}                       27 

${s1_10g_name_2}                        port-channel2
${s1_10g_port_range_2}                  16,18,26,28
${s1_10g_number_2}                      2
${s1_lag_mem_2_1}                       16
${s1_lag_mem_2_2}                       18
${s1_lag_mem_2_3}                       26
${s1_lag_mem_2_4}                       28

${policy_name_1}                        RTAG3_POLICY_1
${filter_1}                             ethernet1
${filter_nick_1}                        ixia-1-4
${delivery_1}                           port-channel1
${delivery_nick_1}                      rtag3_delivery

${policy_name_2}                        RTAG3_POLICY_2
${filter_2}                             port-channel2
${filter_nick_2}                        rtag3_filter
${delivery_2}                           ethernet2
${delivery_nick_2}                      ixia-1-3

*Test Case
TC001: Verify Configuration
    verify portchannel interface is up   s1  ${s1_10g_name_1}
    verify portchannel interface is up   s1  ${s1_10g_name_2}

TC002: Verify Source MAC address hashing 
    ${stream1}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:00  dst_mac=00:02:03:04:05:01
    ...     name=a1_b_flow
    ${stream2}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:01  dst_mac=00:02:03:04:05:01
    ...     name=a2_b_flow    
    ${stream3}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:02  dst_mac=00:02:03:04:05:01
    ...     name=a3_b_flow
    ${stream4}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:03  dst_mac=00:02:03:04:05:01
    ...     name=a4_b_flow
    send and verify traffic  
    [Tags]  full  feature  traffic

TC003: Disable two links and verify source MAC address hashing 
    bash execute command  s1  ofad-ctl debug smuckers-enable
    bash execute command  s1  ofad-ctl phy spe SWITCH_PORT_ACTION_ADMIN_DISABLE ${s1_lag_mem_1_3}
    bash execute command  s1  ofad-ctl phy spe SWITCH_PORT_ACTION_ADMIN_DISABLE ${s1_lag_mem_1_4}
    ${stream1}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:00  dst_mac=00:02:03:04:05:01
    ...     name=a1_b_flow
    ${stream2}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:01  dst_mac=00:02:03:04:05:01
    ...     name=a2_b_flow    
    ${stream3}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:02  dst_mac=00:02:03:04:05:01
    ...     name=a3_b_flow
    ${stream4}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:03  dst_mac=00:02:03:04:05:01
    ...     name=a4_b_flow
    send and verify traffic for disabled interfaces
    [Tags]  full  feature  traffic

TC004: Verify destination MAC address hashing 
    ${stream1}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:00  dst_mac=00:02:03:04:05:01
    ...     name=a1_b_flow
    ${stream2}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:00  dst_mac=00:02:03:04:05:02
    ...     name=a2_b_flow    
    ${stream3}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:00  dst_mac=00:02:03:04:05:03
    ...     name=a3_b_flow
    ${stream4}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:00  dst_mac=00:02:03:04:05:04
    ...     name=a4_b_flow
    send and verify traffic  
    [Tags]  full  feature  traffic

TC005: Disable two links and verify destination MAC address hashing 
    bash execute command  s1  ofad-ctl debug smuckers-enable
    bash execute command  s1  ofad-ctl phy spe SWITCH_PORT_ACTION_ADMIN_DISABLE ${s1_lag_mem_1_3}
    bash execute command  s1  ofad-ctl phy spe SWITCH_PORT_ACTION_ADMIN_DISABLE ${s1_lag_mem_1_4}
    ${stream1}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:00  dst_mac=00:02:03:04:05:01
    ...     name=a1_b_flow
    ${stream2}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:00  dst_mac=00:02:03:04:05:02
    ...     name=a2_b_flow    
    ${stream3}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:00  dst_mac=00:02:03:04:05:03
    ...     name=a3_b_flow
    ${stream4}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:00  dst_mac=00:02:03:04:05:04
    ...     name=a4_b_flow
    send and verify traffic for disabled interfaces

    [Tags]  full  feature  traffic

TC006: Verify Ethernet type hashing 
    ${stream1}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:00  dst_mac=00:02:03:04:05:01  ethertype=0801
    ...     name=a1_b_flow
    ${stream2}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:00  dst_mac=00:02:03:04:05:01  ethertype=0802
    ...     name=a2_b_flow    
    ${stream3}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:00  dst_mac=00:02:03:04:05:01  ethertype=0803
    ...     name=a3_b_flow
    ${stream4}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:00  dst_mac=00:02:03:04:05:01  ethertype=0804
    ...     name=a4_b_flow
    send and verify traffic  
    [Tags]  full  feature  traffic

TC007: Disable two links and verify Ethernet type hashing 
    bash execute command  s1  ofad-ctl debug smuckers-enable
    bash execute command  s1  ofad-ctl phy spe SWITCH_PORT_ACTION_ADMIN_DISABLE ${s1_lag_mem_1_3}
    bash execute command  s1  ofad-ctl phy spe SWITCH_PORT_ACTION_ADMIN_DISABLE ${s1_lag_mem_1_4}
    ${stream1}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:00  dst_mac=00:02:03:04:05:01  ethertype=0801
    ...     name=a1_b_flow
    ${stream2}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:00  dst_mac=00:02:03:04:05:01  ethertype=0802
    ...     name=a2_b_flow    
    ${stream3}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:00  dst_mac=00:02:03:04:05:01  ethertype=0803
    ...     name=a3_b_flow
    ${stream4}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:00  dst_mac=00:02:03:04:05:01  ethertype=0804
    ...     name=a4_b_flow
    send and verify traffic for disabled interfaces

    [Tags]  full  feature  traffic

TC008: Verify VLAN ID based hashing 
    ${stream1}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:00  dst_mac=00:02:03:04:05:01  vlan_id=100  ethertype=8100
    ...     name=a1_b_flow
    ${stream2}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:00  dst_mac=00:02:03:04:05:01  vlan_id=200  ethertype=8100
    ...     name=a2_b_flow    
    ${stream3}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:00  dst_mac=00:02:03:04:05:01  vlan_id=300  ethertype=8100
    ...     name=a3_b_flow
    ${stream4}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:00  dst_mac=00:02:03:04:05:01  vlan_id=400  ethertype=8100
    ...     name=a4_b_flow
    send and verify traffic  
    [Tags]  full  feature  traffic

TC009: Disable two links and verify VLAN ID based hashing 
    bash execute command  s1  ofad-ctl debug smuckers-enable
    bash execute command  s1  ofad-ctl phy spe SWITCH_PORT_ACTION_ADMIN_DISABLE ${s1_lag_mem_1_3}
    bash execute command  s1  ofad-ctl phy spe SWITCH_PORT_ACTION_ADMIN_DISABLE ${s1_lag_mem_1_4}
    ${stream1}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:00  dst_mac=00:02:03:04:05:01  vlan_id=100  ethertype=8100
    ...     name=a1_b_flow
    ${stream2}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:00  dst_mac=00:02:03:04:05:01  vlan_id=200  ethertype=8100
    ...     name=a2_b_flow    
    ${stream3}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:00  dst_mac=00:02:03:04:05:01  vlan_id=300  ethertype=8100
    ...     name=a3_b_flow
    ${stream4}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:00  dst_mac=00:02:03:04:05:01  vlan_id=400  ethertype=8100
    ...     name=a4_b_flow
    send and verify traffic for disabled interfaces

    [Tags]  full  feature  traffic

TC010: Verify hashing by varying all L2 fields
    ${stream1}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:01  dst_mac=00:02:03:04:05:01  vlan_id=100  ethertype=8100  
    ...     name=a1_b_flow
    ${stream2}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:02  dst_mac=00:02:03:04:05:02  vlan_id=200  ethertype=8100  
    ...     name=a2_b_flow    
    ${stream3}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:03  dst_mac=00:02:03:04:05:03  vlan_id=300  ethertype=8100  
    ...     name=a3_b_flow
    ${stream4}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:04  dst_mac=00:02:03:04:05:04  vlan_id=400  ethertype=8100  
    ...     name=a4_b_flow
    send and verify traffic  
    [Tags]  full  feature  traffic

TC011: Disable two links and verify hashing by varying all L2 fields
    bash execute command  s1  ofad-ctl debug smuckers-enable
    bash execute command  s1  ofad-ctl phy spe SWITCH_PORT_ACTION_ADMIN_DISABLE ${s1_lag_mem_1_3}
    bash execute command  s1  ofad-ctl phy spe SWITCH_PORT_ACTION_ADMIN_DISABLE ${s1_lag_mem_1_4}
    ${stream1}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:01  dst_mac=00:02:03:04:05:01  vlan_id=100  ethertype=0801
    ...     name=a1_b_flow
    ${stream2}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:02  dst_mac=00:02:03:04:05:02  vlan_id=200  ethertype=8100
    ...     name=a2_b_flow    
    ${stream3}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:03  dst_mac=00:02:03:04:05:03  vlan_id=300  ethertype=8100
    ...     name=a3_b_flow
    ${stream4}=  L2 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:04  dst_mac=00:02:03:04:05:04  vlan_id=400  ethertype=8100
    ...     name=a4_b_flow
    send and verify traffic for disabled interfaces
    [Tags]  full  feature  traffic

TC012: Verify hashing by varying all fields in an L3 Packet
    ${stream1}=  L3 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:00  dst_mac=00:02:03:04:05:00  no_arp=True
    ...     src_ip=100.1.1.1  dst_ip=100.1.1.2  ethertype=8100  vlan_id=1000  name=a0_b_flow
    ${stream2}=  L3 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:01  dst_mac=00:02:03:04:05:01  no_arp=True
    ...     src_ip=101.1.1.1  dst_ip=101.1.1.2  ethertype=8100  vlan_id=2000  name=a1_b_flow
    ${stream3}=  L3 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:02  dst_mac=00:02:03:04:05:02  no_arp=True
    ...     src_ip=102.1.1.1  dst_ip=102.1.1.2  ethertype=8100  vlan_id=2500  name=a2_b_flow
    ${stream4}=  L3 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:03  dst_mac=00:02:03:04:05:03  no_arp=True
    ...     src_ip=103.1.1.1  dst_ip=103.1.1.2  ethertype=8100  vlan_id=3300  name=a3_b_flow
    send and verify traffic  
    [Tags]  full  feature  traffic

TC013: Disable two links and verify hashing by varying all fields in an L3 Packet
    bash execute command  s1  ofad-ctl debug smuckers-enable
    bash execute command  s1  ofad-ctl phy spe SWITCH_PORT_ACTION_ADMIN_DISABLE ${s1_lag_mem_1_3}
    bash execute command  s1  ofad-ctl phy spe SWITCH_PORT_ACTION_ADMIN_DISABLE ${s1_lag_mem_1_4}
    ${stream1}=  L3 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:00  dst_mac=00:02:03:04:05:00  no_arp=True
    ...     src_ip=100.1.1.1  dst_ip=100.1.1.2  ethertype=8100  vlan_id=1000  name=a0_b_flow
    ${stream2}=  L3 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:01  dst_mac=00:02:03:04:05:01  no_arp=True
    ...     src_ip=101.1.1.1  dst_ip=101.1.1.2  ethertype=8100  vlan_id=2000  name=a1_b_flow
    ${stream3}=  L3 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:02  dst_mac=00:02:03:04:05:02  no_arp=True
    ...     src_ip=102.1.1.1  dst_ip=102.1.1.2  ethertype=8100  vlan_id=2500  name=a2_b_flow
    ${stream4}=  L3 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:03  dst_mac=00:02:03:04:05:03  no_arp=True
    ...     src_ip=103.1.1.1  dst_ip=103.1.1.2  ethertype=8100  vlan_id=3300  name=a3_b_flow
    send and verify traffic for disabled interfaces
    [Tags]  full  feature  traffic

TC014: Restart process OFAD and verify RTAG3 hashing
    ${stream1}=  L3 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:00  dst_mac=00:02:03:04:05:00  no_arp=True
    ...     src_ip=100.1.1.1  dst_ip=100.1.1.2  ethertype=8100  vlan_id=1000  name=a0_b_flow
    ${stream2}=  L3 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:01  dst_mac=00:02:03:04:05:01  no_arp=True
    ...     src_ip=101.1.1.1  dst_ip=101.1.1.2  ethertype=8100  vlan_id=2000  name=a1_b_flow
    ${stream3}=  L3 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:02  dst_mac=00:02:03:04:05:02  no_arp=True
    ...     src_ip=102.1.1.1  dst_ip=102.1.1.2  ethertype=8100  vlan_id=2500  name=a2_b_flow
    ${stream4}=  L3 add  flow=a->b  frame_rate=10000  frame_size=64  frame_cnt=100000
    ...     src_mac=00:01:02:03:04:03  dst_mac=00:02:03:04:05:03  no_arp=True
    ...     src_ip=103.1.1.1  dst_ip=103.1.1.2  ethertype=8100  vlan_id=3300  name=a3_b_flow
    send and verify traffic
    bash restart process  s1  ofad
    Sleep  90
    send and verify traffic
    [Tags]  full  ha  traffic

* Keywords 
rtag3 suite setup
    base suite setup
    cli add portchannel  s1  ${s1_10g_number_1}  ${s1_10g_port_range_1}  L2
    cli add portchannel  s1  ${s1_10g_number_2}  ${s1_10g_port_range_2}  L2
    rest add interface role  s1  ${filter_1}  filter  ${filter_nick_1}
    rest add interface role  s1  ${delivery_1}  delivery  ${delivery_nick_1}
    rest add interface role  s1  ${filter_2}  filter  ${filter_nick_2}
    rest add interface role  s1  ${delivery_2}  delivery  ${delivery_nick_2}
    rest add policy  admin-view  ${policy_name_1}  forward
    rest add policy match  admin-view  ${policy_name_1}  1  {"any-traffic": true, "sequence": 1}
    rest add policy interface  admin-view  ${policy_name_1}  ${filter_nick_1}  filter
    rest add policy interface  admin-view  ${policy_name_1}  ${delivery_nick_1}  delivery
    rest add policy  admin-view  ${policy_name_2}  forward
    rest add policy match  admin-view  ${policy_name_2}  1  {"any-traffic": true, "sequence": 1}
    rest add policy interface  admin-view  ${policy_name_2}  ${filter_nick_2}  filter
    rest add policy interface  admin-view  ${policy_name_2}  ${delivery_nick_2}  delivery
    Sleep  10
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  ${policy_name_2}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2}

rtag3 test setup
    ${result1}=  write version to file
    Should be true  ${result1}
    ${result2}=  start syslog monitor
    Should be true  ${result2}

verify portchannel interface is up  [Arguments]  ${switch}  ${interface_name}  
    ${inft_state}=  cli show interface state  ${switch}  ${interface_name}
    Should Contain  ${inft_state}  up

send and verify traffic
    clear stats  
    cli execute command  s1  clear interface statistics
    start traffic    
    sleep  10
    stop traffic
    sleep  2
    ${report}=  fetch port stats
    ${tx_value}=  verify dict key  ${report}  a  transmitted_frames
    ${rx_value}=  verify dict key  ${report}  b  received_valid_frames
    ${in_range_0}=  ixia verify traffic rate  ${tx_value}  ${rx_value}
    Should be true  ${in_range_0}
    ${in_range_1}=  ixia verify traffic rate  ${tx_value}  400000  50
    Should be true  ${in_range_1}
    ${in_range_2}=  ixia verify traffic rate  ${rx_value}  400000  50
    Should be true  ${in_range_2}

    ${member1_s1}=  cli return member interface stats  s1  ${s1_10g_number_1}  ethernet15  tx
    Should Not Be Equal As Integers  ${member1_s1}  0
    ${range_mem1}=  ixia verify traffic rate  ${member1_s1}  100000  50
    Should Be True  ${range_mem1}
    ${member2_s1}=  cli return member interface stats  s1  ${s1_10g_number_1}  ethernet17  tx
    Should Not Be Equal As Integers  ${member2_s1}  0
    ${range_mem2}=  ixia verify traffic rate  ${member2_s1}  100000  50
    Should Be True  ${range_mem2}
    ${member3_s1}=  cli return member interface stats  s1  ${s1_10g_number_1}  ethernet25  tx
    Should Not Be Equal As Integers  ${member3_s1}  0
    ${range_mem3}=  ixia verify traffic rate  ${member3_s1}  100000  50
    Should Be True  ${range_mem3}
    ${member4_s1}=  cli return member interface stats  s1  ${s1_10g_number_1}  ethernet27  tx    
    Should Not Be Equal As Integers  ${member4_s1}  0
    ${range_mem4}=  ixia verify traffic rate  ${member4_s1}  100000  50
    Should Be True  ${range_mem4}

    ${member1_s4}=  cli return member interface stats  s1  ${s1_10g_number_2}  ethernet16  rx
    Should Not Be Equal As Integers  ${member1_s4}  0
    ${range_mem5}=  ixia verify traffic rate  ${member1_s4}  100000  50
    Should Be True  ${range_mem5}
    ${member2_s4}=  cli return member interface stats  s1  ${s1_10g_number_2}  ethernet18  rx
    Should Not Be Equal As Integers  ${member2_s4}  0
    ${range_mem6}=  ixia verify traffic rate  ${member2_s4}  100000  50
    Should Be True  ${range_mem6}
    ${member3_s4}=  cli return member interface stats  s1  ${s1_10g_number_2}  ethernet26  rx
    Should Not Be Equal As Integers  ${member3_s4}  0
    ${range_mem7}=  ixia verify traffic rate  ${member3_s4}  100000  50
    Should Be True  ${range_mem7}
    ${member4_s4}=  cli return member interface stats  s1  ${s1_10g_number_2}  ethernet28  rx
    Should Not Be Equal As Integers  ${member4_s4}  0
    ${range_mem8}=  ixia verify traffic rate  ${member4_s4}  100000  50
    Should Be True  ${range_mem8}
    ${range_1}=   Evaluate  ${member1_s4} - ${member1_s1}
    ${range_2}=   Evaluate  ${member2_s4} - ${member2_s1}
    ${range_3}=   Evaluate  ${member3_s4} - ${member3_s1}
    ${range_4}=   Evaluate  ${member4_s4} - ${member4_s1}
    verify value is in range  ${range_1}  -10  10
    verify value is in range  ${range_2}  -10  10
    verify value is in range  ${range_3}  -10  10
    verify value is in range  ${range_4}  -10  10

send and verify traffic for disabled interfaces
    clear stats  
    cli execute command  s1  clear interface statistics
    start traffic    
    sleep  10
    stop traffic
    sleep  2
    ${report}=  fetch port stats
    ${tx_value}=  verify dict key  ${report}  a  transmitted_frames
    ${rx_value}=  verify dict key  ${report}  b  received_valid_frames
    ${in_range_0}=  ixia verify traffic rate  ${tx_value}  ${rx_value}
    Should be true  ${in_range_0}
    ${in_range_1}=  ixia verify traffic rate  ${tx_value}  400000  50
    Should be true  ${in_range_1}
    ${in_range_2}=  ixia verify traffic rate  ${rx_value}  400000  50
    Should be true  ${in_range_2}
    ${member1_s1}=  cli return member interface stats  s1  ${s1_10g_number_1}  ethernet15  tx
    Should Not Be Equal As Integers  ${member1_s1}  0
    ${range_mem1}=  ixia verify traffic rate  ${member1_s1}  200000  50
    Should Be True  ${range_mem1}
    ${member2_s1}=  cli return member interface stats  s1  ${s1_10g_number_1}  ethernet17  tx
    Should Not Be Equal As Integers  ${member2_s1}  0
    ${range_mem2}=  ixia verify traffic rate  ${member2_s1}  200000  50
    Should Be True  ${range_mem2}
    ${member1_s4}=  cli return member interface stats  s1  ${s1_10g_number_2}  ethernet16  rx
    Should Not Be Equal As Integers  ${member1_s4}  0
    ${range_mem3}=  ixia verify traffic rate  ${member1_s4}  200000  50
    Should Be True  ${range_mem3}
    ${member2_s4}=  cli return member interface stats  s1  ${s1_10g_number_2}  ethernet18  rx
    Should Not Be Equal As Integers  ${member2_s4}  0
    ${range_mem4}=  ixia verify traffic rate  ${member2_s4}  200000  50
    Should Be True  ${range_mem4}
    ${range_1}=   Evaluate  ${member1_s4} - ${member1_s1}
    ${range_2}=   Evaluate  ${member2_s4} - ${member2_s1}
    verify value is in range  ${range_1}  -10  10
    verify value is in range  ${range_2}  -10  10

rtag3 test teardown
    delete traffic
    bash execute command    s1   ofad-ctl phy spe SWITCH_PORT_ACTION_ADMIN_ENABLE ${s1_lag_mem_1_3}
    bash execute command    s1   ofad-ctl phy spe SWITCH_PORT_ACTION_ADMIN_ENABLE ${s1_lag_mem_1_4}
    sleep  5
    ${result1}=  stop syslog monitor
    Should be true  ${result1}
    
rtag3 suite teardown
    rest delete policy  admin-view  ${policy_name_1}
    rest delete policy  admin-view  ${policy_name_2}
    rest delete interface role  s1  ${filter_1}  filter  ${filter_nick_1} 
    rest delete interface role  s1  ${filter_2}  filter  ${filter_nick_2} 
    rest delete interface role  s1  ${delivery_1}  delivery  ${delivery_nick_1}
    rest delete interface role  s1  ${delivery_2}  delivery  ${delivery_nick_2}
    rest delete interface  s1  ${filter_1}
    rest delete interface  s1  ${filter_2}
    rest delete interface  s1  ${delivery_1}
    rest delete interface  s1  ${delivery_2}
    cli delete portchannel  s1  ${s1_10g_number_1}
    cli delete portchannel  s1  ${s1_10g_number_2}
    rest delete switch  s1
    base suite teardown