*Settings
Documentation           Corsair Tunnelling Test Suite
Suite Setup             corsair suite setup
Suite Teardown          corsair suite teardown
Test Setup              corsair test setup
Test Teardown           corsair test teardown 
Force Tags              BigTap  corsair-400  tunnel  Dell-S6000
Library                 keywords/BsnCommon.py
Library                 keywords/AppController.py
Library                 keywords/BigTap.py
Library                 keywords/SwitchLight.py
Library                 keywords/Ixia.py
Library                 keywords/ThirdParty.py
Library                 Collections.py
Library                 OperatingSystem.py
Library                 String.py

* Variable
${switch1_alias}                            APP-S6000-1  #Alias for switch 1
## Switch 1: APP-AS5710-1
${tunnel_sw1_name}                          tunnel1                 #Tunnel Name
${tunnel_sw1_parent_intf}                   ethernet25              #Tunnel Parent Interface
${tunnel_sw1_sip}                           192.168.80.1            #Tunnel Source IP
${tunnel_sw1_dip}                           192.168.80.2            #Tunnel Destination IP
${tunnel_sw1_gip}                           192.168.80.2            #Tunnel Gateway IP
${tunnel_sw1_mask}                          255.255.255.0           #Tunnel Subnet Mask
${tunnel_sw1_loopback}                      ethernet24              #Tunnel Loopback Interface
${tunnel_sw1_vpnkey}                        1975                    #Tunnel VPN Key
## Switch 2: APP-AS5710-2
${arista1_sw1_tunnel_name}                  tunnel1
${arista1_sw1_tunnel_intf1}                 Ethernet52/1
${arista1_sw1_tunnel_ip}                    192.168.80.2  
${arista1_sw1_tunnel_mask}                  255.255.255.0

*Test Case

TC001: Verify bidirectional tunnel interface
    ${verify_tun_sw1}=  rest verify tunnel status  s1  ${tunnel_sw1_name}  tunnel_number=376  runtime_state=up  parent_interface=${tunnel_sw1_parent_intf}  tunnel_direction=bidir  sip=${tunnel_sw1_sip}  dip=${tunnel_sw1_dip}  mask=${tunnel_sw1_mask}  gip=${tunnel_sw1_gip}      
    Should be true  ${verify_tun_sw1}
    [Tags]  full  feature

TC002: BiDirectional Tunnel: Verify CLI "show switch-interface <switch_alias> tunnel1" on controller
    cli  node=master  cmd=show switch-interface ${switch1_alias} ${tunnel_sw1_name}
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    @{lines} =  Split To Lines  ${content1}
    Remove From List  ${lines}  0
    Remove From List  ${lines}  -1
    ${tunnel_dict}=  Create Dictionary  tunnel  show commands
    :FOR    ${ELEMENT}    IN    @{lines}
    \    Log  ${ELEMENT}
    \    @{cliOp}=  Split String  ${ELEMENT}  :
    \    Set To Dictionary  ${tunnel_dict}  ${cliOp[0].strip()}  ${cliOp[1].strip()}
    Should Be Equal As Strings  ${tunnel_dict['IF Name']}  ${tunnel_sw1_name}
    Should Be Equal As Strings  ${tunnel_dict['direction']}  bidirectional
    Should Be Equal As Strings  ${tunnel_dict['Loopback Interface']}  ${tunnel_sw1_loopback}
    Should Be Equal As Strings  ${tunnel_dict['vpn-key']}  1024
    Should Be Equal As Strings  ${tunnel_dict['runtime-state']}  up
    Should Be Equal As Strings  ${tunnel_dict['source-ip']}  ${tunnel_sw1_sip}
    Should Be Equal As Strings  ${tunnel_dict['Parent Interface']}  ${tunnel_sw1_parent_intf}
    Should Be Equal As Strings  ${tunnel_dict['ip-mask']}  ${tunnel_sw1_mask}
    Should Be Equal As Strings  ${tunnel_dict['State']}  up
    Should Be Equal As Strings  ${tunnel_dict['destination-ip']}  ${tunnel_sw1_dip}
    Should Be Equal As Strings  ${tunnel_dict['encap-type']}  gre
    Should Be Equal As Strings  ${tunnel_dict['type']}  tunnel
    Should Be Equal As Strings  ${tunnel_dict['gateway-ip']}  ${tunnel_sw1_gip}
    Should Be Equal As Strings  ${tunnel_dict['OF Port']}  376
    [Tags]  full  feature

TC003: BiDirectional Tunnel: Verify CLI "show switch <switch_alias> interfaces tunnel1" on controller
    cli  node=master  cmd=show switch ${switch1_alias} interfaces ${tunnel_sw1_name}
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    Should Contain  ${content1}  ${tunnel_sw1_name}
    Should Contain  ${content1}  376
    Should Contain  ${content1}  up
    Should Contain  ${content1}  ${switch1_alias}
    [Tags]  full  feature

TC004: BiDirectional Tunnel: Verify CLI "show switch <switch_alias> interfaces tunnel1 details" on controller
    cli  node=master  cmd=show switch ${switch1_alias} interfaces ${tunnel_sw1_name} details
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    Should Contain  ${content1}  ${tunnel_sw1_name}
    Should Contain  ${content1}  376
    Should Contain  ${content1}  up
    Should Contain  ${content1}  ${switch1_alias}
    [Tags]  full  feature

TC005: BiDirectional Tunnel: Verify CLI "show interface" on switch shows tunnel status
    enable  node=s1  cmd=clear interface statistics
    sleep  2
    enable  node=s1  cmd=show interface
    ${content1}=  cli_content  node=s1
    Should Contain  ${content1}  ethernet
    verify openflow controller  s1  c1
    verify openflow controller  s1  c2
    ${tunnel} =  Get Line    ${content1}  -2
    Should Contain  ${tunnel}  ${tunnel_sw1_name}
    [Tags]  full  feature

TC006: BiDirectional Tunnel: Verify CLI "show tunnel 1" on switch shows tunnel status
    cli  node=s1  cmd=show tunnel 1
    ${content1}=  cli_content  node=s1
    Should Not Contain  ${content1}  Error
    verify openflow controller  s1  c1
    verify openflow controller  s1  c2
    ${tunnel_1} =  Get Line  ${content1}  2
    Should Contain  ${tunnel_1}  376
    Should Contain  ${tunnel_1}  25
    Should Contain  ${tunnel_1}  24
    ${tunnel_2} =  Get Line  ${content1}  4
    @{tunnel_2a}=  Split String  ${tunnel_2}
    ${tunnel_2b}=  Convert to Integer  ${tunnel_2a[1]}
    Should be equal as integers  ${tunnel_2b}  1024
    ${tunnel_3} =  Get Line  ${content1}  7
    @{tunnel_3a}=  Split String  ${tunnel_3}
    Should be equal as Strings  ${tunnel_3a[1]}  ${tunnel_sw1_sip}
    ${tunnel_4} =  Get Line  ${content1}  8
    @{tunnel_4a}=  Split String  ${tunnel_4}
    Should be equal as Strings  ${tunnel_4a[1]}  ${tunnel_sw1_dip}
    [Tags]  full  feature

TC007: Transmit-only Tunnel: Verify tunnel state via rest
    ${verify_add_tun_sw1}=  rest add tunnel interface  s1  ${tunnel_sw1_name}  loopback=${tunnel_sw1_loopback}  pinterface=${tunnel_sw1_parent_intf}  tdirection=tx  sip=${tunnel_sw1_sip}  dip=${tunnel_sw1_dip}  mask=${tunnel_sw1_mask}  gip=${tunnel_sw1_gip}  vpnkey=${tunnel_sw1_vpnkey}
    Should be true  ${verify_add_tun_sw1}
    ${verify_tun_sw1}=  rest verify tunnel status  s1  ${tunnel_sw1_name}  tunnel_number=376  runtime_state=up  parent_interface=${tunnel_sw1_parent_intf}  tunnel_direction=tx  sip=${tunnel_sw1_sip}  dip=${tunnel_sw1_dip}  mask=${tunnel_sw1_mask}  gip=${tunnel_sw1_gip}      
    Should be true  ${verify_tun_sw1}
    [Tags]  full  feature

TC008: Transmit-only Tunnel: Verify CLI "show switch-interface <switch_alias> tunnel1" on controller
    cli  node=master  cmd=show switch-interface ${switch1_alias} ${tunnel_sw1_name}
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    @{lines} =  Split To Lines  ${content1}
    Remove From List  ${lines}  0
    Remove From List  ${lines}  -1
    ${tunnel_dict}=  Create Dictionary  tunnel  show commands
    :FOR    ${ELEMENT}    IN    @{lines}
    \    Log  ${ELEMENT}
    \    @{cliOp}=  Split String  ${ELEMENT}  :
    \    Set To Dictionary  ${tunnel_dict}  ${cliOp[0].strip()}  ${cliOp[1].strip()}
    Should Be Equal As Strings  ${tunnel_dict['IF Name']}  ${tunnel_sw1_name}
    Should Be Equal As Strings  ${tunnel_dict['direction']}  transmit-only
    Should Be Equal As Strings  ${tunnel_dict['Loopback Interface']}  ${tunnel_sw1_loopback}
    Should Be Equal As Strings  ${tunnel_dict['vpn-key']}  1024
    Should Be Equal As Strings  ${tunnel_dict['runtime-state']}  up
    Should Be Equal As Strings  ${tunnel_dict['source-ip']}  ${tunnel_sw1_sip}
    Should Be Equal As Strings  ${tunnel_dict['Parent Interface']}  ${tunnel_sw1_parent_intf}
    Should Be Equal As Strings  ${tunnel_dict['ip-mask']}  ${tunnel_sw1_mask}
    Should Be Equal As Strings  ${tunnel_dict['State']}  up
    Should Be Equal As Strings  ${tunnel_dict['destination-ip']}  ${tunnel_sw1_dip}
    Should Be Equal As Strings  ${tunnel_dict['encap-type']}  gre
    Should Be Equal As Strings  ${tunnel_dict['type']}  tunnel
    Should Be Equal As Strings  ${tunnel_dict['gateway-ip']}  ${tunnel_sw1_gip}
    Should Be Equal As Strings  ${tunnel_dict['OF Port']}  376
    [Tags]  full  feature

TC009: Transmit-only Tunnel: Verify CLI "show switch <switch_alias> interfaces tunnel1" on controller
    cli  node=master  cmd=show switch ${switch1_alias} interfaces ${tunnel_sw1_name}
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    Should Contain  ${content1}  ${tunnel_sw1_name}
    Should Contain  ${content1}  376
    Should Contain  ${content1}  up
    Should Contain  ${content1}  ${switch1_alias}
    [Tags]  full  feature

TC010: Transmit-only Tunnel: Verify CLI "show switch <switch_alias> interfaces tunnel1 details" on controller
    cli  node=master  cmd=show switch ${switch1_alias} interfaces ${tunnel_sw1_name} details
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    Should Contain  ${content1}  ${tunnel_sw1_name}
    Should Contain  ${content1}  376
    Should Contain  ${content1}  up
    Should Contain  ${content1}  ${switch1_alias}
    [Tags]  full  feature

TC011: Transmit-only Tunnel: Verify CLI "show interface" on switch shows tunnel status
    enable  node=s1  cmd=clear interface statistics
    sleep  2
    enable  node=s1  cmd=show interface
    ${content1}=  cli_content  node=s1
    Should Contain  ${content1}  ethernet
    verify openflow controller  s1  c1
    verify openflow controller  s1  c2
    ${tunnel} =  Get Line    ${content1}  -2
    Should Contain  ${tunnel}  ${tunnel_sw1_name}
    [Tags]  full  feature

TC012: Transmit-only Tunnel: Verify CLI "show tunnel 1" on switch shows tunnel status
    cli  node=s1  cmd=show tunnel 1
    ${content1}=  cli_content  node=s1
    Should Not Contain  ${content1}  Error
    verify openflow controller  s1  c1
    verify openflow controller  s1  c2
    ${tunnel_1} =  Get Line  ${content1}  2
    Should Contain  ${tunnel_1}  376                #OF Port:    376
    Should Contain  ${tunnel_1}  25                  #Parent:    5
    Should Contain  ${tunnel_1}  24                 #Loopback:   51
    ${tunnel_2} =  Get Line  ${content1}  4
    @{tunnel_2a}=  Split String  ${tunnel_2}
    ${tunnel_2b}=  Convert to Integer  ${tunnel_2a[1]}
    Should be equal as integers  ${tunnel_2b}  1024
    ${tunnel_3} =  Get Line  ${content1}  7
    @{tunnel_3a}=  Split String  ${tunnel_3}
    Should be equal as Strings  ${tunnel_3a[1]}  ${tunnel_sw1_sip}
    ${tunnel_4} =  Get Line  ${content1}  8
    @{tunnel_4a}=  Split String  ${tunnel_4}
    Should be equal as Strings  ${tunnel_4a[1]}  ${tunnel_sw1_dip}
    [Tags]  full  feature

TC013: Receive-only Tunnel: Verify tunnel state via rest
    ${verify_add_tun_sw1}=  rest add tunnel interface  s1  ${tunnel_sw1_name}  pinterface=${tunnel_sw1_parent_intf}  tdirection=rx  sip=${tunnel_sw1_sip}  dip=${tunnel_sw1_dip}  mask=${tunnel_sw1_mask}  gip=${tunnel_sw1_gip}  vpnkey=${tunnel_sw1_vpnkey}
    Should be true  ${verify_add_tun_sw1}
    ${verify_tun_sw1}=  rest verify tunnel status  s1  ${tunnel_sw1_name}  tunnel_number=376  runtime_state=up  parent_interface=${tunnel_sw1_parent_intf}  tunnel_direction=rx  sip=${tunnel_sw1_sip}  dip=${tunnel_sw1_dip}  mask=${tunnel_sw1_mask}  gip=${tunnel_sw1_gip}      
    Should be true  ${verify_tun_sw1}
    [Tags]  full  feature

TC014: Receive-only Tunnel: Verify CLI "show switch-interface <switch_alias> tunnel1" on controller
    cli  node=master  cmd=show switch-interface ${switch1_alias} ${tunnel_sw1_name}
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    @{lines} =  Split To Lines  ${content1}
    Remove From List  ${lines}  0
    Remove From List  ${lines}  -1
    ${tunnel_dict}=  Create Dictionary  tunnel  show commands
    :FOR    ${ELEMENT}    IN    @{lines}
    \    Log  ${ELEMENT}
    \    @{cliOp}=  Split String  ${ELEMENT}  :
    \    Set To Dictionary  ${tunnel_dict}  ${cliOp[0].strip()}  ${cliOp[1].strip()}
    Should Be Equal As Strings  ${tunnel_dict['IF Name']}  ${tunnel_sw1_name}
    Should Be Equal As Strings  ${tunnel_dict['direction']}  receive-only
    Should Be Equal As Strings  ${tunnel_dict['vpn-key']}  1024
    Should Be Equal As Strings  ${tunnel_dict['runtime-state']}  up
    Should Be Equal As Strings  ${tunnel_dict['source-ip']}  ${tunnel_sw1_sip}
    Should Be Equal As Strings  ${tunnel_dict['Parent Interface']}  ${tunnel_sw1_parent_intf}
    Should Be Equal As Strings  ${tunnel_dict['ip-mask']}  ${tunnel_sw1_mask}
    Should Be Equal As Strings  ${tunnel_dict['State']}  up
    Should Be Equal As Strings  ${tunnel_dict['destination-ip']}  ${tunnel_sw1_dip}
    Should Be Equal As Strings  ${tunnel_dict['encap-type']}  gre
    Should Be Equal As Strings  ${tunnel_dict['type']}  tunnel
    Should Be Equal As Strings  ${tunnel_dict['gateway-ip']}  ${tunnel_sw1_gip}
    Should Be Equal As Strings  ${tunnel_dict['OF Port']}  376
    [Tags]  full  feature
    
TC015: Receive-only Tunnel: Verify CLI "show switch <switch_alias> interfaces tunnel1" on controller
    cli  node=master  cmd=show switch ${switch1_alias} interfaces ${tunnel_sw1_name}
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    Should Contain  ${content1}  ${tunnel_sw1_name}
    Should Contain  ${content1}  376
    Should Contain  ${content1}  up
    Should Contain  ${content1}  ${switch1_alias}
    [Tags]  full  feature

TC016: Receive-only Tunnel: Verify CLI "show switch <switch_alias> interfaces tunnel1 details" on controller
    cli  node=master  cmd=show switch ${switch1_alias} interfaces ${tunnel_sw1_name} details
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    Should Contain  ${content1}  ${tunnel_sw1_name}
    Should Contain  ${content1}  376
    Should Contain  ${content1}  up
    Should Contain  ${content1}  ${switch1_alias}
    [Tags]  full  feature

TC017: Receive-only Tunnel: Verify CLI "show interface" on switch shows tunnel status
    enable  node=s1  cmd=clear interface statistics
    sleep  2
    enable  node=s1  cmd=show interface
    ${content1}=  cli_content  node=s1
    Should Contain  ${content1}  ethernet
    verify openflow controller  s1  c1
    verify openflow controller  s1  c2
    ${tunnel} =  Get Line    ${content1}  -2
    Should Contain  ${tunnel}  ${tunnel_sw1_name}
    [Tags]  full  feature

TC018: Receive-only Tunnel: Verify CLI "show tunnel 1" on switch shows tunnel status
    cli  node=s1  cmd=show tunnel 1
    ${content1}=  cli_content  node=s1
    Should Not Contain  ${content1}  Error
    verify openflow controller  s1  c1
    verify openflow controller  s1  c2
    ${tunnel_1} =  Get Line  ${content1}  2
    Should Contain  ${tunnel_1}  376                #OF Port:    376
    Should Contain  ${tunnel_1}  25                  #Parent:    5
    ${tunnel_2} =  Get Line  ${content1}  4
    @{tunnel_2a}=  Split String  ${tunnel_2}
    ${tunnel_2b}=  Convert to Integer  ${tunnel_2a[1]}
    Should be equal as integers  ${tunnel_2b}  1024
    ${tunnel_3} =  Get Line  ${content1}  7
    @{tunnel_3a}=  Split String  ${tunnel_3}
    Should be equal as Strings  ${tunnel_3a[1]}  ${tunnel_sw1_sip}
    ${tunnel_4} =  Get Line  ${content1}  8
    @{tunnel_4a}=  Split String  ${tunnel_4}
    Should be equal as Strings  ${tunnel_4a[1]}  ${tunnel_sw1_dip}
    [Tags]  full  feature

* Keyword
arista tunnel setup   [Arguments]  ${arista_tunnel_interface}  ${tunnel_address}  ${tunnel_mask}
    config  node=s2  cmd=ip routing
    ${content1}=  cli_content  node=s2
    Should Not Contain  ${content1}  Error
    config  node=s2  cmd=interface ${arista_tunnel_interface}
    ${content2}=  cli_content  node=s2
    Should Not Contain  ${content2}  Error
    config  node=s2  cmd=speed forced 40gfull
    ${content2}=  cli_content  node=s2
    Should Not Contain  ${content2}  Error
    config  node=s2  cmd=no switchport
    ${content3}=  cli_content  node=s2
    Should Not Contain  ${content3}  Error
    config  node=s2  cmd=ip address ${tunnel_address} ${tunnel_mask}
    ${content4}=  cli_content  node=s2
    Should Not Contain  ${content4}  Error
    config  node=s2  cmd=exit

arista tunnel teardown   [Arguments]  ${arista_tunnel_interface}  ${tunnel_address}  ${tunnel_mask}
    config  node=s2  cmd=interface ${arista_tunnel_interface}
    ${content2}=  cli_content  node=s2
    Should Not Contain  ${content2}  Error
    config  node=s2  cmd=no speed forced 40gfull
    ${content2}=  cli_content  node=s2
    Should Not Contain  ${content2}  Error
    config  node=s2  cmd=no ip address ${tunnel_address} ${tunnel_mask}
    ${content4}=  cli_content  node=s2
    Should Not Contain  ${content4}  Error
    config  node=s2  cmd=exit

corsair suite setup
    base suite setup
    rest enable feature  tunneling
    rest add switch alias  s1  ${switch1_alias}
    #CRC packets to be dropped
    bash  s1  ofad-ctl crc enable
    #Setup tunnels across  Accton AS5710 (app-ac5710-1)
    #### CORE IS TUNNEL
    arista tunnel setup  ${arista1_sw1_tunnel_intf1}  ${arista1_sw1_tunnel_ip}  ${arista1_sw1_tunnel_mask}
    ${verify_add_tun_sw1}=  rest add tunnel interface  s1  ${tunnel_sw1_name}  loopback=${tunnel_sw1_loopback}  pinterface=${tunnel_sw1_parent_intf}  tdirection=bidir  sip=${tunnel_sw1_sip}  dip=${tunnel_sw1_dip}  mask=${tunnel_sw1_mask}  gip=${tunnel_sw1_gip}  vpnkey=${tunnel_sw1_vpnkey}
    Should be true  ${verify_add_tun_sw1}          
    Sleep  5     

corsair test setup
    ${result}=  write version to file
    Should be true  ${result}
    ${result1}=  start syslog monitor
    Should be true  ${result1}

verify openflow controller  [Arguments]  ${switch}  ${controller}
    cli  node=${switch}  cmd=show controller
    ${content1}=  cli_content  node=${switch}
    Should Not Contain  ${content1}  Error
    ${ret_value_1}=  cli verify controller  ${switch}  ${controller}
    Should Be True  ${ret_value_1}
    
corsair test teardown
    ${result1}=  stop syslog monitor 
    Should be true  ${result1}
    
tunnel teardown
    ${verify_del_tun_sw1}=  rest delete tunnel interface  node=s1  tunnel_name=${tunnel_sw1_name}  
    Should be true  ${verify_del_tun_sw1}    

corsair suite teardown
    Run Keyword and Ignore Error  tunnel teardown
    Run Keyword and Ignore Error  rest delete switch alias  s1
    Run Keyword and Ignore Error  rest delete switch  s1
    Run Keyword and Ignore Error  rest disable feature  tunneling
    arista tunnel teardown  ${arista1_sw1_tunnel_intf1}  ${arista1_sw1_tunnel_ip}  ${arista1_sw1_tunnel_mask}
    Run Keyword and Ignore Error  base suite teardown  