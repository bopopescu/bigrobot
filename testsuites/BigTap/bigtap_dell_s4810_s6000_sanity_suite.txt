*Settings
Documentation  Dell-S4810-S6000 Test Suite
Suite Setup  dell suite setup
Suite Teardown   dell suite teardown
Test Setup   traffic test setup
Test Teardown  traffic teardown 
Force Tags   platform Sanity
Library  keywords/BsnCommon.py
Library  keywords/AppController.py
Library  keywords/BigTap.py
Library  keywords/SwitchLight.py
Library  keywords/Ixia.py
Library  keywords/ThirdParty.py

* Variable
${policy_name_1}                    policy_dell_traffic_s1s3
${policy_name_2}                    policy_dell_traffic_s3s1

${s1_alias}                         app-rs4810-1
${filter_s1_1}                      ethernet1  
${filter_nick_s1_1}                 ixia-1-4
${filter_s1_1_snmp_oid}             1.3.6.1.2.1.2.2.1.11.1001  
${delivery_s1_1}                    ethernet2  
${delivery_nick_s1_1}               ixia-1-3
${delivery_s1_1_snmp_oid}           1.3.6.1.2.1.2.2.1.11.1002  
${pre_service_s1}                   ethernet47
${pre_service_nick_s1}              pre-service-s1
${post_service_s1}                  ethernet48
${post_service_nick_s1}             post-service-s1
${service_name_1}                   service-s1
${core_interface_s1s2_1}            ethernet51
${core_s1_s2_1_snmp_oid}            1.3.6.1.2.1.2.2.1.11.1051
${core_interface_s1s2_2}            ethernet52
${core_s1_s2_2_snmp_oid}            1.3.6.1.2.1.2.2.1.11.1052
${pc_members_s1s2}                  51,52
${pc_number_s1s2}                   1
${pc_name_s1s2}                     port-channel1
${pc_s1s2_members}                  ethernet51 ethernet52

${s2_alias}                         app-rs6000-1
${pre_service_s2}                   ethernet11
${pre_service_nick_s2}              pre-service-s2
${post_service_s2}                  ethernet12
${post_service_nick_s2}             post-service-s2
${service_name_2}                   service-s2
${core_interface_s2s1_1}            ethernet32
${core_s2_s1_1_snmp_oid}            1.3.6.1.2.1.2.2.1.11.1032
${core_interface_s2s1_2}            ethernet24
${core_s2_s1_2_snmp_oid}            1.3.6.1.2.1.2.2.1.11.1024
${core_interface_s2s3_1}            ethernet10
${core_s2_s3_1_snmp_oid}            1.3.6.1.2.1.2.2.1.11.1010
${core_interface_s2s3_2}            ethernet9
${core_s2_s3_2_snmp_oid}            1.3.6.1.2.1.2.2.1.11.1009
${pc_members_s2s1}                  24,32
${pc_number_s2s1}                   1
${pc_name_s2s1}                     port-channel1
${pc_s2s1_members}                  ethernet24 ethernet32
${pc_members_s2s3}                  9,10
${pc_number_s2s3}                   2


${s3_alias}                         app-s4810-1
${filter_s3_1}                      ethernet1  
${filter_nick_s3_1}                 ixia-1-23
${delivery_s3_1}                    ethernet2  
${delivery_nick_s3_1}               ixia-1-21
${delivery_s3_1_snmp_oid}           1.3.6.1.2.1.2.2.1.11.1002  
${pre_service_s3}                   ethernet47
${pre_service_nick_s3}              pre-service-s3
${post_service_s3}                  ethernet48
${post_service_nick_s3}             post-service-s3
${service_name_3}                   service-s3
${core_interface_s3s2_1}            ethernet51
${core_s3_s2_1_snmp_oid}            1.3.6.1.2.1.2.2.1.11.1051
${core_interface_s3s2_2}            ethernet52
${core_s3_s2_2_snmp_oid}            1.3.6.1.2.1.2.2.1.11.1052
${pc_members_s3s2}                  51,52
${pc_number_s3s2}                   2

${arista_ixia_port}                 Ethernet1
${arista_s600_port}                 Ethernet52/1
${arista_vlan_id}                   1020
${arista_vlan_name}                 V1020
${arista_s6000_ip_address}          192.168.120.2
${arista_s6000_ip_netmask}          24
${arista_ixia_ip_address}           192.168.110.1
${ixia_arista_ip_address}           192.168.110.2
${ixia_fabric_ip_address}           192.168.130.4

${tunnel_sw2_name_delivery}            tunnel1                 #Tunnel Name
${tunnel_sw2_parent_intf_delivery}     ethernet26              #Tunnel Parent Interface
${tunnel_sw2_sip_delivery}             192.168.120.1           #Tunnel Source IP
${tunnel_sw2_dip_delivery}             192.168.120.2           #Tunnel Destination IP
${tunnel_sw2_gip_delivery}             192.168.120.2           #Tunnel Gateway IP
${tunnel_sw2_mask_delivery}            255.255.255.0           #Tunnel Subnet Mask
${tunnel_sw2_alias}                    s6000_tunnel            #Tunnel Name when used as filter interface
${tunnel_sw2_loopback_delivery}        ethernet4               #Tunnel Loopback Interface

${snmp_ccommunity_1}                ro public
${snmp_community_1}                 public
${snmp_contact_1}                   snmphost@bigswitch.com
${snmp_location_1}                  SANTA-CLARA
${snmp_trap_svr_1}                  10.9.18.3
${snmp_trap_svr_2}                  10.9.18.2

*Test Case

### L2 Traffic
#### L2 Traffic: Frame Size 64 Bytes
TC1: Verify L2 traffic: frame size 64 bytes
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  ${policy_name_2}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2}    
    ${stream_1}=  L2 add  flow=a->d  frame_rate=10000  frame_size=64  no_arp=True  name=a_d_flow
    ${stream_2}=  L2 add  flow=c->b  frame_rate=10000  frame_size=64  no_arp=True  name=c_b_flow    
    clear stats    
    start traffic     
    sleep  10
    verify results  a  d  transmitted_frame_rate  received_valid_frame_rate    
    verify results  c  b  transmitted_frame_rate  received_valid_frame_rate        
    stop traffic      
    [Tags]  l2  fs64 
     
TC2: Verify L2 traffic: frame size 128 bytes
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  ${policy_name_2}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2}      
    ${stream_1}=  L2 add  flow=a->d  frame_rate=10000  frame_size=128  no_arp=True  name=a_d_flow
    ${stream_2}=  L2 add  flow=c->b  frame_rate=10000  frame_size=128  no_arp=True  name=c_b_flow    
    clear stats    
    start traffic     
    sleep  10
    verify results  a  d  transmitted_frame_rate  received_valid_frame_rate    
    verify results  c  b  transmitted_frame_rate  received_valid_frame_rate        
    stop traffic      
    [Tags]  l2  fs128

TC3: Verify L2 traffic: frame size 256 bytes
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  ${policy_name_2}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2}    
    ${stream_1}=  L2 add  flow=a->d  frame_rate=10000  frame_size=256  no_arp=True  name=a_d_flow
    ${stream_2}=  L2 add  flow=c->b  frame_rate=10000  frame_size=256  no_arp=True  name=c_b_flow    
    clear stats    
    start traffic     
    sleep  10
    verify results  a  d  transmitted_frame_rate  received_valid_frame_rate    
    verify results  c  b  transmitted_frame_rate  received_valid_frame_rate        
    stop traffic      
    [Tags]  l2  fs256 
     
TC4: Verify L2 traffic: frame size 512 bytes
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  ${policy_name_2}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2}      
    ${stream_1}=  L2 add  flow=a->d  frame_rate=10000  frame_size=512  no_arp=True  name=a_d_flow
    ${stream_2}=  L2 add  flow=c->b  frame_rate=10000  frame_size=512  no_arp=True  name=c_b_flow    
    clear stats    
    start traffic     
    sleep  10
    verify results  a  d  transmitted_frame_rate  received_valid_frame_rate    
    verify results  c  b  transmitted_frame_rate  received_valid_frame_rate        
    stop traffic      
    [Tags]  l2  fs512    

TC5: Verify L2 traffic: frame size 1024 bytes
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  ${policy_name_2}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2}    
    ${stream_1}=  L2 add  flow=a->d  frame_rate=10000  frame_size=1024  no_arp=True  name=a_d_flow
    ${stream_2}=  L2 add  flow=c->b  frame_rate=10000  frame_size=1024  no_arp=True  name=c_b_flow    
    clear stats    
    start traffic     
    sleep  10
    verify results  a  d  transmitted_frame_rate  received_valid_frame_rate    
    verify results  c  b  transmitted_frame_rate  received_valid_frame_rate        
    stop traffic      
    [Tags]  l2  fs1024 
     
TC6: Verify L2 traffic: frame size 1280 bytes
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  ${policy_name_2}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2}      
    ${stream_1}=  L2 add  flow=a->d  frame_rate=10000  frame_size=1280  no_arp=True  name=a_d_flow
    ${stream_2}=  L2 add  flow=c->b  frame_rate=10000  frame_size=1280  no_arp=True  name=c_b_flow    
    clear stats    
    start traffic     
    sleep  10
    verify results  a  d  transmitted_frame_rate  received_valid_frame_rate    
    verify results  c  b  transmitted_frame_rate  received_valid_frame_rate        
    stop traffic      
    [Tags]  l2  fs1280

TC7: Verify L2 traffic: frame size 1518 bytes
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  ${policy_name_2}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2}    
    ${stream_1}=  L2 add  flow=a->d  frame_rate=10000  frame_size=1518  no_arp=True  name=a_d_flow
    ${stream_2}=  L2 add  flow=c->b  frame_rate=10000  frame_size=1518  no_arp=True  name=c_b_flow    
    clear stats    
    start traffic     
    sleep  10
    verify results  a  d  transmitted_frame_rate  received_valid_frame_rate    
    verify results  c  b  transmitted_frame_rate  received_valid_frame_rate        
    stop traffic      
    [Tags]  l2  fs1518 
     
TC8: Verify L2 traffic: frame size 9216 bytes
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  ${policy_name_2}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2}      
    ${stream_1}=  L2 add  flow=a->d  frame_rate=10000  frame_size=9216  no_arp=True  name=a_d_flow
    ${stream_2}=  L2 add  flow=c->b  frame_rate=10000  frame_size=9216  no_arp=True  name=c_b_flow    
    clear stats    
    start traffic     
    sleep  10
    verify results  a  d  transmitted_frame_rate  received_frame_rate    
    verify results  c  b  transmitted_frame_rate  received_frame_rate       
    stop traffic      
    [Tags]  l2  fs9216  jumbo

TC9: Verify L2 vlan tagged traffic: frame size 1518 bytes
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  ${policy_name_2}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2}      
    ${stream_1}=  L2 add  flow=a->d  frame_rate=10000  frame_size=1518  ethertype=8100  vlan_id=2048  no_arp=True  name=a_d_flow
    ${stream_2}=  L2 add  flow=c->b  frame_rate=10000  frame_size=1518  ethertype=8100  vlan_id=1024  no_arp=True  name=c_b_flow    
    clear stats    
    start traffic     
    sleep  10
    verify results  a  d  transmitted_frame_rate  received_frame_rate    
    verify results  c  b  transmitted_frame_rate  received_frame_rate       
    stop traffic      
    [Tags]  l2  vlantagged 

###  L2 Traffic with CRC Errors: Frame Size 1518 Bytes

TC10: Verify L2 Traffic with CRC Errors: frame size 1518 bytes
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  ${policy_name_2}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2}      
    ${stream_1}=  L2 add  flow=a->d  frame_rate=10000  frame_size=1518  crc=True  no_arp=True  name=a_d_flow
    ${stream_2}=  L2 add  flow=c->b  frame_rate=10000  frame_size=1518  crc=True  no_arp=True  name=c_b_flow    
    clear stats    
    start traffic     
    sleep  10
    verify results  a  d  transmitted_frame_rate  received_frame_rate    
    verify results  c  b  transmitted_frame_rate  received_frame_rate       
    stop traffic      
    [Tags]  l2  s4810  l2crc  

### L2 Traffic :  Spanning Tree Protocol (for bridges) IEEE 802.1D
TC11: Verify L2 Traffic: Spanning Tree Protocol (for bridges) IEEE 802.1D
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  ${policy_name_2}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2}      
    ${stream_1}=  L2 add  flow=a->d  frame_rate=10000  frame_size=1518  ethertype=0802  src_mac=5C:16:C7:13:14:01  dst_mac=01:80:c2:00:00:00    no_arp=True  name=a_d_flow
    ${stream_2}=  L2 add  flow=c->b  frame_rate=10000  frame_size=1518  ethertype=0802  src_mac=5C:16:C7:13:14:02  dst_mac=01:80:c2:00:00:00    no_arp=True  name=c_b_flow    
    clear stats    
    start traffic     
    sleep  10
    verify results  a  d  transmitted_frame_rate  received_frame_rate    
    verify results  c  b  transmitted_frame_rate  received_frame_rate       
    stop traffic      
    [Tags]  l2  s4810  l2stp  
    
### L2 Traffic :  LLDP with ethernet ethertype
TC12: Verify L2 Traffic: LLDP with ethernet ethertype
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  ${policy_name_2}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2}      
    ${stream_1}=  L2 add  flow=a->d  frame_rate=10000  frame_size=1518  ethertype=0800  src_mac=5C:16:C7:13:14:01  dst_mac=01:80:c2:00:00:0E  no_arp=True  name=a_d_flow
    ${stream_2}=  L2 add  flow=c->b  frame_rate=10000  frame_size=1518  ethertype=0800  src_mac=5C:16:C7:13:14:02  dst_mac=01:80:c2:00:00:0E  no_arp=True  name=c_b_flow    
    clear stats    
    start traffic     
    sleep  10
    verify results  a  d  transmitted_frame_rate  received_frame_rate    
    verify results  c  b  transmitted_frame_rate  received_frame_rate       
    stop traffic      
    [Tags]  l2  s4810  lldp 

### L3 Traffic    
#### L3 IPv4 Traffic : Frame Size 68 Bytes
        
TC13: Verify L3 IPv4 traffic: frame size 68 bytes
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  ${policy_name_2}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2} 
    ${stream_1}=  L3 add  flow=a->d  frame_rate=10000  frame_size=68  
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=100.1.1.1  dst_ip=100.1.1.2  name=a_d_flow
    ${stream_2}=  L3 add  flow=c->b  frame_rate=10000  frame_size=68  
    ...     src_mac=00:01:02:03:04:01  dst_mac=00:01:02:03:04:02  no_arp=True
    ...     src_ip=101.1.1.1  dst_ip=101.1.1.2  name=c_b_flow    
    clear stats  
    start traffic
    sleep  10
    verify results  a  d  transmitted_frame_rate  received_valid_frame_rate        
    verify results  c  b  transmitted_frame_rate  received_valid_frame_rate            
    stop traffic
    [Tags]  l3  fs64  ipv4
    
#### L3 IPv6 Traffic : Frame Size 68 Bytes
        
TC14: Verify L3 IPv6 traffic: frame size 68 bytes
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  ${policy_name_2}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2} 
    ${stream_1}=  L3 add  flow=a->d  frame_rate=10000  frame_size=68  
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=2001:0:0:0:0:0:0:1  dst_ip=2001:0:0:0:0:0:0:2  ethertype=86dd  name=a_d_flow
    ${stream_2}=  L3 add  flow=c->b  frame_rate=10000  frame_size=68  
    ...     src_mac=00:01:02:03:04:01  dst_mac=00:01:02:03:04:02  no_arp=True
    ...     src_ip=2002:0:0:0:0:0:0:1  dst_ip=2002:0:0:0:0:0:0:2  ethertype=86dd  name=c_b_flow    
    clear stats  
    start traffic
    sleep  10
    verify results  a  d  transmitted_frame_rate  received_valid_frame_rate        
    verify results  c  b  transmitted_frame_rate  received_valid_frame_rate            
    stop traffic
    [Tags]  l3  fs64  ipv6

#### L3 IPv4 Traffic : Frame Size 128 Bytes
        
TC15: Verify L3 IPv4 traffic: frame size 128 bytes
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  ${policy_name_2}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2} 
    ${stream_1}=  L3 add  flow=a->d  frame_rate=10000  frame_size=128  
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=100.1.1.1  dst_ip=100.1.1.2  name=a_d_flow
    ${stream_2}=  L3 add  flow=c->b  frame_rate=10000  frame_size=128  
    ...     src_mac=00:01:02:03:04:01  dst_mac=00:01:02:03:04:02  no_arp=True
    ...     src_ip=101.1.1.1  dst_ip=101.1.1.2  name=c_b_flow    
    clear stats  
    start traffic
    sleep  10
    verify results  a  d  transmitted_frame_rate  received_valid_frame_rate        
    verify results  c  b  transmitted_frame_rate  received_valid_frame_rate            
    stop traffic
    [Tags]  l3  fs128  ipv4
    
#### L3 IPv6 Traffic : Frame Size 128 Bytes
        
TC16: Verify L3 IPv6 traffic: frame size 128 bytes
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  ${policy_name_2}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2} 
    ${stream_1}=  L3 add  flow=a->d  frame_rate=10000  frame_size=128  
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=2001:0:0:0:0:0:0:1  dst_ip=2001:0:0:0:0:0:0:2  ethertype=86dd  name=a_d_flow
    ${stream_2}=  L3 add  flow=c->b  frame_rate=10000  frame_size=128  
    ...     src_mac=00:01:02:03:04:01  dst_mac=00:01:02:03:04:02  no_arp=True
    ...     src_ip=2002:0:0:0:0:0:0:1  dst_ip=2002:0:0:0:0:0:0:2  ethertype=86dd  name=c_b_flow    
    clear stats  
    start traffic
    sleep  10
    verify results  a  d  transmitted_frame_rate  received_valid_frame_rate        
    verify results  c  b  transmitted_frame_rate  received_valid_frame_rate            
    stop traffic
    [Tags]  l3  fs128  ipv6

#### L3 IPv4 Traffic : Frame Size 256 Bytes
        
TC17: Verify L3 IPv4 traffic: frame size 256 bytes
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  ${policy_name_2}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2} 
    ${stream_1}=  L3 add  flow=a->d  frame_rate=10000  frame_size=256  
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=100.1.1.1  dst_ip=100.1.1.2  name=a_d_flow
    ${stream_2}=  L3 add  flow=c->b  frame_rate=10000  frame_size=256  
    ...     src_mac=00:01:02:03:04:01  dst_mac=00:01:02:03:04:02  no_arp=True
    ...     src_ip=101.1.1.1  dst_ip=101.1.1.2  name=c_b_flow    
    clear stats  
    start traffic
    sleep  10
    verify results  a  d  transmitted_frame_rate  received_valid_frame_rate        
    verify results  c  b  transmitted_frame_rate  received_valid_frame_rate            
    stop traffic
    [Tags]  l3  fs256  ipv4
    
#### L3 IPv6 Traffic : Frame Size 256 Bytes
        
TC18: Verify L3 IPv6 traffic: frame size 256 bytes
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  ${policy_name_2}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2} 
    ${stream_1}=  L3 add  flow=a->d  frame_rate=10000  frame_size=256  
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=2001:0:0:0:0:0:0:1  dst_ip=2001:0:0:0:0:0:0:2  ethertype=86dd  name=a_d_flow
    ${stream_2}=  L3 add  flow=c->b  frame_rate=10000  frame_size=256  
    ...     src_mac=00:01:02:03:04:01  dst_mac=00:01:02:03:04:02  no_arp=True
    ...     src_ip=2002:0:0:0:0:0:0:1  dst_ip=2002:0:0:0:0:0:0:2  ethertype=86dd  name=c_b_flow    
    clear stats  
    start traffic
    sleep  10
    verify results  a  d  transmitted_frame_rate  received_valid_frame_rate        
    verify results  c  b  transmitted_frame_rate  received_valid_frame_rate            
    stop traffic
    [Tags]  l3  fs256  ipv6

#### L3 IPv4 Traffic : Frame Size 512 Bytes
        
TC19: Verify L3 IPv4 traffic: frame size 512 bytes
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  ${policy_name_2}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2} 
    ${stream_1}=  L3 add  flow=a->d  frame_rate=10000  frame_size=512  
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=100.1.1.1  dst_ip=100.1.1.2  name=a_d_flow
    ${stream_2}=  L3 add  flow=c->b  frame_rate=10000  frame_size=512  
    ...     src_mac=00:01:02:03:04:01  dst_mac=00:01:02:03:04:02  no_arp=True
    ...     src_ip=101.1.1.1  dst_ip=101.1.1.2  name=c_b_flow    
    clear stats  
    start traffic
    sleep  10
    verify results  a  d  transmitted_frame_rate  received_valid_frame_rate        
    verify results  c  b  transmitted_frame_rate  received_valid_frame_rate            
    stop traffic
    [Tags]  l3  fs512  ipv4
    
#### L3 IPv6 Traffic : Frame Size 512 Bytes
        
TC20: Verify L3 IPv6 traffic: frame size 512 bytes
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  ${policy_name_2}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2} 
    ${stream_1}=  L3 add  flow=a->d  frame_rate=10000  frame_size=512  
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=2001:0:0:0:0:0:0:1  dst_ip=2001:0:0:0:0:0:0:2  ethertype=86dd  name=a_d_flow
    ${stream_2}=  L3 add  flow=c->b  frame_rate=10000  frame_size=512  
    ...     src_mac=00:01:02:03:04:01  dst_mac=00:01:02:03:04:02  no_arp=True
    ...     src_ip=2002:0:0:0:0:0:0:1  dst_ip=2002:0:0:0:0:0:0:2  ethertype=86dd  name=c_b_flow    
    clear stats  
    start traffic
    sleep  10
    verify results  a  d  transmitted_frame_rate  received_valid_frame_rate        
    verify results  c  b  transmitted_frame_rate  received_valid_frame_rate            
    stop traffic
    [Tags]  l3  fs512  ipv6

#### L3 IPv4 Traffic : Frame Size 1024 Bytes
        
TC21: Verify L3 IPv4 traffic: frame size 1024 bytes
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  ${policy_name_2}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2} 
    ${stream_1}=  L3 add  flow=a->d  frame_rate=10000  frame_size=1024  
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=100.1.1.1  dst_ip=100.1.1.2  name=a_d_flow
    ${stream_2}=  L3 add  flow=c->b  frame_rate=10000  frame_size=1024  
    ...     src_mac=00:01:02:03:04:01  dst_mac=00:01:02:03:04:02  no_arp=True
    ...     src_ip=101.1.1.1  dst_ip=101.1.1.2  name=c_b_flow    
    clear stats  
    start traffic
    sleep  10
    verify results  a  d  transmitted_frame_rate  received_valid_frame_rate        
    verify results  c  b  transmitted_frame_rate  received_valid_frame_rate            
    stop traffic
    [Tags]  l3  fs1024  ipv4
    
#### L3 IPv6 Traffic : Frame Size 1024 Bytes
        
TC22: Verify L3 IPv6 traffic: frame size 1024 bytes
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  ${policy_name_2}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2} 
    ${stream_1}=  L3 add  flow=a->d  frame_rate=10000  frame_size=1024  
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=2001:0:0:0:0:0:0:1  dst_ip=2001:0:0:0:0:0:0:2  ethertype=86dd  name=a_d_flow
    ${stream_2}=  L3 add  flow=c->b  frame_rate=10000  frame_size=1024  
    ...     src_mac=00:01:02:03:04:01  dst_mac=00:01:02:03:04:02  no_arp=True
    ...     src_ip=2002:0:0:0:0:0:0:1  dst_ip=2002:0:0:0:0:0:0:2  ethertype=86dd  name=c_b_flow    
    clear stats  
    start traffic
    sleep  10
    verify results  a  d  transmitted_frame_rate  received_valid_frame_rate        
    verify results  c  b  transmitted_frame_rate  received_valid_frame_rate            
    stop traffic
    [Tags]  l3  fs1024  ipv6

#### L3 IPv4 Traffic : Frame Size 1280 Bytes
        
TC23: Verify L3 IPv4 traffic: frame size 1280 bytes
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  ${policy_name_2}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2} 
    ${stream_1}=  L3 add  flow=a->d  frame_rate=10000  frame_size=1280  
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=100.1.1.1  dst_ip=100.1.1.2  name=a_d_flow
    ${stream_2}=  L3 add  flow=c->b  frame_rate=10000  frame_size=1280  
    ...     src_mac=00:01:02:03:04:01  dst_mac=00:01:02:03:04:02  no_arp=True
    ...     src_ip=101.1.1.1  dst_ip=101.1.1.2  name=c_b_flow    
    clear stats  
    start traffic
    sleep  10
    verify results  a  d  transmitted_frame_rate  received_valid_frame_rate        
    verify results  c  b  transmitted_frame_rate  received_valid_frame_rate            
    stop traffic
    [Tags]  l3  fs1280  ipv4
    
#### L3 IPv6 Traffic : Frame Size 1280 Bytes
        
TC24: Verify L3 IPv6 traffic: frame size 1280 bytes
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  ${policy_name_2}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2} 
    ${stream_1}=  L3 add  flow=a->d  frame_rate=10000  frame_size=1280  
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=2001:0:0:0:0:0:0:1  dst_ip=2001:0:0:0:0:0:0:2  ethertype=86dd  name=a_d_flow
    ${stream_2}=  L3 add  flow=c->b  frame_rate=10000  frame_size=1280  
    ...     src_mac=00:01:02:03:04:01  dst_mac=00:01:02:03:04:02  no_arp=True
    ...     src_ip=2002:0:0:0:0:0:0:1  dst_ip=2002:0:0:0:0:0:0:2  ethertype=86dd  name=c_b_flow    
    clear stats  
    start traffic
    sleep  10
    verify results  a  d  transmitted_frame_rate  received_valid_frame_rate        
    verify results  c  b  transmitted_frame_rate  received_valid_frame_rate            
    stop traffic
    [Tags]  l3  fs1280  ipv6

#### L3 IPv4 Traffic : Frame Size 1518 Bytes
        
TC25: Verify L3 IPv4 traffic: frame size 1518 bytes
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  ${policy_name_2}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2} 
    ${stream_1}=  L3 add  flow=a->d  frame_rate=10000  frame_size=1518  
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=100.1.1.1  dst_ip=100.1.1.2  name=a_d_flow
    ${stream_2}=  L3 add  flow=c->b  frame_rate=10000  frame_size=1518  
    ...     src_mac=00:01:02:03:04:01  dst_mac=00:01:02:03:04:02  no_arp=True
    ...     src_ip=101.1.1.1  dst_ip=101.1.1.2  name=c_b_flow    
    clear stats  
    start traffic
    sleep  10
    verify results  a  d  transmitted_frame_rate  received_valid_frame_rate        
    verify results  c  b  transmitted_frame_rate  received_valid_frame_rate            
    stop traffic
    [Tags]  l3  fs1518  ipv4
    
#### L3 IPv6 Traffic : Frame Size 1518 Bytes
        
TC26: Verify L3 IPv6 traffic: frame size 1518 bytes
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  ${policy_name_2}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2} 
    ${stream_1}=  L3 add  flow=a->d  frame_rate=10000  frame_size=1518  
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=2001:0:0:0:0:0:0:1  dst_ip=2001:0:0:0:0:0:0:2  ethertype=86dd  name=a_d_flow
    ${stream_2}=  L3 add  flow=c->b  frame_rate=10000  frame_size=1518  
    ...     src_mac=00:01:02:03:04:01  dst_mac=00:01:02:03:04:02  no_arp=True
    ...     src_ip=2002:0:0:0:0:0:0:1  dst_ip=2002:0:0:0:0:0:0:2  ethertype=86dd  name=c_b_flow    
    clear stats  
    start traffic
    sleep  10
    verify results  a  d  transmitted_frame_rate  received_valid_frame_rate        
    verify results  c  b  transmitted_frame_rate  received_valid_frame_rate            
    stop traffic
    [Tags]  l3  fs1518  ipv6

#### L3 IPv4 Traffic : Frame Size 9150 Bytes
        
TC27: Verify L3 IPv4 traffic: frame size 9150 bytes
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  ${policy_name_2}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2} 
    ${stream_1}=  L3 add  flow=a->d  frame_rate=10000  frame_size=9150  
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=100.1.1.1  dst_ip=100.1.1.2  name=a_d_flow
    ${stream_2}=  L3 add  flow=c->b  frame_rate=10000  frame_size=9150  
    ...     src_mac=00:01:02:03:04:01  dst_mac=00:01:02:03:04:02  no_arp=True
    ...     src_ip=101.1.1.1  dst_ip=101.1.1.2  name=c_b_flow    
    clear stats  
    start traffic
    sleep  10
    verify results  a  d  transmitted_frame_rate  received_frame_rate        
    verify results  c  b  transmitted_frame_rate  received_frame_rate            
    stop traffic
    [Tags]  l3  fs9150  ipv4
    
#### L3 IPv6 Traffic : Frame Size 9150 Bytes
        
TC28: Verify L3 IPv6 traffic: frame size 9150 bytes
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  ${policy_name_2}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2} 
    ${stream_1}=  L3 add  flow=a->d  frame_rate=10000  frame_size=9150  
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=2001:0:0:0:0:0:0:1  dst_ip=2001:0:0:0:0:0:0:2  ethertype=86dd  name=a_d_flow
    ${stream_2}=  L3 add  flow=c->b  frame_rate=10000  frame_size=9150  
    ...     src_mac=00:01:02:03:04:01  dst_mac=00:01:02:03:04:02  no_arp=True
    ...     src_ip=2002:0:0:0:0:0:0:1  dst_ip=2002:0:0:0:0:0:0:2  ethertype=86dd  name=c_b_flow    
    clear stats  
    start traffic
    sleep  10
    verify results  a  d  transmitted_frame_rate  received_frame_rate        
    verify results  c  b  transmitted_frame_rate  received_frame_rate            
    stop traffic
    [Tags]  l3  fs9150  ipv6

#### L3 IPv4 Traffic : Frame Size 1518 Bytes
        
TC29: Verify L3 Tagged IPv4 traffic: frame size 1518 bytes
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  ${policy_name_2}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2} 
    ${stream_1}=  L3 add  flow=a->d  frame_rate=10000  frame_size=1518  vlan_id=1024  
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=100.1.1.1  dst_ip=100.1.1.2  name=a_d_flow
    ${stream_2}=  L3 add  flow=c->b  frame_rate=10000  frame_size=1518  vlan_id=1024  
    ...     src_mac=00:01:02:03:04:01  dst_mac=00:01:02:03:04:02  no_arp=True
    ...     src_ip=101.1.1.1  dst_ip=101.1.1.2  name=c_b_flow    
    clear stats  
    start traffic
    sleep  10
    verify results  a  d  transmitted_frame_rate  received_valid_frame_rate        
    verify results  c  b  transmitted_frame_rate  received_valid_frame_rate            
    stop traffic
    [Tags]  l3  vlantagged  ipv4
    
#### L3 IPv6 Traffic : Frame Size 1518 Bytes
        
TC30: Verify L3 Tagged IPv6 traffic: frame size 1518 bytes
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  ${policy_name_2}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2} 
    ${stream_2}=  L3 add  flow=c->b  frame_rate=10000  frame_size=1518  vlan_id=1024  
    ...     src_mac=00:01:02:03:04:01  dst_mac=00:01:02:03:04:02  no_arp=True
    ...     src_ip=101.1.1.1  dst_ip=101.1.1.2  name=c_b_flow    
    ${stream_2}=  L3 add  flow=c->b  frame_rate=10000  frame_size=1518  vlan_id=2048  
    ...     src_mac=00:01:02:03:04:01  dst_mac=00:01:02:03:04:02  no_arp=True
    ...     src_ip=2002:0:0:0:0:0:0:1  dst_ip=2002:0:0:0:0:0:0:2  ethertype=86dd  name=c_b_flow    
    clear stats  
    start traffic
    sleep  10
    verify results  a  d  transmitted_frame_rate  received_valid_frame_rate        
    verify results  c  b  transmitted_frame_rate  received_valid_frame_rate            
    stop traffic
    [Tags]  l3  vlantagged  ipv6

#### Process Restart

TC31: Restart process OFAD on switch S1
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  ${policy_name_2}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2} 
    ${stream_1}=  L3 add  flow=a->d  frame_rate=10000  frame_size=1518  
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=100.1.1.1  dst_ip=100.1.1.2  name=a_d_flow    
    ${stream_2}=  L3 add  flow=c->b  frame_rate=10000  frame_size=1518  
    ...     src_mac=00:01:02:03:04:01  dst_mac=00:01:02:03:04:02  no_arp=True
    ...     src_ip=2002:0:0:0:0:0:0:1  dst_ip=2002:0:0:0:0:0:0:2  ethertype=86dd  name=c_b_flow    
    clear stats  
    start traffic
    sleep  10
    verify results  a  d  transmitted_frame_rate  received_valid_frame_rate        
    verify results  c  b  transmitted_frame_rate  received_valid_frame_rate
    bash restart process  s1  ofad
    Sleep  90
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  ${policy_name_2}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2} 
    sleep  10
    verify results  a  d  transmitted_frame_rate  received_valid_frame_rate        
    verify results  c  b  transmitted_frame_rate  received_valid_frame_rate                    
    stop traffic
    [Tags]  bigtap  ha  ofad
        
TC32: Restart process OFAD on switch S2
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  ${policy_name_2}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2} 
    ${stream_1}=  L3 add  flow=a->d  frame_rate=10000  frame_size=1518  
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=100.1.1.1  dst_ip=100.1.1.2  name=a_d_flow    
    ${stream_2}=  L3 add  flow=c->b  frame_rate=10000  frame_size=1518  
    ...     src_mac=00:01:02:03:04:01  dst_mac=00:01:02:03:04:02  no_arp=True
    ...     src_ip=2002:0:0:0:0:0:0:1  dst_ip=2002:0:0:0:0:0:0:2  ethertype=86dd  name=c_b_flow    
    clear stats  
    start traffic
    sleep  10
    verify results  a  d  transmitted_frame_rate  received_valid_frame_rate        
    verify results  c  b  transmitted_frame_rate  received_valid_frame_rate
    bash restart process  s2  ofad
    Sleep  90
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  ${policy_name_2}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2} 
    sleep  10
    verify results  a  d  transmitted_frame_rate  received_valid_frame_rate        
    verify results  c  b  transmitted_frame_rate  received_valid_frame_rate                    
    stop traffic
    [Tags]  bigtap  ha  ofad
    
TC33: Restart process OFAD on switch S3
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  ${policy_name_2}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2} 
    ${stream_1}=  L3 add  flow=a->d  frame_rate=10000  frame_size=1518  
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=100.1.1.1  dst_ip=100.1.1.2  name=a_d_flow    
    ${stream_2}=  L3 add  flow=c->b  frame_rate=10000  frame_size=1518  
    ...     src_mac=00:01:02:03:04:01  dst_mac=00:01:02:03:04:02  no_arp=True
    ...     src_ip=2002:0:0:0:0:0:0:1  dst_ip=2002:0:0:0:0:0:0:2  ethertype=86dd  name=c_b_flow    
    clear stats  
    start traffic
    sleep  10
    verify results  a  d  transmitted_frame_rate  received_valid_frame_rate        
    verify results  c  b  transmitted_frame_rate  received_valid_frame_rate
    bash restart process  s3  ofad
    Sleep  90
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${verify_policy2}=  rest verify bigtap policy  ${policy_name_2}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy2} 
    sleep  10
    verify results  a  d  transmitted_frame_rate  received_valid_frame_rate        
    verify results  c  b  transmitted_frame_rate  received_valid_frame_rate                    
    stop traffic
    [Tags]  bigtap  ha  ofad

TC34: Verify interface statistics on switch
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${stream_1}=  L2 add  flow=a->d  frame_rate=10000  frame_cnt=100000  frame_size=64  no_arp=True  name=a_d_flow
    cli disable interface  s1  ${core_interface_s1s2_1}
    cli disable interface  s3  ${core_interface_s3s2_1}
    clear stats
    cli clear interface statistics  s1
    cli clear interface statistics  s2
    cli clear interface statistics  s3            
    start traffic     
    sleep  10
    verify results  a  d  transmitted_frame_rate  received_valid_frame_rate    
    stop traffic      
    ${rx_switch_value_1}=  cli return interface counter brief     s1      ${filter_s1_1}              rx
    ${tx_switch_value_1}=  cli return interface counter brief     s1      ${core_interface_s1s2_2}    tx        
    ${in_range_1}=         ixia verify traffic rate  ${rx_switch_value_1}   ${tx_switch_value_1}     rangev=10
    Should be true  ${in_range_1}
    ${rx_switch_value_2}=  cli return interface counter brief     s2      ${core_interface_s2s1_2}    rx
    ${tx_switch_value_2}=  cli return interface counter brief     s2      ${core_interface_s2s3_2}    tx
    ${in_range_2}=         ixia verify traffic rate  ${rx_switch_value_2}   ${tx_switch_value_2}     rangev=10
    Should be true  ${in_range_2}            
    ${rx_switch_value_3}=  cli return interface counter brief     s3      ${core_interface_s3s2_2}    rx
    ${tx_switch_value_3}=  cli return interface counter brief     s3      ${delivery_s3_1}            tx        
    ${in_range_3}=         ixia verify traffic rate  ${rx_switch_value_3}   ${tx_switch_value_3}     rangev=10
    Should be true  ${in_range_3} 
    cli enable interface  s1  ${core_interface_s1s2_1}
    cli enable interface  s3  ${core_interface_s3s2_1}
    [Tags]  bigtap  ha  stats


TC35: SNMP: Verify interface statistics and match with SNMP
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_1}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${stream_1}=  L2 add  flow=a->d  frame_rate=10000  frame_cnt=100000  frame_size=64  no_arp=True  name=a_d_flow
    cli disable interface  s1  ${core_interface_s1s2_1}
    cli disable interface  s3  ${core_interface_s3s2_1}
    bash restart process  s1  ofad
    bash restart process  s2  ofad
    bash restart process  s3  ofad
    bash restart process  s1  snmpd
    bash restart process  s2  snmpd
    bash restart process  s3  snmpd
    sleep  90
    clear stats
    cli clear interface statistics  s1
    cli clear interface statistics  s2
    cli clear interface statistics  s3                
    start traffic     
    sleep  10
    verify results  a  d  transmitted_frame_rate  received_valid_frame_rate    
    stop traffic      
    ${rx_switch_value_1}=  cli return interface counter brief     s1      ${filter_s1_1}              rx
    ${match_value1}=       snmp cmd   s1   snmpget    public   ${filter_s1_1_snmp_oid}
    ${snmp_value1}=        return snmp value  ${match_value1}  1
    ${in_range_1}=         ixia verify traffic rate  ${rx_switch_value_1}   ${snmp_value1}     rangev=100
    Should be true  ${in_range_1}

    ${tx_switch_value_1}=  cli return interface counter brief     s1      ${core_interface_s1s2_2}    tx
    ${match_value2}=       snmp cmd   s1   snmpget    public   ${core_s1_s2_2_snmp_oid}
    ${snmp_value2}=        return snmp value  ${match_value2}  1
    ${in_range_2}=         ixia verify traffic rate  ${tx_switch_value_1}   ${snmp_value2}     rangev=100
    Should be true  ${in_range_2}    
            
    ${rx_switch_value_2}=  cli return interface counter brief     s2      ${core_interface_s2s1_2}    rx
    ${match_value3}=       snmp cmd   s2   snmpget    public   ${core_s2_s1_2_snmp_oid}
    ${snmp_value3}=        return snmp value  ${match_value3}  1
    ${in_range_3}=         ixia verify traffic rate  ${rx_switch_value_2}   ${snmp_value3}     rangev=100
    Should be true  ${in_range_3}     
        
    ${tx_switch_value_2}=  cli return interface counter brief     s2      ${core_interface_s2s3_2}    tx
    ${match_value4}=       snmp cmd   s2   snmpget    public   ${core_s2_s3_2_snmp_oid}
    ${snmp_value4}=        return snmp value  ${match_value4}  1
    ${in_range_4}=         ixia verify traffic rate  ${tx_switch_value_2}   ${snmp_value4}     rangev=100
    Should be true  ${in_range_4}  
                   
    ${rx_switch_value_3}=  cli return interface counter brief     s3      ${core_interface_s3s2_2}    rx
    ${match_value5}=       snmp cmd   s3   snmpget    public   ${core_s3_s2_2_snmp_oid}
    ${snmp_value5}=        return snmp value  ${match_value5}  1
    ${in_range_5}=         ixia verify traffic rate  ${rx_switch_value_3}   ${snmp_value5}     rangev=100
    Should be true  ${in_range_5}  

    ${tx_switch_value_3}=  cli return interface counter brief     s3      ${delivery_s3_1}            tx        
    ${match_value6}=       snmp cmd   s3   snmpget    public   ${delivery_s3_1_snmp_oid}
    ${snmp_value6}=        return snmp value  ${match_value5}  1
    ${in_range_6}=         ixia verify traffic rate  ${tx_switch_value_3}   ${snmp_value6}     rangev=100
    Should be true  ${in_range_5}           
    cli enable interface  s1  ${core_interface_s1s2_1}
    cli enable interface  s3  ${core_interface_s3s2_1}
    [Tags]  bigtap  ha  stats  snmp    
    
TC36: Verify Transmit-Only Tunnel across Dell S6000
    rest enable feature  tunneling
    rest enable feature  crc
    bash  s1  ofad-ctl crc enable
    bash  s2  ofad-ctl crc enable
    bash  s3  ofad-ctl crc enable
    sleep  5    
    #Configuration on Arista
    cli arista add ip address       s4  ${arista_s6000_ip_address}  ${arista_s6000_ip_netmask}  ${arista_s600_port}  speed=forced 40gfull
    cli arista add mtu interface    s4  ${arista_s600_port}  9212
    sleep  5
    ### Tunnel as delivery interface
    ${verify_add_tun_delivery}=  rest add tunnel interface  s2  ${tunnel_sw2_name_delivery}  loopback=${tunnel_sw2_loopback_delivery}  pinterface=${tunnel_sw2_parent_intf_delivery}  tdirection=tx  sip=${tunnel_sw2_sip_delivery}  dip=${tunnel_sw2_dip_delivery}  mask=${tunnel_sw2_mask_delivery}  gip=${tunnel_sw2_gip_delivery}
    Should be true  ${verify_add_tun_delivery}
    sleep  20
    ${verify_tun_sw2}=  rest verify tunnel status  s2  ${tunnel_sw2_name_delivery}  tunnel_number=200  runtime_state=up  parent_interface=${tunnel_sw2_parent_intf_delivery}  tunnel_direction=tx  sip=${tunnel_sw2_sip_delivery}  dip=${tunnel_sw2_dip_delivery}  mask=${tunnel_sw2_mask_delivery}  gip=${tunnel_sw2_gip_delivery}      
    Should be true  ${verify_tun_sw2}
    ## Delete Tunnel
    ${verify_del_tun_sw2}=  rest delete tunnel interface  node=s2  tunnel_name=${tunnel_sw2_name_delivery}  
    Should be true  ${verify_del_tun_sw2}          
    rest disable feature  tunneling
    rest disable feature  crc
    cli arista delete ip address     s4  ${arista_s6000_ip_address}  ${arista_s6000_ip_netmask}  ${arista_s600_port}  speed=forced 40gfull
    cli arista delete mtu interface  s4  ${arista_s600_port}  9212
    sleep  5    
    [Tags]  bigtap  tunnel  tx

TC37: Verify Receive-Only Tunnel across Dell S6000
    rest enable feature  tunneling
    rest enable feature  crc
    bash  s1  ofad-ctl crc enable
    bash  s2  ofad-ctl crc enable
    bash  s3  ofad-ctl crc enable
    sleep  5    
    #Configuration on Arista
    cli arista add ip address       s4  ${arista_s6000_ip_address}  ${arista_s6000_ip_netmask}  ${arista_s600_port}  speed=forced 40gfull
    cli arista add mtu interface    s4  ${arista_s600_port}  9212
    sleep  5
    ### Tunnel as filter interface
    ${verify_add_tun_delivery}=  rest add tunnel interface  s2  ${tunnel_sw2_name_delivery}  pinterface=${tunnel_sw2_parent_intf_delivery}  tdirection=rx  sip=${tunnel_sw2_sip_delivery}  dip=${tunnel_sw2_dip_delivery}  mask=${tunnel_sw2_mask_delivery}  gip=${tunnel_sw2_gip_delivery}
    Should be true  ${verify_add_tun_delivery}
    sleep  20
    ${verify_tun_sw2}=  rest verify tunnel status  s2  ${tunnel_sw2_name_delivery}  tunnel_number=200  runtime_state=up  parent_interface=${tunnel_sw2_parent_intf_delivery}  tunnel_direction=rx  sip=${tunnel_sw2_sip_delivery}  dip=${tunnel_sw2_dip_delivery}  mask=${tunnel_sw2_mask_delivery}  gip=${tunnel_sw2_gip_delivery}      
    Should be true  ${verify_tun_sw2}
    ## Delete Tunnel
    ${verify_del_tun_sw2}=  rest delete tunnel interface  node=s2  tunnel_name=${tunnel_sw2_name_delivery}  
    Should be true  ${verify_del_tun_sw2}          
    rest disable feature  tunneling
    rest disable feature  crc
    cli arista delete ip address     s4  ${arista_s6000_ip_address}  ${arista_s6000_ip_netmask}  ${arista_s600_port}  speed=forced 40gfull
    cli arista delete mtu interface  s4  ${arista_s600_port}  9212
    sleep  5    
    [Tags]  bigtap  tunnel  rx   

TC38: Verify Bidirectional Tunnel across Dell S6000
    rest enable feature  tunneling
    rest enable feature  crc
    bash  s1  ofad-ctl crc enable
    bash  s2  ofad-ctl crc enable
    bash  s3  ofad-ctl crc enable
    sleep  5    
    #Configuration on Arista
    cli arista add ip address       s4  ${arista_s6000_ip_address}  ${arista_s6000_ip_netmask}  ${arista_s600_port}  speed=forced 40gfull
    cli arista add mtu interface    s4  ${arista_s600_port}  9212
    sleep  5
    ### Tunnel as filter interface
    ${verify_add_tun_delivery}=  rest add tunnel interface  s2  ${tunnel_sw2_name_delivery}  loopback=${tunnel_sw2_loopback_delivery}  pinterface=${tunnel_sw2_parent_intf_delivery}  tdirection=bidir  sip=${tunnel_sw2_sip_delivery}  dip=${tunnel_sw2_dip_delivery}  mask=${tunnel_sw2_mask_delivery}  gip=${tunnel_sw2_gip_delivery}
    Should be true  ${verify_add_tun_delivery}
    sleep  20
    ${verify_tun_sw2}=  rest verify tunnel status  s2  ${tunnel_sw2_name_delivery}  tunnel_number=200  runtime_state=up  parent_interface=${tunnel_sw2_parent_intf_delivery}  tunnel_direction=bidir  sip=${tunnel_sw2_sip_delivery}  dip=${tunnel_sw2_dip_delivery}  mask=${tunnel_sw2_mask_delivery}  gip=${tunnel_sw2_gip_delivery}      
    Should be true  ${verify_tun_sw2}
    ## Delete Tunnel
    ${verify_del_tun_sw2}=  rest delete tunnel interface  node=s2  tunnel_name=${tunnel_sw2_name_delivery}  
    Should be true  ${verify_del_tun_sw2}          
    rest disable feature  tunneling
    rest disable feature  crc
    cli arista delete ip address     s4  ${arista_s6000_ip_address}  ${arista_s6000_ip_netmask}  ${arista_s600_port}  speed=forced 40gfull
    cli arista delete mtu interface  s4  ${arista_s600_port}  9212
    sleep  5    
    [Tags]  bigtap  tunnel  bidir

TC39: Verify ntp configuration on Dell S4810
    configure ntp server  s1  time-c.nist.gov
    Sleep  5
    verify ntp server  s1  time-c.nist.gov
    delete ntp  s1  time-c.nist.gov
    [Tags]  switch-platform  ntp 

TC40: Verify ntp configuration on Dell S6000
    configure ntp server  s2  time-c.nist.gov
    Sleep  5
    verify ntp server  s2  time-c.nist.gov
    delete ntp  s2  time-c.nist.gov
    [Tags]  switch-platform  ntp 

TC41: Verify ntp server on Dell S4810 after process ntp restart
    configure ntp server  s1  time-c.nist.gov
    Sleep  5
    verify ntp server  s1  time-c.nist.gov
    bash restart process  s1  ntpd
    Sleep  5
    verify ntp server  s1  time-c.nist.gov
    [Tags]  switch-platform  ntp
        
TC42: Verify ntp server on Dell S6000 after process ntp restart
    configure ntp server  s2  time-c.nist.gov
    Sleep  5
    verify ntp server  s2  time-c.nist.gov
    bash restart process  s2  ntpd
    Sleep  5
    verify ntp server  s2  time-c.nist.gov 
    [Tags]  switch-platform  ntp
    
TC43: Verify openflow controller on Dell S4810  
    ${ret_value_1}=  cli verify controller  s1  c1
    Should Be True  ${ret_value_1}
    ${ret_value_1}=  cli verify controller  s1  c2
    Should Be True  ${ret_value_1}    
    [Tags]  switch-platform

TC44: Verify openflow controller on Dell S6000  
    ${ret_value_1}=  cli verify controller  s2  c1
    Should Be True  ${ret_value_1}
    ${ret_value_1}=  cli verify controller  s2  c2
    Should Be True  ${ret_value_1}    
    [Tags]  switch-platform                   

TC45: Verify DPID on Dell S4810 is same as being reported to Controller
    ${controller_dpid}=  rest return switch dpid from ip  s1
    ${switch_dpid}=      cli show switch dpid  s1
    Should be equal as strings  ${controller_dpid}  ${switch_dpid}   
    [Tags]  switch-platform  dpid

TC46: Verify DPID on Dell S6000 is same as being reported to Controller
    ${controller_dpid}=  rest return switch dpid from ip  s2
    ${switch_dpid}=      cli show switch dpid  s2
    Should be equal as strings  ${controller_dpid}  ${switch_dpid}   
    [Tags]  switch-platform  dpid

TC47: Verify you can ping remote site from Dell S4810
    ${ret_value_1}=  cli ping from switch  s1  www.bigswitch.com
    Should Be True  ${ret_value_1}  
    [Tags]  switch-platform

TC48: Verify you can ping remote site from Dell S6000
    ${ret_value_1}=  cli ping from switch  s2  www.bigswitch.com
    Should Be True  ${ret_value_1}  
    [Tags]  switch-platform 

TC49: Verify port-channel interface between S4810 and S6000 with hash mode L2
    lag setup  L2
    verify portchannel interface is up  s1  ${pc_name_s1s2}  
    verify portchannel interface is up  s2  ${pc_name_s2s1}
    cli delete portchannel  s1  ${pc_number_s1s2}
    cli delete portchannel  s2  ${pc_number_s2s1}
    sleep  5     
    [Tags]  switch-platform  lag
    
TC50: Verify port-channel interface between S4810 and S6000 with hash mode L3
    lag setup  L3
    verify portchannel interface is up  s1  ${pc_name_s1s2}  
    verify portchannel interface is up  s2  ${pc_name_s2s1}
    cli delete portchannel  s1  ${pc_number_s1s2}
    cli delete portchannel  s2  ${pc_number_s2s1} 
    sleep  5
    [Tags]  switch-platform  lag

TC51: Dell S4810 - Verify port-channel (hash-mode:L2) interface shows correct 40G member links
    lag setup  L2
    ${member_exists0}=  cli verify portchannel members  s1  ${pc_number_s1s2}  ${pc_s1s2_members}
    Should Be True  ${member_exists0}  
    cli delete portchannel  s1  ${pc_number_s1s2}
    cli delete portchannel  s2  ${pc_number_s2s1} 
    sleep  5    
    [Tags]  switch-platform  lag

TC52: Dell S6000 - Verify port-channel (hash-mode:L2) interface shows correct 40G member links
    lag setup  L2
    ${member_exists0}=  cli verify portchannel members  s2  ${pc_number_s2s1}  ${pc_s2s1_members}
    Should Be True  ${member_exists0}
    cli delete portchannel  s1  ${pc_number_s1s2}
    cli delete portchannel  s2  ${pc_number_s2s1}
    sleep  5       
    [Tags]  switch-platform  lag


* Keywords

dell suite setup
    base suite setup
    rest add switch alias  s1  ${s1_alias}
    rest add switch alias  s2  ${s2_alias}
    rest add switch alias  s3  ${s3_alias}    
    ${disable_crc_check}=  rest disable feature  crc
    Should be true  ${disable_crc_check} 
    ${disable_feature}=  rest disable feature  inport-mask
    Should be true  ${disable_feature}               
    ${output_1}=    rest add interface role  s1  ${filter_s1_1}         filter      ${filter_nick_s1_1}
    Should be true  ${output_1}     
    ${output_2}=    rest add interface role  s1  ${delivery_s1_1}       delivery    ${delivery_nick_s1_1}
    Should be true  ${output_2}
    ${output_3}=    rest add interface role  s1  ${pre_service_s1}      service     intf_nickname=${pre_service_nick_s1}
    Should be true  ${output_3}     
    ${output_4}=    rest add interface role  s1  ${post_service_s1}     service     intf_nickname=${post_service_nick_s1}
    Should be true  ${output_4}

    ${output_5}=    rest add interface role  s2  ${pre_service_s2}      service     intf_nickname=${pre_service_nick_s2}
    Should be true  ${output_5}     
    ${output_6}=    rest add interface role  s2  ${post_service_s2}     service     intf_nickname=${post_service_nick_s2}
    Should be true  ${output_6}

    ${output_7}=    rest add interface role  s3  ${filter_s3_1}         filter      ${filter_nick_s3_1}   
    Should be true  ${output_7}
    ${output_8}=    rest add interface role  s3  ${delivery_s3_1}       delivery    ${delivery_nick_s3_1}        
    Should be true  ${output_8}
    ${output_9}=    rest add interface role  s3  ${pre_service_s3}      service     intf_nickname=${pre_service_nick_s3}
    Should be true  ${output_9}     
    ${output_10}=   rest add interface role  s3  ${post_service_s3}     service     intf_nickname=${post_service_nick_s3}
    Should be true  ${output_10}

    ${output_11}=   rest add service    ${service_name_1}     ${pre_service_nick_s1}     ${post_service_nick_s1}
    Should be true  ${output_11}    
    ${output_12}=   rest add service    ${service_name_2}     ${pre_service_nick_s2}     ${post_service_nick_s2}
    Should be true  ${output_12}
    ${output_13}=   rest add service    ${service_name_3}     ${pre_service_nick_s3}     ${post_service_nick_s3}
    Should be true  ${output_13}
        
    Sleep  5
    ${output_14}=   rest add policy  admin-view  ${policy_name_1}  forward
    Should be true  ${output_14}
    ${output_15}=   rest add policy match  admin-view  ${policy_name_1}  1  {"any-traffic": true, "sequence": 1}
    Should be true  ${output_15}
    ${output_16}=   rest add policy interface  admin-view  ${policy_name_1}  ${filter_nick_s1_1}  filter
    Should be true  ${output_16}    
    ${output_17}=   rest add policy interface  admin-view  ${policy_name_1}  ${delivery_nick_s3_1}  delivery
    Should be true  ${output_17}    
    ${output_18}=    rest add service to policy  admin-view  ${policy_name_1}  ${service_name_1}  1
    Should be true  ${output_18}
    ${output_19}=    rest add service to policy  admin-view  ${policy_name_1}  ${service_name_2}  2
    Should be true  ${output_19}    
    ${output_20}=    rest add service to policy  admin-view  ${policy_name_1}  ${service_name_3}  3
    Should be true  ${output_20}    
        
    ${output_21}=    rest add policy  admin-view  ${policy_name_2}  forward
    Should be true  ${output_21}
    ${output_22}=    rest add policy match  admin-view  ${policy_name_2}  1  {"any-traffic": true, "sequence": 1}
    Should be true  ${output_22}
    ${output_23}=    rest add policy interface  admin-view  ${policy_name_2}  ${filter_nick_s3_1}  filter
    Should be true  ${output_23}    
    ${output_24}=    rest add policy interface  admin-view  ${policy_name_2}  ${delivery_nick_s1_1}  delivery
    Should be true  ${output_24}
    Sleep  5
    cli add snmp keyword   s1   community   ${snmp_ccommunity_1}       
    cli add snmp keyword   s1   location    ${snmp_location_1}       
    cli add snmp keyword   s1   contact     ${snmp_contact_1}       
    cli add snmp host      s1   ${snmp_trap_svr_1}   traps   ${snmp_community_1}   162   
    cli add snmp host      s1   ${snmp_trap_svr_1}   informs   ${snmp_community_1}   162
    ###
    cli add snmp keyword   s2   community   ${snmp_ccommunity_1}       
    cli add snmp keyword   s2   location    ${snmp_location_1}       
    cli add snmp keyword   s2   contact     ${snmp_contact_1}       
    cli add snmp host      s2   ${snmp_trap_svr_1}   traps   ${snmp_community_1}   162   
    cli add snmp host      s2   ${snmp_trap_svr_1}   informs   ${snmp_community_1}   162
    ###
    cli add snmp keyword   s3   community   ${snmp_ccommunity_1}       
    cli add snmp keyword   s3   location    ${snmp_location_1}       
    cli add snmp keyword   s3   contact     ${snmp_contact_1}       
    cli add snmp host      s3   ${snmp_trap_svr_1}   traps   ${snmp_community_1}   162   
    cli add snmp host      s3   ${snmp_trap_svr_1}   informs   ${snmp_community_1}   162        

traffic test setup
    ixia initialize  tg1  init=true
    
traffic teardown
    delete traffic
    sleep  2
        
verify results   [Arguments]  ${send_port}  ${recv_port}  ${transmitted_frames}  ${received_valid_frames}
    Sleep  5
    ${report}=  fetch port stats
    ${tx_value}=  verify dict key  ${report}  ${send_port}  ${transmitted_frames}
    ${rx_value}=  verify dict key  ${report}  ${recv_port}  ${received_valid_frames}
    ${in_range}=  ixia verify traffic rate  ${tx_value}  ${rx_value}
    Should be true  ${in_range}

configure ntp server  [Arguments]  ${switch}  ${ntp_server}
    ${ret_value_1}=  add ntp server  ${switch}  ${ntp_server}  
    Should Be True  ${ret_value_1}
 
verify ntp server  [Arguments]  ${switch}  ${ntp_server}
    ${ret_value_1}=  verify ntp  ${switch}  ${ntp_server}  
    Should Be True  ${ret_value_1}

delete ntp  [Arguments]  ${switch}  ${ntp_server}
    ${ret_value_1}=  delete ntp server  ${switch}  ${ntp_server}  
    Should Be True  ${ret_value_1}

lag setup  [Arguments]  ${mode}
    ${pc_status_s1s2}=  cli add portchannel  s1  ${pc_number_s1s2}   ${pc_members_s1s2}  ${mode}
    Should be true  ${pc_status_s1s2}
    ${pc_status_s2s1}=  cli add portchannel  s2  ${pc_number_s2s1}   ${pc_members_s2s1}  ${mode}
    Should be true  ${pc_status_s2s1}
    sleep  5

verify portchannel interface is up  [Arguments]  ${switch}  ${interface_name}  
    ${inft_state}=  cli show interface state  ${switch}  ${interface_name}
    Should Contain  ${inft_state}  up
    ${cintf_state}=  rest verify interface is up  ${switch}  ${interface_name}
    Should Be True  ${cintf_state}
    
dell suite teardown
    ${teardown_1}=      rest delete policy  admin-view  ${policy_name_1}
    Should be true      ${teardown_1}  
    ${teardown_2}=      rest delete policy  admin-view  ${policy_name_2}
    Should be true      ${teardown_2}
    ${teardown_20}=     rest delete service  ${service_name_1}
    Should be true      ${teardown_20}
    ${teardown_21}=     rest delete service  ${service_name_2}
    Should be true      ${teardown_21}
    ${teardown_22}=     rest delete service  ${service_name_3}
    Should be true      ${teardown_22}            
    ${teardown_3}=      rest delete interface role  s1  ${filter_s1_1}      filter      ${filter_nick_s1_1}
    Should be true      ${teardown_3}
    ${teardown_4}=      rest delete interface role  s1  ${delivery_s1_1}    delivery    ${delivery_nick_s1_1}
    Should be true      ${teardown_4}     
    ${teardown_5}=      rest delete interface role  s1  ${pre_service_s1}   service     ${pre_service_nick_s1}
    Should be true      ${teardown_5}
    ${teardown_6}=      rest delete interface role  s1  ${post_service_s1}  service     ${post_service_nick_s1}
    Should be true      ${teardown_6}     
    
    ${teardown_7}=      rest delete interface role  s2  ${pre_service_s2}   service     ${pre_service_nick_s2}
    Should be true      ${teardown_7}
    ${teardown_8}=      rest delete interface role  s2  ${post_service_s2}  service     ${post_service_nick_s2}
    Should be true      ${teardown_8}    
    
    ${teardown_9}=      rest delete interface role  s3  ${filter_s3_1}      filter      ${filter_nick_s3_1}
    Should be true      ${teardown_9}
    ${teardown_10}=     rest delete interface role  s3  ${delivery_s3_1}    delivery    ${delivery_nick_s3_1}
    Should be true      ${teardown_10}        
    ${teardown_11}=     rest delete interface role  s3  ${pre_service_s3}   service     ${pre_service_nick_s3}
    Should be true      ${teardown_11}
    ${teardown_12}=     rest delete interface role  s3  ${post_service_s3}  service     ${post_service_nick_s3}
    Should be true      ${teardown_12}
        
    ${teardown_13}=     rest delete interface  s1  ${filter_s1_1}
    Should be true      ${teardown_13}
    ${teardown_14}=     rest delete interface  s1  ${delivery_s1_1}
    Should be true      ${teardown_14}
    ${teardown_15}=     rest delete interface  s3  ${filter_s3_1}
    Should be true      ${teardown_15}
    ${teardown_16}=     rest delete interface  s3  ${delivery_s3_1}
    Should be true      ${teardown_16}    
    ${teardown_17}=     rest delete switch  s1
    Should be true      ${teardown_17}    
    ${teardown_18}=     rest delete switch  s2
    Should be true      ${teardown_18}        
    ${teardown_19}=     rest delete switch  s3
    Should be true      ${teardown_19}        
    ${enable_crc_check}=  rest enable feature  crc
    Should be true  ${enable_crc_check}  
    rest delete switch alias  s1
    rest delete switch alias  s2
    rest delete switch alias  s3    
    base suite teardown  