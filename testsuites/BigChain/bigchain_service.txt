*Settings
Documentation                           BigChain Service Test Suite
Suite Setup                             service suite setup
Suite Teardown                          service suite teardown
Test Setup                              service test setup
Test Teardown                           service test teardown
Force Tags                              bigchain  corsair-450  accton-AS5710  chain-service
Library                                 keywords/BsnCommon.py
Library                                 keywords/AppController.py
Library                                 keywords/BigTap.py
Library                                 keywords/BigChain.py
Library                                 keywords/SwitchLight.py
Library                                 keywords/Ixia.py
Library                                 Collections.py
Library                                 OperatingSystem.py
Library                                 String.py

* Variable
${switch1_alias}                        app-ras5710-1

${chain_name}                           CHAIN1
${chain_name2}                          CHAIN2
${chain_interface_1}                    ethernet1
${chain_interface_2}                    ethernet2
${chain_interface_3}                    ethernet9
${chain_interface_4}                    ethernet12


${service_name}                         SERVICE1
${service_name2}                        SERVICE2
${service_name3}                        SERVICE3
${service_in_interface1}                ethernet23
${service_out_interface1}               ethernet24
${service_in_interface2}                ethernet25
${service_out_interface2}               ethernet26
${service_in_interface3}                ethernet27
${service_out_interface3}               ethernet28
${service_in_interface4}                ethernet29
${service_out_interface4}               ethernet30
${service_in_interface5}                ethernet31
${service_out_interface5}               ethernet32

${span_service_name}                    SPAN1
${span_service_interface}               ethernet45
${addressgrp_name}                      BCADDRESSGRP

${s1s2_10g_name_1}                      port-channel1
${s1s2_10g_port_range_1}                13,15,17,21
${s1s2_10g_number_1}                    2
${s1s2_10g_name_2}                      port-channel2
${s1s2_10g_port_range_2}                14,16,18,22
${s1s2_10g_number_2}                    3

* Test Case

TC001: Verify service description can be configured via rest a call
    ${result1}=  rest add a bigchain service  chain_service_name=${service_name}  service_type=custom  instance_id=1
    Should be True  ${result1}
    ${result2}=  rest add a bigchain service description  chain_service_name=${service_name}  descrption=TestBigChainService
    Should be True  ${result2}
    [Tags]  feature

TC002: Verify service description can be deleted via rest a call
    ${result1}=  rest add a bigchain service  chain_service_name=${service_name}  service_type=custom  instance_id=1
    Should be True  ${result1}
    ${result2}=  rest add a bigchain service description  chain_service_name=${service_name}  descrption=TestBigChainService
    Should be True  ${result2}
    sleep  5
    ${result3}=  rest delete a bigchain service description  chain_service_name=${service_name}  descrption=TestBigChainService
    Should be True  ${result3}
    [Tags]  feature

TC003: Verify service description can be configured via cli
    config  node=master  cmd=bigchain service ${service_name}
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    config  node=master  cmd=description "Test Description"
    ${content2}=  cli_content  node=master
    Should Not Contain  ${content2}  Error    
    [Tags]  feature

TC004: Verify service description can be deleted via cli
    config  node=master  cmd=bigchain service ${service_name}
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    config  node=master  cmd=description "Test Description"
    ${content2}=  cli_content  node=master
    Should Not Contain  ${content2}  Error
    sleep  2
    config  node=master  cmd=no description "Test Description"
    ${content3}=  cli_content  node=master
    Should Not Contain  ${content3}  Error
    [Tags]  feature  jira-BT-1831  skipped

TC005: Verify service type smtp can be configured
    config  node=master  cmd=bigchain service ${service_name}
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    config  node=master  cmd=type smtp
    ${content2}=  cli_content  node=master
    Should Not Contain  ${content2}  Error
    [Tags]  feature

TC006: Verify service type smtp can be deleted
    config  node=master  cmd=bigchain service ${service_name}
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    config  node=master  cmd=type smtp
    ${content2}=  cli_content  node=master
    Should Not Contain  ${content2}  Error
    sleep  2
    config  node=master  cmd=no type smtp
    ${content2}=  cli_content  node=master
    Should Not Contain  ${content2}  Error    
    [Tags]  feature

TC007: Verify service type custom can be configured
    config  node=master  cmd=bigchain service ${service_name}
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    config  node=master  cmd=type custom
    ${content2}=  cli_content  node=master
    Should Not Contain  ${content2}  Error
    [Tags]  feature

TC008: Verify service type custom can be deleted
    config  node=master  cmd=bigchain service ${service_name}
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    config  node=master  cmd=type custom
    ${content2}=  cli_content  node=master
    Should Not Contain  ${content2}  Error
    sleep  2
    config  node=master  cmd=no type custom
    ${content2}=  cli_content  node=master
    Should Not Contain  ${content2}  Error    
    [Tags]  feature

TC009: Verify service type ssl can be configured
    config  node=master  cmd=bigchain service ${service_name}
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    config  node=master  cmd=type ssl
    ${content2}=  cli_content  node=master
    Should Not Contain  ${content2}  Error
    [Tags]  feature

TC010: Verify service type ssl can be deleted
    config  node=master  cmd=bigchain service ${service_name}
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    config  node=master  cmd=type ssl
    ${content2}=  cli_content  node=master
    Should Not Contain  ${content2}  Error
    sleep  2
    config  node=master  cmd=no type ssl
    ${content2}=  cli_content  node=master
    Should Not Contain  ${content2}  Error    
    [Tags]  feature

TC011: Verify service type web can be configured
    config  node=master  cmd=bigchain service ${service_name}
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    config  node=master  cmd=type web
    ${content2}=  cli_content  node=master
    Should Not Contain  ${content2}  Error
    [Tags]  feature

TC012: Verify service type web can be deleted
    config  node=master  cmd=bigchain service ${service_name}
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    config  node=master  cmd=type web
    ${content2}=  cli_content  node=master
    Should Not Contain  ${content2}  Error
    sleep  2
    config  node=master  cmd=no type web
    ${content2}=  cli_content  node=master
    Should Not Contain  ${content2}  Error
    [Tags]  feature

TC013: Verify service type web-smtp can be configured
    config  node=master  cmd=bigchain service ${service_name}
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    config  node=master  cmd=type web-smtp
    ${content2}=  cli_content  node=master
    Should Not Contain  ${content2}  Error
    [Tags]  feature

TC014: Verify service type web-smtp can be deleted
    config  node=master  cmd=bigchain service ${service_name}
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    config  node=master  cmd=type web-smtp
    ${content2}=  cli_content  node=master
    Should Not Contain  ${content2}  Error
    sleep  2
    config  node=master  cmd=no type web-smtp
    ${content2}=  cli_content  node=master
    Should Not Contain  ${content2}  Error
    [Tags]  feature

TC015: Service Instance: Verify standard ethernet interface can be used as interface-pair
    ${result1}=  rest add a bigchain service  chain_service_name=${service_name}  service_type=custom  instance_id=1
    Should be True  ${result1}
    ${result2}=  rest add a bigchain service description  chain_service_name=${service_name}  descrption=TestBigChainService
    Should be True  ${result2}
    ${result3}=  rest add a bigchain service instance interface pair  node=s1  chain_service_name=${service_name}  instance_id=1  inintf=${service_in_interface1}  outintf=${service_out_interface1}
    Should be True  ${result3}
    ${result4}=  rest update bigchain policy action  chain_service_name=${service_name}
    Should be True  ${result4}
    ${result5}=  rest add a bigchain policy match  chain_service_name=${service_name}  match_number=1  data={"ether-type": 2048, "dst-tp-port": 80, "ip-proto": 6, "sequence": 1}
    Should be True  ${result5}
    sleep  5
    ${result6}=  rest verify bigchain service instance  node=s1  chain_service_name=${service_name}  chain_service_type=custom  instance_id=1  inport=${service_in_interface1}  outport=${service_out_interface1}  chain_service_description=TestBigChainService
    Should be True  ${result6}
    [Tags]  feature  jira-bt-1832

TC016: Service Instance: Verify port-channel interface can be used as interface-pair
    ${result1}=  rest add a bigchain service  chain_service_name=${service_name}  service_type=custom  instance_id=1
    Should be True  ${result1}
    ${result2}=  rest add a bigchain service description  chain_service_name=${service_name}  descrption=TestBigChainService
    Should be True  ${result2}
    ${result3}=  rest add a bigchain service instance interface pair  node=s1  chain_service_name=${service_name}  instance_id=1  inintf=${s1s2_10g_name_1}  outintf=${s1s2_10g_name_2}
    Should be True  ${result3}
    ${result4}=  rest update bigchain policy action  chain_service_name=${service_name}
    Should be True  ${result4}
    ${result5}=  rest add a bigchain policy match  chain_service_name=${service_name}  match_number=1  data={"ether-type": 2048, "dst-tp-port": 80, "ip-proto": 6, "sequence": 1}
    Should be True  ${result5}
    sleep  5
    ${result6}=  rest verify bigchain service instance  node=s1  chain_service_name=${service_name}  chain_service_type=custom  instance_id=1  inport=${s1s2_10g_name_1}  outport=${s1s2_10g_name_2}  chain_service_description=TestBigChainService
    Should be True  ${result6}
    [Tags]  feature

TC017: Service Instance: Verify bigchain service instance can be deleted
    config  node=master  cmd=bigchain service ${service_name}
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    config  node=master  cmd=type custom
    ${content2}=  cli_content  node=master
    Should Not Contain  ${content2}  Error
    config  node=master  cmd=instance 1
    ${content3}=  cli_content  node=master
    Should Not Contain  ${content3}  Error
    config  node=master  cmd=interface-pair switch ${switch1_alias} in ${service_in_interface1} out ${service_out_interface1}
    ${content4}=  cli_content  node=master
    Should Not Contain  ${content4}  Error
    sleep  5
    config  node=master  cmd=no instance 1
    ${content5}=  cli_content  node=master
    Should Not Contain  ${content5}  Error
    [Tags]  feature

TC018: Service Instance: Verify interface-pair configuration under service instance cannot contain same interface as both in and out interfaces.
    config  node=master  cmd=bigchain service ${service_name}
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    config  node=master  cmd=type custom
    ${content2}=  cli_content  node=master
    Should Not Contain  ${content2}  Error
    config  node=master  cmd=instance 1
    ${content3}=  cli_content  node=master
    Should Not Contain  ${content3}  Error
    config  node=master  cmd=interface-pair switch ${switch1_alias} in ${service_in_interface1} out ${service_in_interface1}
    ${content4}=  cli_content  node=master
    Should Contain  ${content4}  Error
    [Tags]  feature
    
TC019: Service Instance: Verify feature in-skip can be configured
    config  node=master  cmd=bigchain service ${service_name}
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    config  node=master  cmd=type custom
    ${content2}=  cli_content  node=master
    Should Not Contain  ${content2}  Error
    config  node=master  cmd=instance 1
    ${content3}=  cli_content  node=master
    Should Not Contain  ${content3}  Error
    config  node=master  cmd=interface-pair switch ${switch1_alias} in ${service_in_interface1} out ${service_out_interface1}
    ${content4}=  cli_content  node=master
    Should Not Contain  ${content4}  Error
    config  node=master  cmd=in-skip
    ${content5}=  cli_content  node=master
    Should Not Contain  ${content5}  Error
    ${result6}=  rest verify bigchain service instance  node=s1  chain_service_name=${service_name}  chain_service_type=custom  instance_id=1  inport=${service_in_interface1}  outport=${service_out_interface1}  chain_service_description=TestBigChainService  inskip=${True}
    Should be True  ${result6}
    [Tags]  feature
    
TC020: Service Instance: Verify feature out-skip can be configured
    config  node=master  cmd=bigchain service ${service_name}
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    config  node=master  cmd=type custom
    ${content2}=  cli_content  node=master
    Should Not Contain  ${content2}  Error
    config  node=master  cmd=instance 1
    ${content3}=  cli_content  node=master
    Should Not Contain  ${content3}  Error
    config  node=master  cmd=interface-pair switch ${switch1_alias} in ${service_in_interface1} out ${service_out_interface1}
    ${content4}=  cli_content  node=master
    Should Not Contain  ${content4}  Error
    config  node=master  cmd=out-skip
    ${content5}=  cli_content  node=master
    Should Not Contain  ${content5}  Error
    ${result6}=  rest verify bigchain service instance  node=s1  chain_service_name=${service_name}  chain_service_type=custom  instance_id=1  inport=${service_in_interface1}  outport=${service_out_interface1}  chain_service_description=TestBigChainService  outskip=${True}
    Should be True  ${result6}
    [Tags]  feature
    
TC021: Service Instance: Verify feature in-skip and out-skip cannot be configured at the same time.
    config  node=master  cmd=bigchain service ${service_name}
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    config  node=master  cmd=type custom
    ${content2}=  cli_content  node=master
    Should Not Contain  ${content2}  Error
    config  node=master  cmd=instance 1
    ${content3}=  cli_content  node=master
    Should Not Contain  ${content3}  Error
    config  node=master  cmd=interface-pair switch ${switch1_alias} in ${service_in_interface1} out ${service_out_interface1}
    ${content4}=  cli_content  node=master
    Should Not Contain  ${content4}  Error
    config  node=master  cmd=out-skip
    ${content5}=  cli_content  node=master
    Should Not Contain  ${content5}  Error
    config  node=master  cmd=in-skip
    ${content6}=  cli_content  node=master
    Should Contain  ${content6}  Error
    ${result6}=  rest verify bigchain service instance  node=s1  chain_service_name=${service_name}  chain_service_type=custom  instance_id=1  inport=${service_in_interface1}  outport=${service_out_interface1}  chain_service_description=TestBigChainService  outskip=${True}
    Should be True  ${result6}
    [Tags]  feature

TC022: Service Instance: Verify existing span interfaces cannot be used as service in interfaces
    ${result1}=  rest add bigchain span service  s1  span_service_name=${span_service_name}  span_instance_id=1  span_interface=${span_service_interface}  
    Should be true  ${result1}
    sleep  2
    config  node=master  cmd=bigchain service ${service_name}
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    config  node=master  cmd=type custom
    ${content2}=  cli_content  node=master
    Should Not Contain  ${content2}  Error
    config  node=master  cmd=instance 1
    ${content3}=  cli_content  node=master
    Should Not Contain  ${content3}  Error
    config  node=master  cmd=interface-pair switch ${switch1_alias} in ${span_service_interface} out ${service_out_interface1}
    ${content4}=  cli_content  node=master
    Should Contain  ${content4}  Error
    [Tags]  feature

TC023: Service Instance: Verify existing span interfaces cannot be used as service out interfaces
    ${result1}=  rest add bigchain span service  s1  span_service_name=${span_service_name}  span_instance_id=1  span_interface=${span_service_interface}  
    Should be true  ${result1}
    sleep  2
    config  node=master  cmd=bigchain service ${service_name}
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    config  node=master  cmd=type custom
    ${content2}=  cli_content  node=master
    Should Not Contain  ${content2}  Error
    config  node=master  cmd=instance 1
    ${content3}=  cli_content  node=master
    Should Not Contain  ${content3}  Error
    config  node=master  cmd=interface-pair switch ${switch1_alias} in ${service_in_interface1} out ${span_service_interface}
    ${content4}=  cli_content  node=master
    Should Contain  ${content4}  Error
    [Tags]  feature

TC024: Service Policy: Verify multiple match conditions can be added to a service via CLI 
    config  node=master  cmd=bigchain service ${service_name}
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    config  node=master  cmd=description TestBigChainService
    ${content2}=  cli_content  node=master
    Should Not Contain  ${content2}  Error
    config  node=master  cmd=instance 1
    ${content3}=  cli_content  node=master
    Should Not Contain  ${content3}  Error
    config  node=master  cmd=interface-pair switch ${switch1_alias} in ${service_in_interface1} out ${service_out_interface1}
    ${content4}=  cli_content  node=master
    Should Not Contain  ${content4}  Error
    config  node=master  cmd=exit
    config  node=master  cmd=1 match tcp dst-port 80
    ${content6}=  cli_content  node=master
    Should Not Contain  ${content6}  Error
    config  node=master  cmd=2 match udp dst-port 53
    ${content7}=  cli_content  node=master
    Should Not Contain  ${content7}  Error
    sleep  5
    ${result1}=  rest verify bigchain service policy  chain_service_name=${service_name}  sequence=1  data=sequence 1 dst-tp-port 80 ether-type 2048 ip-proto 6
    Should be True  ${result1}
    ${result2}=  rest verify bigchain service policy  chain_service_name=${service_name}  sequence=2  data=sequence 2 dst-tp-port 53 ether-type 2048 ip-proto 17
    Should be True  ${result2}    
    [Tags]  feature

TC025: Service Policy: Verify IPv4 based Big Chain address-groups can be configured
    ${result1}=  rest add bigchain address group  chain_addressgrp_name=${addressgrp_name}  chain_addressgrp_data=100.1.1.1 255.255.255.255 101.1.1.1 255.255.255.252 102.1.1.1 255.255.255.248 103.1.1.1 255.255.255.240 104.1.1.1 255.255.255.224 105.1.1.1 255.255.255.192 106.1.1.1 255.255.255.128 107.1.1.1 255.255.255.0 108.1.1.1 255.255.254.0 109.1.1.1 255.255.252.0 110.1.1.1 255.255.248.0 111.1.1.1 255.255.240.0 112.1.1.1 255.255.224.0 113.1.1.1 255.255.192.0 114.1.1.1 255.255.128.0 115.1.1.1 255.255.0.0
    Should be True  ${result1}
    sleep  2
    ${result2}=  rest verify bigchain address group  chain_addressgrp_name=${addressgrp_name}  chain_addressgrp_data=100.1.1.1 255.255.255.255 101.1.1.1 255.255.255.252 102.1.1.1 255.255.255.248 103.1.1.1 255.255.255.240 104.1.1.1 255.255.255.224 105.1.1.1 255.255.255.192 106.1.1.1 255.255.255.128 107.1.1.1 255.255.255.0 108.1.1.1 255.255.254.0 109.1.1.1 255.255.252.0 110.1.1.1 255.255.248.0 111.1.1.1 255.255.240.0 112.1.1.1 255.255.224.0 113.1.1.1 255.255.192.0 114.1.1.1 255.255.128.0 115.1.1.1 255.255.0.0
    Should be True  ${result2}
    ${result3}=  rest delete bigchain address group  chain_addressgrp_name=${addressgrp_name}
    Should be True  ${result2}
    [Tags]  feature


TC026: Service Policy: Verify IPv6 based Big Chain address-groups can be configured
    ${result1}=  rest add bigchain address group  chain_addressgrp_name=${addressgrp_name}  chain_addressgrp_type=ipv6  chain_addressgrp_data=2001::1 ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff 2002::1 ffff:ffff:ffff:ffff:ffff:ffff:ffff:0 2003::1 ffff:ffff:ffff:ffff:ffff:ffff:0:0 2004::1 ffff:ffff:ffff:ffff:ffff:0:0:0 2005::1 ffff:ffff:ffff:ffff:0:0:0:0 2006::1 ffff:ffff:ffff:0:0:0:0:0 2007::1 ffff:ffff:0:0:0:0:0:0 2008::1 ffff:0:0:0:0:0:0:0
    Should be True  ${result1}
    sleep  2
    ${result2}=  rest verify bigchain address group  chain_addressgrp_name=${addressgrp_name}  chain_addressgrp_type=ipv6  chain_addressgrp_data=2001::1 ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff 2002::1 ffff:ffff:ffff:ffff:ffff:ffff:ffff:0 2003::1 ffff:ffff:ffff:ffff:ffff:ffff:0:0 2004::1 ffff:ffff:ffff:ffff:ffff:0:0:0 2005::1 ffff:ffff:ffff:ffff:0:0:0:0 2006::1 ffff:ffff:ffff:0:0:0:0:0 2007::1 ffff:ffff:0:0:0:0:0:0 2008::1 ffff:0:0:0:0:0:0:0
    Should be True  ${result2}
    ${result3}=  rest delete bigchain address group  chain_addressgrp_name=${addressgrp_name}
    Should be True  ${result2}
    [Tags]  feature

TC027: Service Policy: Verify match condition can use IPv4 address-groups
    ${result1}=  rest add bigchain address group  chain_addressgrp_name=${addressgrp_name}  chain_addressgrp_data=100.1.1.1 255.255.255.255 101.1.1.1 255.255.255.252 102.1.1.1 255.255.255.248 103.1.1.1 255.255.255.240 104.1.1.1 255.255.255.224 105.1.1.1 255.255.255.192 106.1.1.1 255.255.255.128 107.1.1.1 255.255.255.0 108.1.1.1 255.255.254.0 109.1.1.1 255.255.252.0 110.1.1.1 255.255.248.0 111.1.1.1 255.255.240.0 112.1.1.1 255.255.224.0 113.1.1.1 255.255.192.0 114.1.1.1 255.255.128.0 115.1.1.1 255.255.0.0
    Should be True  ${result1}
    sleep  2
    ${result2}=  rest verify bigchain address group  chain_addressgrp_name=${addressgrp_name}  chain_addressgrp_data=100.1.1.1 255.255.255.255 101.1.1.1 255.255.255.252 102.1.1.1 255.255.255.248 103.1.1.1 255.255.255.240 104.1.1.1 255.255.255.224 105.1.1.1 255.255.255.192 106.1.1.1 255.255.255.128 107.1.1.1 255.255.255.0 108.1.1.1 255.255.254.0 109.1.1.1 255.255.252.0 110.1.1.1 255.255.248.0 111.1.1.1 255.255.240.0 112.1.1.1 255.255.224.0 113.1.1.1 255.255.192.0 114.1.1.1 255.255.128.0 115.1.1.1 255.255.0.0
    Should be True  ${result2}
    sleep  5
    config  node=master  cmd=bigchain service ${service_name}
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    config  node=master  cmd=description TestBigChainService
    ${content2}=  cli_content  node=master
    Should Not Contain  ${content2}  Error
    config  node=master  cmd=instance 1
    ${content3}=  cli_content  node=master
    Should Not Contain  ${content3}  Error
    config  node=master  cmd=interface-pair switch ${switch1_alias} in ${service_in_interface1} out ${service_out_interface1}
    ${content4}=  cli_content  node=master
    Should Not Contain  ${content4}  Error
    config  node=master  cmd=exit
    config  node=master  cmd=1 match ip src-ip ${addressgrp_name}
    sleep  5
    ${result1}=  rest verify bigchain service policy  chain_service_name=${service_name}  sequence=1  data=ether-type 2048 sequence 1 src-ip-list ${addressgrp_name}
    Should be True  ${result1}
    [Tags]  feature

TC028: Service Policy: Verify match condition can use IPv6 address-groups
    ${result1}=  rest add bigchain address group  chain_addressgrp_name=${addressgrp_name}  chain_addressgrp_type=ipv6  chain_addressgrp_data=2001::1 ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff 2002::1 ffff:ffff:ffff:ffff:ffff:ffff:ffff:0 2003::1 ffff:ffff:ffff:ffff:ffff:ffff:0:0 2004::1 ffff:ffff:ffff:ffff:ffff:0:0:0 2005::1 ffff:ffff:ffff:ffff:0:0:0:0 2006::1 ffff:ffff:ffff:0:0:0:0:0 2007::1 ffff:ffff:0:0:0:0:0:0 2008::1 ffff:0:0:0:0:0:0:0
    Should be True  ${result1}
    sleep  2
    ${result2}=  rest verify bigchain address group  chain_addressgrp_name=${addressgrp_name}  chain_addressgrp_type=ipv6  chain_addressgrp_data=2001::1 ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff 2002::1 ffff:ffff:ffff:ffff:ffff:ffff:ffff:0 2003::1 ffff:ffff:ffff:ffff:ffff:ffff:0:0 2004::1 ffff:ffff:ffff:ffff:ffff:0:0:0 2005::1 ffff:ffff:ffff:ffff:0:0:0:0 2006::1 ffff:ffff:ffff:0:0:0:0:0 2007::1 ffff:ffff:0:0:0:0:0:0 2008::1 ffff:0:0:0:0:0:0:0
    Should be True  ${result2}
    sleep  5
    config  node=master  cmd=bigchain service ${service_name}
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    config  node=master  cmd=description TestBigChainService
    ${content2}=  cli_content  node=master
    Should Not Contain  ${content2}  Error
    config  node=master  cmd=instance 1
    ${content3}=  cli_content  node=master
    Should Not Contain  ${content3}  Error
    config  node=master  cmd=interface-pair switch ${switch1_alias} in ${service_in_interface1} out ${service_out_interface1}
    ${content4}=  cli_content  node=master
    Should Not Contain  ${content4}  Error
    config  node=master  cmd=exit
    config  node=master  cmd=1 match ip6 src-ip ${addressgrp_name}
    sleep  5
    ${result1}=  rest verify bigchain service policy  chain_service_name=${service_name}  sequence=1  data=ether-type 34525 sequence 1 src-ip-list ${addressgrp_name}
    Should be True  ${result1}
    [Tags]  feature

TC029: Service Policy: Verify traffic that does not match the policy bypasses the service.
    config  node=master  cmd=bigchain service ${service_name}
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    config  node=master  cmd=description TestBigChainService
    ${content2}=  cli_content  node=master
    Should Not Contain  ${content2}  Error
    config  node=master  cmd=instance 1
    ${content3}=  cli_content  node=master
    Should Not Contain  ${content3}  Error
    config  node=master  cmd=interface-pair switch ${switch1_alias} in ${service_in_interface1} out ${service_out_interface1}
    ${content4}=  cli_content  node=master
    Should Not Contain  ${content4}  Error
    config  node=master  cmd=exit
    config  node=master  cmd=1 match ip6
    ${content6}=  cli_content  node=master
    Should Not Contain  ${content6}  Error
    config  node=master  cmd=exit
    sleep  5
    config  node=master  cmd=bigchain chain ${chain_name}
    ${content7}=  cli_content  node=master
    Should Not Contain  ${content7}  Error
    config  node=master  cmd=endpoint-pair switch ${switch1_alias} endpoint1 ${chain_interface_1} endpoint2 ${chain_interface_2}
    ${content8}=  cli_content  node=master
    Should Not Contain  ${content8}  Error
    config  node=master  cmd=use-service ${service_name} instance 1 sequence 1
    ${content9}=  cli_content  node=master
    Should Not Contain  ${content9}  Error
    sleep  5
    ${result1}=  rest verify bigchain service policy  chain_service_name=${service_name}  sequence=1  data=ether-type 34525 sequence 1
    Should be True  ${result1}
    ${stream_l3_as5710}=  L3 add  flow=a->b  frame_cnt=100000  frame_rate=10000  frame_size=9150
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=100.1.1.1  dst_ip=100.1.1.2  name=a_b_flow
    clear stats
    cli clear interface statistics  s1
    start traffic  ${stream_l3_as5710}
    sleep  10
    stop traffic  ${stream_l3_as5710}
    ${intf_1}=  cli return interface counter brief  s1  ${service_in_interface1}  tx
    Should Be True  ${intf_1} < 100
    ${intf_2}=  cli return interface counter brief  s1  ${service_out_interface1}  rx
    Should Be True  ${intf_2} < 100
    [Tags]  feature  jira-pan-1601

TC030: Service Policy: Verify with traffic, action do-service
    config  node=master  cmd=bigchain service ${service_name}
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    config  node=master  cmd=description TestBigChainService
    ${content2}=  cli_content  node=master
    Should Not Contain  ${content2}  Error
    config  node=master  cmd=instance 1
    ${content3}=  cli_content  node=master
    Should Not Contain  ${content3}  Error
    config  node=master  cmd=interface-pair switch ${switch1_alias} in ${service_in_interface1} out ${service_out_interface1}
    ${content4}=  cli_content  node=master
    Should Not Contain  ${content4}  Error
    config  node=master  cmd=exit
    config  node=master  cmd=1 match ip src-ip 100.1.1.1 255.255.255.255
    ${content6}=  cli_content  node=master
    Should Not Contain  ${content6}  Error
    config  node=master  cmd=action do-service
    ${content6A}=  cli_content  node=master
    Should Not Contain  ${content6A}  Error
    config  node=master  cmd=exit
    sleep  5
    config  node=master  cmd=bigchain chain ${chain_name}
    ${content7}=  cli_content  node=master
    Should Not Contain  ${content7}  Error
    config  node=master  cmd=endpoint-pair switch ${switch1_alias} endpoint1 ${chain_interface_1} endpoint2 ${chain_interface_2}
    ${content8}=  cli_content  node=master
    Should Not Contain  ${content8}  Error
    config  node=master  cmd=use-service ${service_name} instance 1 sequence 1
    ${content9}=  cli_content  node=master
    Should Not Contain  ${content9}  Error
    sleep  30
    
    ${result1}=  rest verify bigchain service policy  chain_service_name=${service_name}  sequence=1  data=ether-type 2048 sequence 1 src-ip 100.1.1.1 src-ip-mask 255.255.255.255
    Should be True  ${result1}
    ${stream_l3_as5710}=  L3 add  flow=a->b  frame_cnt=100000  frame_rate=10000  frame_size=64
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=100.1.1.1  dst_ip=100.1.1.2  name=a_b_flow
    clear stats
    cli clear interface statistics  s1
    start traffic  ${stream_l3_as5710}
    sleep  10
    stop traffic  ${stream_l3_as5710}
    ${intf_1}=  cli return interface counter brief  s1  ${service_in_interface1}  tx
    Should Be True  ${intf_1} > 99990
    Should Be True  ${intf_1} < 100100
    ${intf_2}=  cli return interface counter brief  s1  ${service_out_interface1}  rx
    Should Be True  ${intf_2} > 99990
    Should Be True  ${intf_2} < 100100
    [Tags]  feature

TC031: Service Policy: Verify with traffic, action drop
    config  node=master  cmd=bigchain service ${service_name}
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    config  node=master  cmd=description TestBigChainService
    ${content2}=  cli_content  node=master
    Should Not Contain  ${content2}  Error
    config  node=master  cmd=instance 1
    ${content3}=  cli_content  node=master
    Should Not Contain  ${content3}  Error
    config  node=master  cmd=interface-pair switch ${switch1_alias} in ${service_in_interface1} out ${service_out_interface1}
    ${content4}=  cli_content  node=master
    Should Not Contain  ${content4}  Error
    config  node=master  cmd=exit
    config  node=master  cmd=1 match ip src-ip 100.1.1.1 255.255.255.255
    ${content6}=  cli_content  node=master
    Should Not Contain  ${content6}  Error
    config  node=master  cmd=action drop
    ${content6A}=  cli_content  node=master
    Should Not Contain  ${content6A}  Error
    config  node=master  cmd=exit
    sleep  5
    config  node=master  cmd=bigchain chain ${chain_name}
    ${content7}=  cli_content  node=master
    Should Not Contain  ${content7}  Error
    config  node=master  cmd=endpoint-pair switch ${switch1_alias} endpoint1 ${chain_interface_1} endpoint2 ${chain_interface_2}
    ${content8}=  cli_content  node=master
    Should Not Contain  ${content8}  Error
    config  node=master  cmd=use-service ${service_name} instance 1 sequence 1
    ${content9}=  cli_content  node=master
    Should Not Contain  ${content9}  Error
    sleep  5
    ${result1}=  rest verify bigchain service policy  chain_service_name=${service_name}  sequence=1  data=ether-type 2048 sequence 1 src-ip 100.1.1.1 src-ip-mask 255.255.255.255
    Should be True  ${result1}
    ${stream_l3_as5710}=  L3 add  flow=a->b  frame_cnt=100000  frame_rate=10000  frame_size=9150
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=100.1.1.1  dst_ip=100.1.1.2  name=a_b_flow
    clear stats
    cli clear interface statistics  s1
    start traffic  ${stream_l3_as5710}
    sleep  10
    stop traffic  ${stream_l3_as5710}
    ${intf_1}=  cli return interface counter brief  s1  ${service_in_interface1}  tx
    Should Be True  ${intf_1} < 100
    ${intf_2}=  cli return interface counter brief  s1  ${service_out_interface1}  rx
    Should Be True  ${intf_2} < 100
    ${intf_3}=  cli return interface counter brief  s1  ${chain_interface_1}  rx
    Should Be True  ${intf_3} > 99990
    ${intf_4}=  cli return interface counter brief  s1  ${service_out_interface1}  tx
    Should Be True  ${intf_4} < 100
    [Tags]  feature  jira-bt-1841

TC032: Service Policy: Verify changing policy action changes behavior immediately.
    add a service and attach it to a chain via rest  {"src-ip-mask": "255.255.255.255", "sequence": 1, "src-ip": "100.1.1.1", "ether-type": 2048}
    sleep  10
    ${result1}=  rest verify bigchain service policy  chain_service_name=${service_name}  sequence=1  data=ether-type 2048 sequence 1 src-ip 100.1.1.1 src-ip-mask 255.255.255.255
    Should be True  ${result1}
    ${stream_l3_as5710}=  L3 add  flow=a->b  frame_cnt=100000  frame_rate=10000  frame_size=9150
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=100.1.1.1  dst_ip=100.1.1.2  name=a_b_flow
    clear stats
    cli clear interface statistics  s1
    start traffic  ${stream_l3_as5710}
    sleep  10
    stop traffic  ${stream_l3_as5710}
    ${intf_1}=  cli return interface counter brief  s1  ${service_in_interface1}  tx
    Should Be True  ${intf_1} > 99990
    Should Be True  ${intf_1} < 100100
    ${intf_2}=  cli return interface counter brief  s1  ${service_out_interface1}  rx
    Should Be True  ${intf_2} > 99990
    Should Be True  ${intf_2} < 100100
    ${result2}=  rest update bigchain policy action  chain_service_name=${service_name}  policy_action=drop
    Should be True  ${result2}
    sleep  10
    clear stats
    cli clear interface statistics  s1
    start traffic  ${stream_l3_as5710}
    sleep  10
    stop traffic  ${stream_l3_as5710}
    ${intf_1}=  cli return interface counter brief  s1  ${service_in_interface1}  tx
    Should Be True  ${intf_1} < 100
    ${intf_2}=  cli return interface counter brief  s1  ${service_out_interface1}  rx
    Should Be True  ${intf_2} < 100
    ${intf_3}=  cli return interface counter brief  s1  ${chain_interface_1}  rx
    Should Be True  ${intf_3} > 99990
    ${intf_4}=  cli return interface counter brief  s1  ${service_out_interface1}  tx
    Should Be True  ${intf_4} < 100
    [Tags]  feature
    
TC033: Change policy match condition and verify behavior. Verify flow installed on switch also changes.
    add a service and attach it to a chain via rest  {"src-ip-mask": "255.255.255.255", "sequence": 1, "src-ip": "100.1.1.1", "ether-type": 2048}
    sleep  10
    ${result1}=  rest verify bigchain service policy  chain_service_name=${service_name}  sequence=1  data=ether-type 2048 sequence 1 src-ip 100.1.1.1 src-ip-mask 255.255.255.255
    Should be True  ${result1}
    ${stream_l3_as5710}=  L3 add  flow=a->b  frame_cnt=100000  frame_rate=10000  frame_size=9150
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=100.1.1.1  dst_ip=100.1.1.2  name=a_b_flow
    clear stats
    cli clear interface statistics  s1
    start traffic  ${stream_l3_as5710}
    sleep  10
    stop traffic  ${stream_l3_as5710}
    ${intf_1}=  cli return interface counter brief  s1  ${service_in_interface1}  tx
    Should Be True  ${intf_1} > 99990
    Should Be True  ${intf_1} < 100100
    ${intf_2}=  cli return interface counter brief  s1  ${service_out_interface1}  rx
    Should Be True  ${intf_2} > 99990
    Should Be True  ${intf_2} < 100100
    ${result2}=  rest add a bigchain policy match  chain_service_name=${service_name}  match_number=1  data={"dst-ip-mask": "255.255.255.255", "sequence": 1, "dst-ip": "100.1.1.2", "ether-type": 2048}
    Should be True  ${result2}
    sleep  10
    clear stats
    cli clear interface statistics  s1
    start traffic  ${stream_l3_as5710}
    sleep  10
    stop traffic  ${stream_l3_as5710}
    ${intf_1}=  cli return interface counter brief  s1  ${service_in_interface1}  tx
    Should Be True  ${intf_1} > 99990
    Should Be True  ${intf_1} < 100100
    ${intf_2}=  cli return interface counter brief  s1  ${service_out_interface1}  rx
    Should Be True  ${intf_2} > 99990
    Should Be True  ${intf_2} < 100100
    ${intf_3}=  cli return interface counter brief  s1  ${chain_interface_1}  rx
    Should Be True  ${intf_3} > 99990
    ${intf_4}=  cli return interface counter brief  s1  ${chain_interface_2}  tx
    Should Be True  ${intf_4} > 99990
    ${result3}=  rest add a bigchain policy match  chain_service_name=${service_name}  match_number=1  data={"src-ip-mask": "255.255.255.255", "sequence": 1, "src-ip": "110.1.1.1", "ether-type": 2048}
    Should be True  ${result3}
    sleep  10
    clear stats
    cli clear interface statistics  s1
    start traffic  ${stream_l3_as5710}
    sleep  10
    stop traffic  ${stream_l3_as5710}
    ${intf_1}=  cli return interface counter brief  s1  ${service_in_interface1}  tx
    Should Be True  ${intf_1} < 100
    ${intf_2}=  cli return interface counter brief  s1  ${service_out_interface1}  rx
    Should Be True  ${intf_2} < 100
    ${intf_3}=  cli return interface counter brief  s1  ${chain_interface_1}  rx
    Should Be True  ${intf_3} > 99990
    ${intf_4}=  cli return interface counter brief  s1  ${chain_interface_2}  tx
    Should Be True  ${intf_4} > 99990
    [Tags]  feature

TC034: Service Policy: Verify match on src-mac should not be configurable as default match mode is L3-L4 match mode.
    config  node=master  cmd=bigchain service ${service_name}
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    config  node=master  cmd=description TestBigChainService
    ${content2}=  cli_content  node=master
    Should Not Contain  ${content2}  Error
    config  node=master  cmd=instance 1
    ${content3}=  cli_content  node=master
    Should Not Contain  ${content3}  Error
    config  node=master  cmd=interface-pair switch ${switch1_alias} in ${service_in_interface1} out ${service_out_interface1}
    ${content4}=  cli_content  node=master
    Should Not Contain  ${content4}  Error
    config  node=master  cmd=exit
    config  node=master  cmd=1 match full src-mac 00:11:01:01:01:01
    ${content6}=  cli_content  node=master
    Should Contain  ${content6}  Error
    [Tags]  negative

TC035: Service Policy: Verify match on dst-mac should not be configurable as default match mode is L3-L4 match mode.
    config  node=master  cmd=bigchain service ${service_name}
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    config  node=master  cmd=description TestBigChainService
    ${content2}=  cli_content  node=master
    Should Not Contain  ${content2}  Error
    config  node=master  cmd=instance 1
    ${content3}=  cli_content  node=master
    Should Not Contain  ${content3}  Error
    config  node=master  cmd=interface-pair switch ${switch1_alias} in ${service_in_interface1} out ${service_out_interface1}
    ${content4}=  cli_content  node=master
    Should Not Contain  ${content4}  Error
    config  node=master  cmd=exit
    config  node=master  cmd=1 match full dst-mac 00:11:01:01:01:01
    ${content6}=  cli_content  node=master
    Should Contain  ${content6}  Error
    [Tags]  negative  runthis
    
TC036: Service Instance: Verify a bigchain service can be added to a bigchain chain via cli
    add a service and attach it to a chain via cli
    ${result1}=  rest verify bigchain chain  s1  chain_name=${chain_name}  interface1=${chain_interface_1}  interface2=${chain_interface_2}  service1=${service_name}
    Should be true  ${result1}
    ${stream_l3_as5710}=  L3 add  flow=a->b  frame_cnt=100000  frame_rate=10000  frame_size=9150  
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=100.1.1.1  dst_ip=100.1.1.2  name=a_b_flow
    clear stats  
    start traffic  ${stream_l3_as5710}
    sleep  10
    stop traffic  ${stream_l3_as5710}
    verify results  a  b  transmitted_frames  received_valid_frames
    [Tags]  feature  jira-pan-1601  runthis
    
TC037: Service Instance: Verify a bigchain service can be added to a bigchain chain via rest
    add a service and attach it to a chain via rest  {"ether-type": 2048, "dst-tp-port": 80, "ip-proto": 6, "sequence": 1}
    ${result1}=  rest verify bigchain chain  s1  chain_name=${chain_name}  interface1=${chain_interface_1}  interface2=${chain_interface_2}  service1=${service_name}
    Should be true  ${result1}
    ${stream_l3_as5710}=  L3 add  flow=a->b  line_rate=100  frame_size=9150  
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=100.1.1.1  dst_ip=100.1.1.2  name=a_b_flow
    clear stats  
    start traffic  ${stream_l3_as5710}
    sleep  10
    verify results  a  b  transmitted_frame_rate  received_frame_rate        
    stop traffic  ${stream_l3_as5710}
    [Tags]  feature  jira-pan-1601  runthis

TC038: Verify multiple services can be created
    ## Service #1
    ${result1}=  rest add a bigchain service  chain_service_name=${service_name}  service_type=custom  instance_id=1
    Should be True  ${result1}
    ${result2}=  rest add a bigchain service description  chain_service_name=${service_name}  descrption=TestBigChainService1
    Should be True  ${result2}
    ${result3}=  rest add a bigchain service instance interface pair  node=s1  chain_service_name=${service_name}  instance_id=1  inintf=${service_in_interface1}  outintf=${service_out_interface1}
    Should be True  ${result3}
    ${result4}=  rest update bigchain policy action  chain_service_name=${service_name}
    Should be True  ${result4}
    ${result5}=  rest add a bigchain policy match  chain_service_name=${service_name}  match_number=1  data={"src-ip-mask": "255.255.255.255", "sequence": 1, "src-ip": "100.1.1.1", "ether-type": 2048}
    Should be True  ${result5}
    ## Service #2
    ${result1}=  rest add a bigchain service  chain_service_name=${service_name2}  service_type=custom  instance_id=1
    Should be True  ${result1}
    ${result2}=  rest add a bigchain service description  chain_service_name=${service_name2}  descrption=TestBigChainService2
    Should be True  ${result2}
    ${result3}=  rest add a bigchain service instance interface pair  node=s1  chain_service_name=${service_name2}  instance_id=1  inintf=${service_in_interface2}  outintf=${service_out_interface2}
    Should be True  ${result3}
    ${result4}=  rest update bigchain policy action  chain_service_name=${service_name2}
    Should be True  ${result4}
    ${result5}=  rest add a bigchain policy match  chain_service_name=${service_name2}  match_number=1  data={"src-ip-mask": "255.255.255.255", "sequence": 1, "src-ip": "101.1.1.1", "ether-type": 2048}
    Should be True  ${result5}
    ## Service #3
    ${result1}=  rest add a bigchain service  chain_service_name=${service_name3}  service_type=custom  instance_id=1
    Should be True  ${result1}
    ${result2}=  rest add a bigchain service description  chain_service_name=${service_name3}  descrption=TestBigChainService3
    Should be True  ${result2}
    ${result3}=  rest add a bigchain service instance interface pair  node=s1  chain_service_name=${service_name3}  instance_id=1  inintf=${service_in_interface3}  outintf=${service_out_interface3}
    Should be True  ${result3}
    ${result4}=  rest update bigchain policy action  chain_service_name=${service_name3}
    Should be True  ${result4}
    ${result5}=  rest add a bigchain policy match  chain_service_name=${service_name3}  match_number=1  data={"src-ip-mask": "255.255.255.255", "sequence": 1, "src-ip": "102.1.1.1", "ether-type": 2048}
    Should be True  ${result5}
    sleep  10
    ${output1}=  rest verify bigchain service instance  node=s1  chain_service_name=${service_name}  chain_service_type=custom  instance_id=1  inport=${service_in_interface1}  outport=${service_out_interface1}  chain_service_description=TestBigChainService1
    Should be True  ${output1}
    ${output2}=  rest verify bigchain service instance  node=s1  chain_service_name=${service_name2}  chain_service_type=custom  instance_id=1  inport=${service_in_interface2}  outport=${service_out_interface2}  chain_service_description=TestBigChainService2
    Should be True  ${output2}    
    ${output3}=  rest verify bigchain service instance  node=s1  chain_service_name=${service_name3}  chain_service_type=custom  instance_id=1  inport=${service_in_interface3}  outport=${service_out_interface3}  chain_service_description=TestBigChainService3
    Should be True  ${output3}
    [Tags]  feature  runthis
    
TC039: Verify multiple instances can be created in a given service
    ${result1}=  rest add a bigchain service  chain_service_name=${service_name}  service_type=custom  instance_id=1
    Should be True  ${result1}
    ${result2}=  rest add a bigchain service description  chain_service_name=${service_name}  descrption=TestBigChainService1
    Should be True  ${result2}
    ${result3}=  rest update bigchain policy action  chain_service_name=${service_name}
    Should be True  ${result3}
    ${result4}=  rest add a bigchain policy match  chain_service_name=${service_name}  match_number=1  data={"src-ip-mask": "255.255.255.255", "sequence": 1, "src-ip": "100.1.1.1", "ether-type": 2048}
    Should be True  ${result4}
    sleep  5
    ## Instance #1
    ${result5}=  rest add a bigchain service instance interface pair  node=s1  chain_service_name=${service_name}  instance_id=1  inintf=${service_in_interface1}  outintf=${service_out_interface1}
    Should be True  ${result5}
    ## Instance #2
    ${result6}=  rest add a bigchain service instance interface pair  node=s1  chain_service_name=${service_name}  instance_id=2  inintf=${service_in_interface2}  outintf=${service_out_interface2}
    Should be True  ${result6}
    ## Instance #3
    ${result7}=  rest add a bigchain service instance interface pair  node=s1  chain_service_name=${service_name}  instance_id=3  inintf=${service_in_interface3}  outintf=${service_out_interface3}
    Should be True  ${result7}
    ## Instance #4
    ${result8}=  rest add a bigchain service instance interface pair  node=s1  chain_service_name=${service_name}  instance_id=4  inintf=${service_in_interface4}  outintf=${service_out_interface4}
    Should be True  ${result8}
    ## Instance #5
    ${result9}=  rest add a bigchain service instance interface pair  node=s1  chain_service_name=${service_name}  instance_id=5  inintf=${service_in_interface5}  outintf=${service_out_interface5}
    Should be True  ${result9}
    sleep  10
    ${output1}=  rest verify bigchain service instance  node=s1  chain_service_name=${service_name}  chain_service_type=custom  instance_id=1  inport=${service_in_interface1}  outport=${service_out_interface1}  chain_service_description=TestBigChainService1
    Should be True  ${output1}
    ${output2}=  rest verify bigchain service instance  node=s1  chain_service_name=${service_name}  chain_service_type=custom  instance_id=2  inport=${service_in_interface2}  outport=${service_out_interface2}  chain_service_description=TestBigChainService1
    Should be True  ${output2}    
    ${output3}=  rest verify bigchain service instance  node=s1  chain_service_name=${service_name}  chain_service_type=custom  instance_id=3  inport=${service_in_interface3}  outport=${service_out_interface3}  chain_service_description=TestBigChainService1
    Should be True  ${output3}
    ${output4}=  rest verify bigchain service instance  node=s1  chain_service_name=${service_name}  chain_service_type=custom  instance_id=4  inport=${service_in_interface4}  outport=${service_out_interface4}  chain_service_description=TestBigChainService1
    Should be True  ${output4}
    ${output5}=  rest verify bigchain service instance  node=s1  chain_service_name=${service_name}  chain_service_type=custom  instance_id=5  inport=${service_in_interface5}  outport=${service_out_interface5}  chain_service_description=TestBigChainService1
    Should be True  ${output5}
    [Tags]  feature  runthis
 
TC040: Verify multiple chains cannot use same instance of a service
     ## Create a Service
    ${result1}=  rest add a bigchain service  chain_service_name=${service_name}  service_type=custom  instance_id=1
    Should be True  ${result1}
    ${result2}=  rest add a bigchain service description  chain_service_name=${service_name}  descrption=TestBigChainService1
    Should be True  ${result2}
    ${result3}=  rest add a bigchain service instance interface pair  node=s1  chain_service_name=${service_name}  instance_id=1  inintf=${service_in_interface1}  outintf=${service_out_interface1}
    Should be True  ${result3}
    ${result4}=  rest update bigchain policy action  chain_service_name=${service_name}
    Should be True  ${result4}
    ${result5}=  rest add a bigchain policy match  chain_service_name=${service_name}  match_number=1  data={"src-ip-mask": "255.255.255.255", "sequence": 1, "src-ip": "100.1.1.1", "ether-type": 2048}
    Should be True  ${result5}
    sleep  10
    ### Add service and instance 1 to CHAIN1-- This should work
    ${output1}=  rest verify bigchain service instance  node=s1  chain_service_name=${service_name}  chain_service_type=custom  instance_id=1  inport=${service_in_interface1}  outport=${service_out_interface1}  chain_service_description=TestBigChainService1
    Should be True  ${output1}
    ${result6}=  rest add a chain  chain_name=${chain_name}
    Should be True  ${result6}
    ${result7}=  rest add chain endpoint  s1  chain_name=${chain_name}  interface1=${chain_interface_1}  interface2=${chain_interface_2}
    Should be True  ${result7}
    ${result8}=  rest add service to chain  chain_name=${chain_name}  service_name=${service_name}  instance=1  sequence=1
    Should be True  ${result8}
    sleep  5
    ### Add service and instance 1 to CHAIN2-- This should not work
    ${result9}=  rest add a chain  chain_name=${chain_name2}
    Should be True  ${result9}
    ${result10}=  rest add chain endpoint  s1  chain_name=${chain_name2}  interface1=${chain_interface_3}  interface2=${chain_interface_4}
    Should be True  ${result10}
    ${result11}=  rest add service to chain  chain_name=${chain_name2}  service_name=${service_name}  instance=1  sequence=1
    Should not be True  ${result11}
    [Tags]  feature  runthis
    
TC041: For a mandatory service, verify chain is disabled when a service instance in-interface goes down
    add a service and attach it to a chain via rest  {"src-ip-mask": "255.255.255.255", "sequence": 1, "src-ip": "100.1.1.1", "ether-type": 2048}
    ${result1}=  rest verify bigchain chain  s1  chain_name=${chain_name}  interface1=${chain_interface_1}  interface2=${chain_interface_2}  service1=${service_name}
    Should be true  ${result1}
    ${stream_l3_as5710}=  L3 add  flow=a->b  frame_cnt=100000  frame_rate=10000  frame_size=9150
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=100.1.1.1  dst_ip=100.1.1.2  name=a_b_flow
    clear stats
    cli clear interface statistics  s1
    start traffic  ${stream_l3_as5710}
    sleep  10
    stop traffic  ${stream_l3_as5710}
    ${intf_1}=  cli return interface counter brief  s1  ${service_in_interface1}  tx
    Should Be True  ${intf_1} > 99990
    Should Be True  ${intf_1} < 100100
    ${intf_2}=  cli return interface counter brief  s1  ${service_out_interface1}  rx
    Should Be True  ${intf_2} > 99990
    Should Be True  ${intf_2} < 100100
    ${intf_3}=  cli return interface counter brief  s1  ${chain_interface_2}  tx
    Should Be True  ${intf_3} > 99990
    Should Be True  ${intf_3} < 100100
    ${intf_4}=  cli return interface counter brief  s1  ${chain_interface_1}  rx
    Should Be True  ${intf_4} > 99990
    Should Be True  ${intf_4} < 100100
    ### Now disable the in-interface of the service
    ${ret_value_1}=  cli disable interface  s1  ${service_in_interface1}
    Should Be True  ${ret_value_1}
    sleep  5
    ${result1}=  rest verify bigchain chain  s1  chain_name=${chain_name}  interface1=${chain_interface_1}  interface2=${chain_interface_2}  service1=${service_name}
    Should not be true  ${result1}
    clear stats
    cli clear interface statistics  s1
    start traffic  ${stream_l3_as5710}
    sleep  10
    stop traffic  ${stream_l3_as5710}
    ${intf_1}=  cli return interface counter brief  s1  ${service_in_interface1}  tx
    Should Be True  ${intf_1} < 100
    ${intf_2}=  cli return interface counter brief  s1  ${service_out_interface1}  rx
    Should Be True  ${intf_2} < 100
    ${intf_3}=  cli return interface counter brief  s1  ${chain_interface_1}  rx
    Should Be True  ${intf_3} > 99990
    ${intf_4}=  cli return interface counter brief  s1  ${chain_interface_2}  tx
    Should Be True  ${intf_4} < 100
    ### Re-enable the in-interface of the service
    ${ret_value_1}=  cli enable interface  s1  ${service_in_interface1}
    Should Be True  ${ret_value_1}
    sleep  5
    clear stats
    cli clear interface statistics  s1
    start traffic  ${stream_l3_as5710}
    sleep  10
    stop traffic  ${stream_l3_as5710}
    ${intf_1}=  cli return interface counter brief  s1  ${service_in_interface1}  tx
    Should Be True  ${intf_1} > 99990
    Should Be True  ${intf_1} < 100100
    ${intf_2}=  cli return interface counter brief  s1  ${service_out_interface1}  rx
    Should Be True  ${intf_2} > 99990
    Should Be True  ${intf_2} < 100100
    ${intf_3}=  cli return interface counter brief  s1  ${chain_interface_2}  tx
    Should Be True  ${intf_3} > 99990
    Should Be True  ${intf_3} < 100100
    ${intf_4}=  cli return interface counter brief  s1  ${chain_interface_1}  rx
    Should Be True  ${intf_4} > 99990
    Should Be True  ${intf_4} < 100100
    [Tags]  feature  runthis

TC042: For a mandatory service, verify chain is disabled when a service instance out-interface goes down
    add a service and attach it to a chain via rest  {"src-ip-mask": "255.255.255.255", "sequence": 1, "src-ip": "100.1.1.1", "ether-type": 2048}
    ${result1}=  rest verify bigchain chain  s1  chain_name=${chain_name}  interface1=${chain_interface_1}  interface2=${chain_interface_2}  service1=${service_name}
    Should be true  ${result1}
    ${stream_l3_as5710}=  L3 add  flow=a->b  frame_cnt=100000  frame_rate=10000  frame_size=9150
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=100.1.1.1  dst_ip=100.1.1.2  name=a_b_flow
    clear stats
    cli clear interface statistics  s1
    start traffic  ${stream_l3_as5710}
    sleep  10
    stop traffic  ${stream_l3_as5710}
    ${intf_1}=  cli return interface counter brief  s1  ${service_in_interface1}  tx
    Should Be True  ${intf_1} > 99990
    Should Be True  ${intf_1} < 100100
    ${intf_2}=  cli return interface counter brief  s1  ${service_out_interface1}  rx
    Should Be True  ${intf_2} > 99990
    Should Be True  ${intf_2} < 100100
    ${intf_3}=  cli return interface counter brief  s1  ${chain_interface_2}  tx
    Should Be True  ${intf_3} > 99990
    Should Be True  ${intf_3} < 100100
    ${intf_4}=  cli return interface counter brief  s1  ${chain_interface_1}  rx
    Should Be True  ${intf_4} > 99990
    Should Be True  ${intf_4} < 100100
    ### Now disable the in-interface of the service
    ${ret_value_1}=  cli disable interface  s1  ${service_out_interface1}
    Should Be True  ${ret_value_1}
    sleep  5
    ${result1}=  rest verify bigchain chain  s1  chain_name=${chain_name}  interface1=${chain_interface_1}  interface2=${chain_interface_2}  service1=${service_name}
    Should not be true  ${result1}
    clear stats
    cli clear interface statistics  s1
    start traffic  ${stream_l3_as5710}
    sleep  10
    stop traffic  ${stream_l3_as5710}
    ${intf_1}=  cli return interface counter brief  s1  ${service_in_interface1}  tx
    Should Be True  ${intf_1} < 100
    ${intf_2}=  cli return interface counter brief  s1  ${service_out_interface1}  rx
    Should Be True  ${intf_2} < 100
    ${intf_3}=  cli return interface counter brief  s1  ${chain_interface_1}  rx
    Should Be True  ${intf_3} > 99990
    ${intf_4}=  cli return interface counter brief  s1  ${chain_interface_2}  tx
    Should Be True  ${intf_4} < 100
    ### Re-enable the in-interface of the service
    ${ret_value_1}=  cli enable interface  s1  ${service_out_interface1}
    Should Be True  ${ret_value_1}
    sleep  5
    clear stats
    cli clear interface statistics  s1
    start traffic  ${stream_l3_as5710}
    sleep  10
    stop traffic  ${stream_l3_as5710}
    ${intf_1}=  cli return interface counter brief  s1  ${service_in_interface1}  tx
    Should Be True  ${intf_1} > 99990
    Should Be True  ${intf_1} < 100100
    ${intf_2}=  cli return interface counter brief  s1  ${service_out_interface1}  rx
    Should Be True  ${intf_2} > 99990
    Should Be True  ${intf_2} < 100100
    ${intf_3}=  cli return interface counter brief  s1  ${chain_interface_2}  tx
    Should Be True  ${intf_3} > 99990
    Should Be True  ${intf_3} < 100100
    ${intf_4}=  cli return interface counter brief  s1  ${chain_interface_1}  rx
    Should Be True  ${intf_4} > 99990
    Should Be True  ${intf_4} < 100100
    [Tags]  feature  runthis

TC043: For an optional service,verify service instance is bypassed when a service instance in-interface goes down
    add a service and attach it to a chain via rest  {"src-ip-mask": "255.255.255.255", "sequence": 1, "src-ip": "100.1.1.1", "ether-type": 2048}
    ${result1}=  rest verify bigchain chain  s1  chain_name=${chain_name}  interface1=${chain_interface_1}  interface2=${chain_interface_2}  service1=${service_name}
    Should be true  ${result1}
    ${result2}=  rest add service to chain  chain_name=${chain_name}  service_name=${service_name}  instance=1  sequence=1  optional=${true}
    Should be True  ${result2}
    sleep  5
    ${result3}=  rest verify bigchain chain  s1  chain_name=${chain_name}  interface1=${chain_interface_1}  interface2=${chain_interface_2}  service1=${service_name}
    Should be true  ${result3}
    ${stream_l3_as5710}=  L3 add  flow=a->b  frame_cnt=100000  frame_rate=10000  frame_size=9150
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=100.1.1.1  dst_ip=100.1.1.2  name=a_b_flow
    clear stats
    cli clear interface statistics  s1
    start traffic  ${stream_l3_as5710}
    sleep  10
    stop traffic  ${stream_l3_as5710}
    ${intf_1}=  cli return interface counter brief  s1  ${service_in_interface1}  tx
    Should Be True  ${intf_1} > 99990
    Should Be True  ${intf_1} < 100100
    ${intf_2}=  cli return interface counter brief  s1  ${service_out_interface1}  rx
    Should Be True  ${intf_2} > 99990
    Should Be True  ${intf_2} < 100100
    ${intf_3}=  cli return interface counter brief  s1  ${chain_interface_2}  tx
    Should Be True  ${intf_3} > 99990
    Should Be True  ${intf_3} < 100100
    ${intf_4}=  cli return interface counter brief  s1  ${chain_interface_1}  rx
    Should Be True  ${intf_4} > 99990
    Should Be True  ${intf_4} < 100100
    ### Now disable the in-interface of the service
    ${ret_value_1}=  cli disable interface  s1  ${service_in_interface1}
    Should Be True  ${ret_value_1}
    sleep  5
    ${result1}=  rest verify bigchain chain  s1  chain_name=${chain_name}  interface1=${chain_interface_1}  interface2=${chain_interface_2}  service1=${service_name}
    Should be true  ${result1}
    clear stats
    cli clear interface statistics  s1
    start traffic  ${stream_l3_as5710}
    sleep  10
    stop traffic  ${stream_l3_as5710}
    ${intf_1}=  cli return interface counter brief  s1  ${service_in_interface1}  tx
    Should Be True  ${intf_1} < 100
    ${intf_2}=  cli return interface counter brief  s1  ${service_out_interface1}  rx
    Should Be True  ${intf_2} < 100
    ${intf_3}=  cli return interface counter brief  s1  ${chain_interface_1}  rx
    Should Be True  ${intf_3} > 99990
    Should Be True  ${intf_3} < 100100
    ${intf_4}=  cli return interface counter brief  s1  ${chain_interface_2}  tx
    Should Be True  ${intf_4} > 99990
    Should Be True  ${intf_4} < 100100
    ### Re-enable the in-interface of the service
    ${ret_value_1}=  cli enable interface  s1  ${service_in_interface1}
    Should Be True  ${ret_value_1}
    sleep  5
    clear stats
    cli clear interface statistics  s1
    start traffic  ${stream_l3_as5710}
    sleep  10
    stop traffic  ${stream_l3_as5710}
    ${intf_1}=  cli return interface counter brief  s1  ${service_in_interface1}  tx
    Should Be True  ${intf_1} > 99990
    Should Be True  ${intf_1} < 100100
    ${intf_2}=  cli return interface counter brief  s1  ${service_out_interface1}  rx
    Should Be True  ${intf_2} > 99990
    Should Be True  ${intf_2} < 100100
    ${intf_3}=  cli return interface counter brief  s1  ${chain_interface_2}  tx
    Should Be True  ${intf_3} > 99990
    Should Be True  ${intf_3} < 100100
    ${intf_4}=  cli return interface counter brief  s1  ${chain_interface_1}  rx
    Should Be True  ${intf_4} > 99990
    Should Be True  ${intf_4} < 100100
    [Tags]  feature  runthis

TC044: For an optional service,verify service instance is bypassed when a service instance out-interface goes down
    add a service and attach it to a chain via rest  {"src-ip-mask": "255.255.255.255", "sequence": 1, "src-ip": "100.1.1.1", "ether-type": 2048}
    ${result1}=  rest verify bigchain chain  s1  chain_name=${chain_name}  interface1=${chain_interface_1}  interface2=${chain_interface_2}  service1=${service_name}
    Should be true  ${result1}
    ${result2}=  rest add service to chain  chain_name=${chain_name}  service_name=${service_name}  instance=1  sequence=1  optional=${true}
    Should be True  ${result2}
    sleep  5
    ${result3}=  rest verify bigchain chain  s1  chain_name=${chain_name}  interface1=${chain_interface_1}  interface2=${chain_interface_2}  service1=${service_name}
    Should be true  ${result3}
    ${stream_l3_as5710}=  L3 add  flow=a->b  frame_cnt=100000  frame_rate=10000  frame_size=9150
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=100.1.1.1  dst_ip=100.1.1.2  name=a_b_flow
    clear stats
    cli clear interface statistics  s1
    start traffic  ${stream_l3_as5710}
    sleep  10
    stop traffic  ${stream_l3_as5710}
    ${intf_1}=  cli return interface counter brief  s1  ${service_in_interface1}  tx
    Should Be True  ${intf_1} > 99990
    Should Be True  ${intf_1} < 100100
    ${intf_2}=  cli return interface counter brief  s1  ${service_out_interface1}  rx
    Should Be True  ${intf_2} > 99990
    Should Be True  ${intf_2} < 100100
    ${intf_3}=  cli return interface counter brief  s1  ${chain_interface_2}  tx
    Should Be True  ${intf_3} > 99990
    Should Be True  ${intf_3} < 100100
    ${intf_4}=  cli return interface counter brief  s1  ${chain_interface_1}  rx
    Should Be True  ${intf_4} > 99990
    Should Be True  ${intf_4} < 100100
    ### Now disable the in-interface of the service
    ${ret_value_1}=  cli disable interface  s1  ${service_out_interface1}
    Should Be True  ${ret_value_1}
    sleep  5
    ${result1}=  rest verify bigchain chain  s1  chain_name=${chain_name}  interface1=${chain_interface_1}  interface2=${chain_interface_2}  service1=${service_name}
    Should be true  ${result1}
    clear stats
    cli clear interface statistics  s1
    start traffic  ${stream_l3_as5710}
    sleep  10
    stop traffic  ${stream_l3_as5710}
    ${intf_1}=  cli return interface counter brief  s1  ${service_in_interface1}  tx
    Should Be True  ${intf_1} < 100
    ${intf_2}=  cli return interface counter brief  s1  ${service_out_interface1}  rx
    Should Be True  ${intf_2} < 100
    ${intf_3}=  cli return interface counter brief  s1  ${chain_interface_1}  rx
    Should Be True  ${intf_3} > 99990
    Should Be True  ${intf_3} < 100100
    ${intf_4}=  cli return interface counter brief  s1  ${chain_interface_2}  tx
    Should Be True  ${intf_4} > 99990
    Should Be True  ${intf_4} < 100100
    ### Re-enable the in-interface of the service
    ${ret_value_1}=  cli enable interface  s1  ${service_out_interface1}
    Should Be True  ${ret_value_1}
    sleep  5
    clear stats
    cli clear interface statistics  s1
    start traffic  ${stream_l3_as5710}
    sleep  10
    stop traffic  ${stream_l3_as5710}
    ${intf_1}=  cli return interface counter brief  s1  ${service_in_interface1}  tx
    Should Be True  ${intf_1} > 99990
    Should Be True  ${intf_1} < 100100
    ${intf_2}=  cli return interface counter brief  s1  ${service_out_interface1}  rx
    Should Be True  ${intf_2} > 99990
    Should Be True  ${intf_2} < 100100
    ${intf_3}=  cli return interface counter brief  s1  ${chain_interface_2}  tx
    Should Be True  ${intf_3} > 99990
    Should Be True  ${intf_3} < 100100
    ${intf_4}=  cli return interface counter brief  s1  ${chain_interface_1}  rx
    Should Be True  ${intf_4} > 99990
    Should Be True  ${intf_4} < 100100
    [Tags]  feature  runthis

TC045: Verify with traffic that service interfaces are taken in both directions when in-skip or out-skip is not configured.
    add a service and attach it to a chain via rest  {"any-traffic": true, "sequence": 1}
    sleep  10
    ${result1}=  rest verify bigchain chain  s1  chain_name=${chain_name}  interface1=${chain_interface_1}  interface2=${chain_interface_2}  service1=${service_name}
    Should be true  ${result1}
    ${stream_l3_as5710_1}=  L3 add  flow=a->b  frame_cnt=100000  frame_rate=10000  frame_size=9150
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=100.1.1.1  dst_ip=100.1.1.2  name=a_b_flow
    ${stream_l3_as5710_2}=  L3 add  flow=b->a  frame_cnt=100000  frame_rate=10000  frame_size=9150
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=100.1.1.2  dst_ip=100.1.1.1  name=b_a_flow
    clear stats
    cli clear interface statistics  s1
    start traffic
    sleep  10
    stop traffic
    ${intf_1_tx}=  cli return interface counter brief  s1  ${service_in_interface1}  tx
    Should Be True  ${intf_1_tx} > 99990
    Should Be True  ${intf_1_tx} < 100100
    ${intf_1_rx}=  cli return interface counter brief  s1  ${service_in_interface1}  rx
    Should Be True  ${intf_1_rx} > 99990
    Should Be True  ${intf_1_rx} < 100100
    ${intf_2_rx}=  cli return interface counter brief  s1  ${service_out_interface1}  rx
    Should Be True  ${intf_2_rx} > 99990
    Should Be True  ${intf_2_rx} < 100100
    ${intf_2_tx}=  cli return interface counter brief  s1  ${service_out_interface1}  tx
    Should Be True  ${intf_2_tx} > 99990
    Should Be True  ${intf_2_tx} < 100100
    ${intf_3_tx}=  cli return interface counter brief  s1  ${chain_interface_2}  tx
    Should Be True  ${intf_3_tx} > 99990
    Should Be True  ${intf_3_tx} < 100100
    ${intf_3_rx}=  cli return interface counter brief  s1  ${chain_interface_2}  rx
    Should Be True  ${intf_3_rx} > 99990
    Should Be True  ${intf_3_rx} < 100100
    ${intf_4_rx}=  cli return interface counter brief  s1  ${chain_interface_1}  rx
    Should Be True  ${intf_4_rx} > 99990
    Should Be True  ${intf_4_rx} < 100100
    ${intf_4_tx}=  cli return interface counter brief  s1  ${chain_interface_1}  tx
    Should Be True  ${intf_4_tx} > 99990
    Should Be True  ${intf_4_tx} < 100100
    [Tags]  feature  runthis

TC046: Configure in-skip and verify service instance is skipped when traffic is coming into the network
    add a service and attach it to a chain via rest  {"any-traffic": true, "sequence": 1}
    ${result0}=  rest skip service  chain_service_name=${service_name}  instance_id=1  inskip=True
    should be true  ${result0}
    sleep  10
    ${result1}=  rest verify bigchain chain  s1  chain_name=${chain_name}  interface1=${chain_interface_1}  interface2=${chain_interface_2}  service1=${service_name}
    Should be true  ${result1}
    ${stream_l3_as5710_1}=  L3 add  flow=a->b  frame_cnt=100000  frame_rate=10000  frame_size=9150
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=100.1.1.1  dst_ip=100.1.1.2  name=a_b_flow
    ${stream_l3_as5710_2}=  L3 add  flow=b->a  frame_cnt=100000  frame_rate=10000  frame_size=9150
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=100.1.1.2  dst_ip=100.1.1.1  name=b_a_flow
    clear stats
    cli clear interface statistics  s1
    start traffic
    sleep  10
    stop traffic
    ${intf_1_tx}=  cli return interface counter brief  s1  ${service_in_interface1}  tx
    Should Be True  ${intf_1_tx} < 100
    ${intf_1_rx}=  cli return interface counter brief  s1  ${service_in_interface1}  rx
    Should Be True  ${intf_1_rx} > 99990
    Should Be True  ${intf_1_rx} < 100100
    ${intf_2_rx}=  cli return interface counter brief  s1  ${service_out_interface1}  rx
    Should Be True  ${intf_2_rx} < 100
    ${intf_2_tx}=  cli return interface counter brief  s1  ${service_out_interface1}  tx
    Should Be True  ${intf_2_tx} > 99990
    Should Be True  ${intf_2_tx} < 100100
    ${intf_3_tx}=  cli return interface counter brief  s1  ${chain_interface_2}  tx
    Should Be True  ${intf_3_tx} > 99990
    Should Be True  ${intf_3_tx} < 100100
    ${intf_3_rx}=  cli return interface counter brief  s1  ${chain_interface_2}  rx
    Should Be True  ${intf_3_rx} > 99990
    Should Be True  ${intf_3_rx} < 100100
    ${intf_4_rx}=  cli return interface counter brief  s1  ${chain_interface_1}  rx
    Should Be True  ${intf_4_rx} > 99990
    Should Be True  ${intf_4_rx} < 100100
    ${intf_4_tx}=  cli return interface counter brief  s1  ${chain_interface_1}  tx
    Should Be True  ${intf_4_tx} > 99990
    Should Be True  ${intf_4_tx} < 100100
    [Tags]  feature  runthis

TC047: Configure out-skip and verify service instance is skipped when traffic is coming into the network
    add a service and attach it to a chain via rest  {"any-traffic": true, "sequence": 1}
    ${result0}=  rest skip service  chain_service_name=${service_name}  instance_id=1  outskip=True
    should be true  ${result0}
    sleep  10
    ${result1}=  rest verify bigchain chain  s1  chain_name=${chain_name}  interface1=${chain_interface_1}  interface2=${chain_interface_2}  service1=${service_name}
    Should be true  ${result1}
    ${stream_l3_as5710_1}=  L3 add  flow=a->b  frame_cnt=100000  frame_rate=10000  frame_size=9150
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=100.1.1.1  dst_ip=100.1.1.2  name=a_b_flow
    ${stream_l3_as5710_2}=  L3 add  flow=b->a  frame_cnt=100000  frame_rate=10000  frame_size=9150
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=100.1.1.2  dst_ip=100.1.1.1  name=b_a_flow
    clear stats
    cli clear interface statistics  s1
    start traffic
    sleep  10
    stop traffic
    ${intf_1_tx}=  cli return interface counter brief  s1  ${service_in_interface1}  tx
    Should Be True  ${intf_1_tx} > 99990
    Should Be True  ${intf_1_tx} < 100100
    ${intf_1_rx}=  cli return interface counter brief  s1  ${service_in_interface1}  rx
    Should Be True  ${intf_1_rx} < 100
    ${intf_2_rx}=  cli return interface counter brief  s1  ${service_out_interface1}  rx
    Should Be True  ${intf_2_rx} > 99990
    Should Be True  ${intf_2_rx} < 100100
    ${intf_2_tx}=  cli return interface counter brief  s1  ${service_out_interface1}  tx
    Should Be True  ${intf_2_tx} < 100
    ${intf_3_tx}=  cli return interface counter brief  s1  ${chain_interface_2}  tx
    Should Be True  ${intf_3_tx} > 99990
    Should Be True  ${intf_3_tx} < 100100
    ${intf_3_rx}=  cli return interface counter brief  s1  ${chain_interface_2}  rx
    Should Be True  ${intf_3_rx} > 99990
    Should Be True  ${intf_3_rx} < 100100
    ${intf_4_rx}=  cli return interface counter brief  s1  ${chain_interface_1}  rx
    Should Be True  ${intf_4_rx} > 99990
    Should Be True  ${intf_4_rx} < 100100
    ${intf_4_tx}=  cli return interface counter brief  s1  ${chain_interface_1}  tx
    Should Be True  ${intf_4_tx} > 99990
    Should Be True  ${intf_4_tx} < 100100
    [Tags]  feature  runthis

* Keywords

service suite setup
    base suite setup
    ${result1}=  rest add switch alias  s1  ${switch1_alias}
    Should be true  ${result1}
    ${result2}=  rest add switch role  node=s1  mode=bigchain
    Should be true  ${result2}
    cli add portchannel  s1  ${s1s2_10g_number_1}  ${s1s2_10g_port_range_1}  L3
    cli add portchannel  s1  ${s1s2_10g_number_2}  ${s1s2_10g_port_range_2}  L3
    Sleep   5

service test setup
    ${result1}=  write version to file
    Should be true  ${result1}
    ${result}=  start syslog monitor
    Should be true  ${result}
    ixia initialize  tg1  init=true
    
service test teardown
    config  node=master  cmd=no bigchain chain ${chain_name}    
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    config  node=master  cmd=no bigchain chain ${chain_name2}    
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    config  node=master  cmd=no bigchain service ${service_name}
    ${content2}=  cli_content  node=master
    Should Not Contain  ${content2}  Error
    config  node=master  cmd=no bigchain service ${service_name2}
    ${content2}=  cli_content  node=master
    Should Not Contain  ${content2}  Error
    config  node=master  cmd=no bigchain service ${service_name3}
    ${content2}=  cli_content  node=master
    Should Not Contain  ${content2}  Error
    config  node=master  cmd=no bigchain span-service ${span_service_name}
    ${content2}=  cli_content  node=master
    Should Not Contain  ${content2}  Error
    config  node=master  cmd=no bigchain address-group ${addressgrp_name}
    ${content2}=  cli_content  node=master
    Should Not Contain  ${content2}  Error
    delete traffic
    sleep  2
    ${result1}=  stop syslog monitor
    Should be true  ${result1}

add a service and attach it to a chain via rest  [Arguments]  ${user_data}
    ${result1}=  rest add a bigchain service  chain_service_name=${service_name}  service_type=custom  instance_id=1
    Should be True  ${result1}
    ${result2}=  rest add a bigchain service description  chain_service_name=${service_name}  descrption=TestBigChainService
    Should be True  ${result2}
    ${result3}=  rest add a bigchain service instance interface pair  node=s1  chain_service_name=${service_name}  instance_id=1  inintf=${service_in_interface1}  outintf=${service_out_interface1}
    Should be True  ${result3}
    ${result4}=  rest update bigchain policy action  chain_service_name=${service_name}
    Should be True  ${result4}
    ${result5}=  rest add a bigchain policy match  chain_service_name=${service_name}  match_number=1  data=${user_data}
    Should be True  ${result5}
    sleep  5
    ${result6}=  rest add a chain  chain_name=${chain_name}
    Should be True  ${result6}
    ${result7}=  rest add chain endpoint  s1  chain_name=${chain_name}  interface1=${chain_interface_1}  interface2=${chain_interface_2}
    Should be True  ${result7}
    ${result8}=  rest add service to chain  chain_name=${chain_name}  service_name=${service_name}  instance=1  sequence=1
    Should be True  ${result8}
    sleep  5

add a service and attach it to a chain via cli
    config  node=master  cmd=bigchain service ${service_name}
    ${content1}=  cli_content  node=master
    Should Not Contain  ${content1}  Error
    config  node=master  cmd=description TestBigChainService
    ${content2}=  cli_content  node=master
    Should Not Contain  ${content2}  Error
    config  node=master  cmd=instance 1
    ${content3}=  cli_content  node=master
    Should Not Contain  ${content3}  Error
    config  node=master  cmd=interface-pair switch ${switch1_alias} in ${service_in_interface1} out ${service_out_interface1}
    ${content4}=  cli_content  node=master
    Should Not Contain  ${content4}  Error
    config  node=master  cmd=exit
    config  node=master  cmd=1 match tcp dst-port 80
    ${content6}=  cli_content  node=master
    Should Not Contain  ${content6}  Error
    config  node=master  cmd=exit
    sleep  5
    config  node=master  cmd=bigchain chain ${chain_name}
    ${content6}=  cli_content  node=master
    Should Not Contain  ${content6}  Error
    config  node=master  cmd=endpoint-pair switch ${switch1_alias} endpoint1 ${chain_interface_1} endpoint2 ${chain_interface_2}
    ${content7}=  cli_content  node=master
    Should Not Contain  ${content7}  Error
    config  node=master  cmd=use-service ${service_name} instance 1 sequence 1
    ${content8}=  cli_content  node=master
    Should Not Contain  ${content8}  Error
    sleep  5

verify results   [Arguments]  ${send_port}  ${recv_port}  ${transmitted_frames}  ${received_valid_frames}
    Sleep  5
    ${report}=  fetch port stats
    ${tx_value}=  verify dict key  ${report}  ${send_port}  ${transmitted_frames}
    ${rx_value}=  verify dict key  ${report}  ${recv_port}  ${received_valid_frames}
    ${in_range}=  ixia verify traffic rate  ${tx_value}  ${rx_value}  200
    Should be true  ${in_range}

service suite teardown
    cli delete portchannel  s1  ${s1s2_10g_number_1}
    cli delete portchannel  s1  ${s1s2_10g_number_2}
    ${result1}=  rest delete switch role  node=s1  mode=bigchain
    Should be true  ${result1}
    sleep  5
    ${result3}=  rest delete switch alias  s1
    Should be true  ${result3}
    ${result4}=  rest delete switch  s1
    Should be true  ${result4}
    base suite teardown