== T5 Functional L2 Test Suite ==

* Setting
Documentation    T5 BVS APP Functional VNS Mac Scale Learning/age/move Test Suite
Suite Setup      base suite setup
Suite Teardown   T5 suite teardown
Test Setup       T5 test setup
Test Teardown    T5 test teardown
Force Tags       T5 
Library          keywords/BsnCommon.py
Library          keywords/T5.py
Library	         keywords/T5Platform.py
Library	         keywords/SwitchLight.py
Library	         keywords/Host.py
Library		     keywords/Ixia.py
Resource	     testsuites/T5/t5_dualleaf_three_rack_physical_resource.txt
Resource		 testsuites/T5/t5_physical_variables.txt
*Variables
${mac1}		00:00:05:00:00:00
${mac2}		00:00:06:00:00:00


* Test Case 

add Dual Leaf Three Rack setup
   [Tags]  L2   run
  	base suite setup
  	add fabric switch
  	bring up 1 gig interface
  	sleep  5
  	rest verify fabric switch all
  	rest verify fabric link common
   
Add 1000 dynamic mac into the system and check forwarding and make sure aging also works for 1000 mac
	[Tags]  scaling    
	${stream}=             L3 add  no_arp=True  flow=a<->c  src_mac=00:00:01:00:00:01  dst_mac=00:00:02:00:00:01  src_cnt=500  dst_cnt=500   frame_rate=1000  frame_size=128  name=a_c_flow
    start traffic  ${stream}
    rest verify endpoint in system  1000
    ${result}=  bash execute command  leaf0-a  ofad-ctl ft L2 | wc -l 
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 1000
    ${result}=  bash execute command  leaf2-a  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 1000
    ${result}=  bash execute command  spine0  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 1000
    verify traffic rate  tx_rate  rx_rate  a  c
    verify traffic rate  tx_rate  rx_rate  c  a
    stop traffic  ${stream}
    summary log  waiting 10 minutes for 1000 mac age
    sleep  600
    rest verify endpoint in system  0
    ${result}=  bash execute command  leaf0-a  ofad-ctl ft L2 | wc -l 
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} < 8
    ${result}=  bash execute command  leaf2-a  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} < 8
    ${result}=  bash execute command  spine0  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} < 8
	    
Add 4000 dynamic mac into the system and check forwarding and make sure aging also works for 4000 mac
	[Tags]  scaling     
	${stream}=             L3 add  no_arp=True  flow=a<->c  src_mac=00:00:01:00:00:01  dst_mac=00:00:02:00:00:01  src_cnt=2000  dst_cnt=2000   frame_rate=1000  frame_size=128  name=a_c_flow
    start traffic  ${stream}
    rest verify endpoint in system  4000
    ${result}=  bash execute command  leaf0-a  ofad-ctl ft L2 | wc -l 
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 4000
    ${result}=  bash execute command  leaf2-a  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 4000
    ${result}=  bash execute command  spine0  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 4000
    verify traffic rate  tx_rate  rx_rate  a  c
    verify traffic rate  tx_rate  rx_rate  c  a
    stop traffic  ${stream}
    summary log  waiting 10 minutes for 4000 mac age
    sleep  600
    rest verify endpoint in system  0
    ${result}=  bash execute command  leaf0-a  ofad-ctl ft L2 | wc -l 
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} < 8
    ${result}=  bash execute command  leaf2-a  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} < 8
    ${result}=  bash execute command  spine0  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} < 8


Add 10000 dynamic mac into the system and check forwarding and make sure aging also works for 10000 mac
	[Tags]  scaling  
	${stream}=             L3 add  no_arp=True  flow=a<->c  src_mac=00:00:01:00:00:01  dst_mac=00:00:02:00:00:01  src_cnt=5000  dst_cnt=5000   frame_rate=1000  frame_size=128  name=a_c_flow
    start traffic  ${stream}
    sleep  20
    rest verify endpoint in system  10000
    ${result}=  bash execute command  leaf0-a  ofad-ctl ft L2 | wc -l 
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 10000
    ${result}=  bash execute command  leaf2-a  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 10000
    ${result}=  bash execute command  spine0  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 10000
    verify traffic rate  tx_rate  rx_rate  a  c
    verify traffic rate  tx_rate  rx_rate  c  a
    stop traffic  ${stream}
    summary log  waiting 10 minutes for 10000 mac age
	sleep  600
    rest verify endpoint in system  0
    ${result}=  bash execute command  leaf0-a  ofad-ctl ft L2 | wc -l 
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} < 8
    ${result}=  bash execute command  leaf2-a  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} < 8
    ${result}=  bash execute command  spine0  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} < 8

Add 16000 dynamic mac into the system and check forwarding and make sure aging also works for 16000 mac
	[Tags]  scaling  
	${stream}=             L3 add  no_arp=True  flow=a<->c  src_mac=00:00:01:00:00:01  dst_mac=00:00:02:00:00:01  src_cnt=8000  dst_cnt=8000  frame_rate=1000  frame_size=128  name=a_c_flow
    start traffic  ${stream}
	sleep  40   
    rest verify endpoint in system  16000
    ${result}=  bash execute command  leaf0-a  ofad-ctl ft L2 | wc -l 
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 16000
    ${result}=  bash execute command  leaf2-a  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 16000
    ${result}=  bash execute command  spine0  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 16000
    verify traffic rate  tx_rate  rx_rate  a  c
    verify traffic rate  tx_rate  rx_rate  c  a
    stop traffic  ${stream}
    summary log  waiting 10 minutes for 16000 mac age
	sleep  600
    rest verify endpoint in system  0
    ${result}=  bash execute command  leaf0-a  ofad-ctl ft L2 | wc -l 
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} < 8
    ${result}=  bash execute command  leaf2-a  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} < 8
    ${result}=  bash execute command  spine0  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} < 8
    
Add 48k dynamic mac into the system and check forwarding and make sure aging also works for 48k mac
	[Tags]  scaling  run 
	${stream}=             L3 add  no_arp=True  flow=a<->c  src_mac=00:00:01:00:00:01  dst_mac=00:00:02:00:00:01  src_cnt=8000  dst_cnt=8000    frame_rate=1000  frame_size=128  name=a_c_flow
    ${stream1}=             L3 add  no_arp=True  flow=b<->f  src_mac=00:00:03:00:00:01  dst_mac=00:00:04:00:00:01  src_cnt=8000  dst_cnt=8000    frame_rate=1000  frame_size=128  name=b_f_flow
    ${stream2}=             L3 add  no_arp=True  flow=d<->e  src_mac=00:00:05:00:00:01  dst_mac=00:00:06:00:00:01  src_cnt=8000  dst_cnt=8000    frame_rate=1000  frame_size=128  name=d_e_flow
    start traffic  ${stream}
    start traffic  ${stream1}
    start traffic  ${stream2} 
    sleep  120
    rest verify endpoint in system  48000
    ${result}=  bash execute command  leaf0-a  ofad-ctl ft L2 | wc -l 
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 48000
    ${result}=  bash execute command  leaf2-a  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 48000
    ${result}=  bash execute command  spine0  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 48000
    verify traffic rate  tx_rate  rx_rate  a  c
    verify traffic rate  tx_rate  rx_rate  c  a
    verify traffic rate  tx_rate  rx_rate  b  f
    verify traffic rate  tx_rate  rx_rate  f  b
    verify traffic rate  tx_rate  rx_rate  d  e
    verify traffic rate  tx_rate  rx_rate  e  d
    stop traffic  
    summary log  waiting 10 minutes for 48000 mac age
	sleep  600
    rest verify endpoint in system  0
    ${result}=  bash execute command  leaf0-a  ofad-ctl ft L2 | wc -l 
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} < 8
    ${result}=  bash execute command  leaf2-a  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} < 8
    ${result}=  bash execute command  spine0  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} < 8
	    
spine link failover with 48k mac address in the system
	[Tags]  scaling  
	${stream}=             L3 add  no_arp=True  flow=a<->c  src_mac=00:00:01:00:00:01  dst_mac=00:00:02:00:00:01  src_cnt=8000  dst_cnt=8000    frame_rate=1000  frame_size=128  name=a_c_flow
    ${stream1}=             L3 add  no_arp=True  flow=b<->f  src_mac=00:00:03:00:00:01  dst_mac=00:00:04:00:00:01  src_cnt=8000  dst_cnt=8000    frame_rate=1000  frame_size=128  name=b_f_flow
    ${stream2}=             L3 add  no_arp=True  flow=d<->e  src_mac=00:00:05:00:00:01  dst_mac=00:00:06:00:00:01  src_cnt=8000  dst_cnt=8000    frame_rate=1000  frame_size=128  name=d_e_flow
    start traffic  ${stream}
    start traffic  ${stream1}
    start traffic  ${stream2}  
    sleep  120
    rest verify endpoint in system  48000
    ${result}=  bash execute command  leaf0-a  ofad-ctl ft L2 | wc -l 
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 48000
    ${result}=  bash execute command  leaf2-a  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 48000
    ${result}=  bash execute command  spine0  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 48000
    verify traffic rate  tx_rate  rx_rate  a  c
    verify traffic rate  tx_rate  rx_rate  c  a
    verify traffic rate  tx_rate  rx_rate  b  f
    verify traffic rate  tx_rate  rx_rate  f  b
    verify traffic rate  tx_rate  rx_rate  d  e
    verify traffic rate  tx_rate  rx_rate  e  d
    rest disable fabric interface  leaf0-a  ${leaf0a_spine0_intf0}
    sleep  5
    verify traffic rate  tx_rate  rx_rate  a  c
    verify traffic rate  tx_rate  rx_rate  c  a
    verify traffic rate  tx_rate  rx_rate  b  f
    verify traffic rate  tx_rate  rx_rate  f  b
    verify traffic rate  tx_rate  rx_rate  d  e
    verify traffic rate  tx_rate  rx_rate  e  d
    rest verify endpoint in system  48000
    rest enable fabric interface  leaf0-a  ${leaf0a_spine0_intf0}
    sleep  5
    verify traffic rate  tx_rate  rx_rate  a  c
    verify traffic rate  tx_rate  rx_rate  c  a
    verify traffic rate  tx_rate  rx_rate  b  f
    verify traffic rate  tx_rate  rx_rate  f  b
    verify traffic rate  tx_rate  rx_rate  d  e
    verify traffic rate  tx_rate  rx_rate  e  d
    rest verify endpoint in system  48000
    rest disable fabric interface  leaf0-a  ${leaf0a_spine0_intf1}
    sleep  5
    verify traffic rate  tx_rate  rx_rate  a  c
    verify traffic rate  tx_rate  rx_rate  c  a
    verify traffic rate  tx_rate  rx_rate  b  f
    verify traffic rate  tx_rate  rx_rate  f  b
    verify traffic rate  tx_rate  rx_rate  d  e
    verify traffic rate  tx_rate  rx_rate  e  d
    rest verify endpoint in system  48000
    rest enable fabric interface  leaf0-a  ${leaf0a_spine0_intf1}
    sleep  5
    verify traffic rate  tx_rate  rx_rate  a  c
    verify traffic rate  tx_rate  rx_rate  c  a
    verify traffic rate  tx_rate  rx_rate  b  f
    verify traffic rate  tx_rate  rx_rate  f  b
    verify traffic rate  tx_rate  rx_rate  d  e
    verify traffic rate  tx_rate  rx_rate  e  d
    rest verify endpoint in system  48000  
    stop traffic  
    
spine switch shutdown with 48k mac address in the system
	[Tags]  scaling  
	${stream}=             L3 add  no_arp=True  flow=a<->c  src_mac=00:00:01:00:00:01  dst_mac=00:00:02:00:00:01  src_cnt=8000  dst_cnt=8000    frame_rate=1000  frame_size=128  name=a_c_flow
    ${stream1}=             L3 add  no_arp=True  flow=b<->f  src_mac=00:00:03:00:00:01  dst_mac=00:00:04:00:00:01  src_cnt=8000  dst_cnt=8000    frame_rate=1000  frame_size=128  name=b_f_flow
    ${stream2}=             L3 add  no_arp=True  flow=d<->e  src_mac=00:00:05:00:00:01  dst_mac=00:00:06:00:00:01  src_cnt=8000  dst_cnt=8000    frame_rate=1000  frame_size=128  name=d_e_flow
    start traffic  ${stream}
    start traffic  ${stream1}
    start traffic  ${stream2}
    sleep  120
    rest verify endpoint in system  48000
    ${result}=  bash execute command  leaf0-a  ofad-ctl ft L2 | wc -l 
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 48000
    ${result}=  bash execute command  leaf2-a  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 48000
    ${result}=  bash execute command  spine0  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 48000
    verify traffic rate  tx_rate  rx_rate  a  c
    verify traffic rate  tx_rate  rx_rate  c  a
    verify traffic rate  tx_rate  rx_rate  b  f
    verify traffic rate  tx_rate  rx_rate  f  b
    verify traffic rate  tx_rate  rx_rate  d  e
    verify traffic rate  tx_rate  rx_rate  e  d
    rest add shutdown fabric switch  spine0
    sleep  5
    verify traffic rate  tx_rate  rx_rate  a  c
    verify traffic rate  tx_rate  rx_rate  c  a
    verify traffic rate  tx_rate  rx_rate  b  f
    verify traffic rate  tx_rate  rx_rate  f  b
    verify traffic rate  tx_rate  rx_rate  d  e
    verify traffic rate  tx_rate  rx_rate  e  d
    rest verify endpoint in system  48000
    ${result}=  bash execute command  leaf0-a  ofad-ctl ft L2 | wc -l 
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 48000
    ${result}=  bash execute command  leaf2-a  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 48000
    ${result}=  bash execute command  spine0  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}
    Should be True  ${count} > 48000 
    rest delete shutdown fabric switch  spine0
    sleep  5
    verify traffic rate  tx_rate  rx_rate  a  c
    verify traffic rate  tx_rate  rx_rate  c  a
    verify traffic rate  tx_rate  rx_rate  b  f
    verify traffic rate  tx_rate  rx_rate  f  b
    verify traffic rate  tx_rate  rx_rate  d  e
    verify traffic rate  tx_rate  rx_rate  e  d
    rest verify endpoint in system  48000 
    ${result}=  bash execute command  leaf0-a  ofad-ctl ft L2 | wc -l 
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 48000
    ${result}=  bash execute command  leaf2-a  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 48000
    sleep  10
    ${result}=  bash execute command  spine0  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}
    Should be True  ${count} > 48000 
    rest add shutdown fabric switch  spine1
    sleep  5
    verify traffic rate  tx_rate  rx_rate  a  c
    verify traffic rate  tx_rate  rx_rate  c  a
    verify traffic rate  tx_rate  rx_rate  b  f
    verify traffic rate  tx_rate  rx_rate  f  b
    verify traffic rate  tx_rate  rx_rate  d  e
    verify traffic rate  tx_rate  rx_rate  e  d
    rest verify endpoint in system  48000
    ${result}=  bash execute command  leaf0-a  ofad-ctl ft L2 | wc -l 
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 48000
    ${result}=  bash execute command  leaf2-a  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 48000
    ${result}=  bash execute command  spine1  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}
    Should be True  ${count} > 48000 
    rest delete shutdown fabric switch  spine1
    sleep  5
    verify traffic rate  tx_rate  rx_rate  a  c
    verify traffic rate  tx_rate  rx_rate  c  a
    verify traffic rate  tx_rate  rx_rate  b  f
    verify traffic rate  tx_rate  rx_rate  f  b
    verify traffic rate  tx_rate  rx_rate  d  e
    verify traffic rate  tx_rate  rx_rate  e  d
    rest verify endpoint in system  48000 
    ${result}=  bash execute command  leaf0-a  ofad-ctl ft L2 | wc -l 
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 48000
    ${result}=  bash execute command  leaf2-a  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 48000
    sleep  10
    ${result}=  bash execute command  spine1  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}
    Should be True  ${count} > 48000 
    stop traffic  
    
spine switch reboot with 48k mac address in the system
	[Tags]  scaling  
	${stream}=             L3 add  no_arp=True  flow=a<->c  src_mac=00:00:01:00:00:01  dst_mac=00:00:02:00:00:01  src_cnt=8000  dst_cnt=8000    frame_rate=1000  frame_size=128  name=a_c_flow
    ${stream1}=             L3 add  no_arp=True  flow=b<->f  src_mac=00:00:03:00:00:01  dst_mac=00:00:04:00:00:01  src_cnt=8000  dst_cnt=8000    frame_rate=1000  frame_size=128  name=b_f_flow
    ${stream2}=             L3 add  no_arp=True  flow=d<->e  src_mac=00:00:05:00:00:01  dst_mac=00:00:06:00:00:01  src_cnt=8000  dst_cnt=8000    frame_rate=1000  frame_size=128  name=d_e_flow
    start traffic  ${stream}
    start traffic  ${stream1}
    start traffic  ${stream2}  
    sleep  120
    rest verify endpoint in system  48000
    ${result}=  bash execute command  leaf0-a  ofad-ctl ft L2 | wc -l 
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 48000
    ${result}=  bash execute command  leaf2-a  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 48000
    ${result}=  bash execute command  spine0  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 48000
    verify traffic rate  tx_rate  rx_rate  a  c
    verify traffic rate  tx_rate  rx_rate  c  a
    verify traffic rate  tx_rate  rx_rate  b  f
    verify traffic rate  tx_rate  rx_rate  f  b
    verify traffic rate  tx_rate  rx_rate  d  e
    verify traffic rate  tx_rate  rx_rate  e  d
    cli restart switch  spine0
    sleep  5
    verify traffic rate  tx_rate  rx_rate  a  c
    verify traffic rate  tx_rate  rx_rate  c  a
    verify traffic rate  tx_rate  rx_rate  b  f
    verify traffic rate  tx_rate  rx_rate  f  b
    verify traffic rate  tx_rate  rx_rate  d  e
    verify traffic rate  tx_rate  rx_rate  e  d
    rest verify endpoint in system  48000
    ${result}=  bash execute command  leaf0-a  ofad-ctl ft L2 | wc -l 
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 48000
    ${result}=  bash execute command  leaf2-a  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 48000
    sleep  90
    ${result}=  bash execute command  spine0  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}
    cli restart switch  spine1
    sleep  5
    verify traffic rate  tx_rate  rx_rate  a  c
    verify traffic rate  tx_rate  rx_rate  c  a
    verify traffic rate  tx_rate  rx_rate  b  f
    verify traffic rate  tx_rate  rx_rate  f  b
    verify traffic rate  tx_rate  rx_rate  d  e
    verify traffic rate  tx_rate  rx_rate  e  d
    rest verify endpoint in system  48000
    ${result}=  bash execute command  leaf0-a  ofad-ctl ft L2 | wc -l 
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 48000
    ${result}=  bash execute command  leaf2-a  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 48000
    sleep  90
    ${result}=  bash execute command  spine1  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}
    stop traffic  
    
Master controller node reboot with 48k mac entries
	[Tags]  scaling       
	
	${stream}=             L3 add  no_arp=True  flow=a<->c  src_mac=00:00:01:00:00:01  dst_mac=00:00:02:00:00:01  src_cnt=8000  dst_cnt=8000    frame_rate=1000  frame_size=128  name=a_c_flow
    ${stream1}=             L3 add  no_arp=True  flow=b<->f  src_mac=00:00:03:00:00:01  dst_mac=00:00:04:00:00:01  src_cnt=8000  dst_cnt=8000    frame_rate=1000  frame_size=68  name=b_f_flow
    ${stream2}=             L3 add  no_arp=True  flow=d<->e  src_mac=00:00:05:00:00:01  dst_mac=00:00:06:00:00:01  src_cnt=8000  dst_cnt=8000    frame_rate=1000  frame_size=68  name=d_e_flow
    start traffic  ${stream}
    start traffic  ${stream1}
    start traffic  ${stream2}  
    sleep  120
    rest verify endpoint in system  48000
    ${result}=  bash execute command  leaf0-a  ofad-ctl ft L2 | wc -l 
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 48000
    ${result}=  bash execute command  leaf2-a  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 48000
    ${result}=  bash execute command  spine0  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 48000
    verify traffic rate  tx_rate  rx_rate  a  c
    verify traffic rate  tx_rate  rx_rate  c  a
    verify traffic rate  tx_rate  rx_rate  b  f
    verify traffic rate  tx_rate  rx_rate  f  b
    verify traffic rate  tx_rate  rx_rate  d  e
    verify traffic rate  tx_rate  rx_rate  e  d
    cli verify cluster master reboot
    sleep  3
    verify traffic rate  tx_rate  rx_rate  a  c
    verify traffic rate  tx_rate  rx_rate  c  a
    verify traffic rate  tx_rate  rx_rate  b  f
    verify traffic rate  tx_rate  rx_rate  f  b
    verify traffic rate  tx_rate  rx_rate  d  e
    verify traffic rate  tx_rate  rx_rate  e  d
    stop traffic  
    summary log  waiting 10 minutes for 48000 mac age
	sleep  600
    rest verify endpoint in system  0
    ${result}=  bash execute command  leaf0-a  ofad-ctl ft L2 | wc -l 
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} < 8
    ${result}=  bash execute command  leaf2-a  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} < 8
    ${result}=  bash execute command  spine0  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} < 8
	
Add 96k dynamic mac into the system and check forwarding and make sure aging also works for 96k mac
	[Tags]  scaling  
	${stream}=             L3 add  no_arp=True  flow=a<->c  src_mac=00:00:01:00:00:01  dst_mac=00:00:02:00:00:01  src_cnt=16000  dst_cnt=16000    frame_rate=1000  frame_size=128  name=a_c_flow
    ${stream1}=             L3 add  no_arp=True  flow=b<->f  src_mac=00:00:03:00:00:01  dst_mac=00:00:04:00:00:01  src_cnt=16000  dst_cnt=16000    frame_rate=1000  frame_size=128  name=b_f_flow
    ${stream2}=             L3 add  no_arp=True  flow=d<->e  src_mac=00:00:05:00:00:01  dst_mac=00:00:06:00:00:01  src_cnt=16000  dst_cnt=16000    frame_rate=1000  frame_size=128  name=d_e_flow
    start traffic  ${stream}
    start traffic  ${stream1}
    start traffic  ${stream2}  
    sleep  200
    rest verify endpoint in system  96000
    ${result}=  bash execute command  leaf0-a  ofad-ctl ft L2 | wc -l 
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 96000
    ${result}=  bash execute command  leaf2-a  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 96000
    ${result}=  bash execute command  spine0  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} > 96000
    verify traffic rate  tx_rate  rx_rate  a  c
    verify traffic rate  tx_rate  rx_rate  c  a
    verify traffic rate  tx_rate  rx_rate  b  f
    verify traffic rate  tx_rate  rx_rate  f  b
    verify traffic rate  tx_rate  rx_rate  d  e
    verify traffic rate  tx_rate  rx_rate  e  d
    stop traffic  
    summary log  waiting 10 minutes for 96000 mac age
	sleep  600
    rest verify endpoint in system  0
    ${result}=  bash execute command  leaf0-a  ofad-ctl ft L2 | wc -l 
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} < 8
    ${result}=  bash execute command  leaf2-a  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} < 8
    ${result}=  bash execute command  spine0  ofad-ctl ft L2 | wc -l
    ${count}=	Convert to integer  ${result}   
    Should be True  ${count} < 8

Add 1k static endpoints and check the forwarding
	[Tags]  scaling  
	rest add endpoint scale  t1  v1  ${mac1}  a  leaf0-a  ${leaf0a_ixia_intf}  -1  500
  	rest add endpoint scale  t1  v1  ${mac2}  c  leaf1-a  ${leaf1a_ixia_intf}  -1  500
	sleep  2
	rest verify endpoints in vns  v1  1000
	${stream}=             L3 add  no_arp=True  flow=a<->c  src_mac=00:00:05:00:00:01  dst_mac=00:00:06:00:00:01  src_cnt=500  dst_cnt=500  frame_rate=500  frame_size=68  name=a_c_flow
    start traffic  ${stream}
    verify traffic rate  tx_rate  rx_rate  a  c
    verify traffic rate  tx_rate  rx_rate  c  a
    stop traffic  ${stream}
    
Add 4k static endpoints and check the forwarding
	[Tags]  scaling  
	rest add endpoint scale  t1  v1  ${mac1}  a  leaf0-a  ${leaf0a_ixia_intf}  -1  2000
  	rest add endpoint scale  t1  v1  ${mac2}  c  leaf1-a  ${leaf1a_ixia_intf}  -1  2000
	sleep  2
	rest verify endpoints in vns  v1  4000
	${stream}=             L3 add  no_arp=True  flow=a<->c  src_mac=00:00:05:00:00:01  dst_mac=00:00:06:00:00:01  src_cnt=2000  dst_cnt=2000  frame_rate=1000  frame_size=68  name=a_c_flow
    start traffic  ${stream}
    verify traffic rate  tx_rate  rx_rate  a  c
    verify traffic rate  tx_rate  rx_rate  c  a
    stop traffic  ${stream}
	    
Add 8k static endpoints and check the forwarding
	[Tags]  scaling  
	rest add endpoint scale  t1  v1  ${mac1}  a  leaf0-a  ${leaf0a_ixia_intf}  -1  4000
  	rest add endpoint scale  t1  v1  ${mac2}  c  leaf1-a  ${leaf1a_ixia_intf}  -1  4000
	sleep  2
	rest verify endpoints in vns  v1  8000
	${stream}=             L3 add  no_arp=True  flow=a<->c  src_mac=00:00:05:00:00:01  dst_mac=00:00:06:00:00:01  src_cnt=4000  dst_cnt=4000  frame_rate=1000  frame_size=68  name=a_c_flow
    start traffic  ${stream}
    sleep  3
    verify traffic rate  tx_rate  rx_rate  a  c
    verify traffic rate  tx_rate  rx_rate  c  a
    stop traffic  ${stream}

Add 16k static endpoints and check the forwarding also check with master reboot
	[Tags]  scaling
  	rest add endpoint scale  t1  v1  ${mac1}  a  leaf0-a  ${leaf0a_ixia_intf}  -1  8000
  	rest add endpoint scale  t1  v1  ${mac2}  c  leaf1-a  ${leaf1a_ixia_intf}  -1  8000
	sleep  2
	rest verify endpoints in vns  v1  16000
	${stream}=             L3 add  no_arp=True  flow=a<->c  src_mac=00:00:05:00:00:01  dst_mac=00:00:06:00:00:01  src_cnt=8000  dst_cnt=8000  frame_rate=1000  frame_size=68  name=a_c_flow
    start traffic  ${stream}
    sleep  20  
    verify traffic rate  tx_rate  rx_rate  a  c
    verify traffic rate  tx_rate  rx_rate  c  a
    cli verify cluster master reboot
    sleep  2
    verify traffic rate  tx_rate  rx_rate  a  c
    verify traffic rate  tx_rate  rx_rate  c  a
    stop traffic  ${stream}
    
Mac move at scale 1k mac between rack
	[Tags]  scaling    
	${stream}=            L3 add  no_arp=True  flow=a->c  src_mac=00:00:01:00:00:01  dst_mac=00:00:02:00:00:01  src_cnt=1000    frame_rate=1000  frame_size=68  name=a_c_flow
	${stream1}=             L3 add  no_arp=True  flow=c->a  src_mac=00:00:02:00:00:01  dst_mac=00:00:01:00:00:01  dst_cnt=1000    frame_rate=1000  frame_size=68  name=c_a_flow
    start traffic  ${stream}
    start traffic  ${stream1}
    rest verify endpoint in system  1001
    rest verify forwarding layer2 table untag  leaf0-a  ${leaf0a_ixia_intf}  00:00:01:00:00:01
    verify traffic rate  tx_rate  rx_rate  c  a
    stop traffic  ${stream}
    stop traffic  ${stream1}
    ${stream2}=             L3 add  no_arp=True  flow=e->c  src_mac=00:00:01:00:00:01  dst_mac=00:00:02:00:00:01  src_cnt=1000   frame_rate=1000  frame_size=68  name=e_c_flow
    start traffic  ${stream2}
    start traffic  ${stream1}
    rest verify forwarding layer2 table untag  leaf2-a  ${leaf2a_ixia_intf}  00:00:01:00:00:01
    verify traffic rate  tx_rate  rx_rate  c  e
    verify traffic rate negative  tx_rate  rx_rate  c  a  
    stop traffic  ${stream2}
    stop traffic  ${stream1}

Mac move at scale 16k between rack
	[Tags]  scaling   
	${stream}=             L3 add  no_arp=True  flow=a->c  src_mac=00:01:01:00:00:01  dst_mac=00:02:02:00:00:01  src_cnt=16000    frame_rate=1000  frame_size=68  name=a_c_flow
	${stream1}=             L3 add  no_arp=True  flow=c->a  src_mac=00:02:02:00:00:01  dst_mac=00:01:01:00:00:01  dst_cnt=16000    frame_rate=1000  frame_size=68  name=c_a_flow
    start traffic  ${stream}
    start traffic  ${stream1}
    sleep  20  
    rest verify endpoint in system  16001
    rest verify forwarding layer2 table untag  leaf0-a  ${leaf0a_ixia_intf}  00:01:01:00:00:01
    verify traffic rate  tx_rate  rx_rate  c  a
    stop traffic  ${stream}
    stop traffic  ${stream1}
    ${stream2}=             L3 add  no_arp=True  flow=e->c  src_mac=00:01:01:00:00:01  dst_mac=00:02:02:00:00:01  src_cnt=16000   frame_rate=1000  frame_size=68  name=e_c_flow
    start traffic  ${stream2}
    start traffic  ${stream1}
    sleep  20
    rest verify forwarding layer2 table untag  leaf2-a  ${leaf2a_ixia_intf}  00:01:01:00:00:01
    verify traffic rate  tx_rate  rx_rate  c  e
    verify traffic rate negative  tx_rate  rx_rate  c  a  
    stop traffic  ${stream2}
    stop traffic  ${stream1}

Mac move at scale 48k between rack
	[Tags]  scaling     
	${stream}=             L3 add  no_arp=True  flow=a->c  src_mac=00:01:01:00:00:01  dst_mac=00:02:02:00:00:01  src_cnt=24000    frame_rate=1000  frame_size=68  name=a_c_flow
	${stream1}=             L3 add  no_arp=True  flow=c->a  src_mac=00:02:02:00:00:01  dst_mac=00:01:01:00:00:01  dst_cnt=24000    frame_rate=1000  frame_size=68  name=c_a_flow
	${stream2}=             L3 add  no_arp=True  flow=b->d  src_mac=00:03:03:00:00:01  dst_mac=00:04:04:00:00:01  src_cnt=24000    frame_rate=1000  frame_size=68  name=b_d_flow
	${stream3}=             L3 add  no_arp=True  flow=d->b  src_mac=00:04:04:00:00:01  dst_mac=00:03:03:00:00:01  dst_cnt=24000    frame_rate=1000  frame_size=68  name=d_b_flow
    start traffic  ${stream}
    start traffic  ${stream1}
    start traffic  ${stream2}
    start traffic  ${stream3}  
    sleep  120  
    rest verify endpoint in system  48002
    rest verify forwarding layer2 table untag  leaf0-a  ${leaf0a_ixia_intf}  00:01:01:00:00:01
    rest verify forwarding layer2 table untag  leaf0-b  ${leaf0b_ixia_intf}  00:03:03:00:00:01
    verify traffic rate  tx_rate  rx_rate  c  a
    verify traffic rate  tx_rate  rx_rate  d  b
    stop traffic  
    ${stream4}=             L3 add  no_arp=True  flow=e->c  src_mac=00:01:01:00:00:01  dst_mac=00:02:02:00:00:01  src_cnt=24000   frame_rate=1000  frame_size=68  name=e_c_flow
    ${stream5}=             L3 add  no_arp=True  flow=f->d  src_mac=00:03:03:00:00:01  dst_mac=00:04:04:00:00:01  src_cnt=24000   frame_rate=1000  frame_size=68  name=e_c_flow    
    start traffic  ${stream4}
    start traffic  ${stream5}
    start traffic  ${stream1}
    start traffic  ${stream3}
    sleep  120
    rest verify forwarding layer2 table untag  leaf2-a  ${leaf2a_ixia_intf}  00:01:01:00:00:01
    rest verify forwarding layer2 table untag  leaf2-b  ${leaf2b_ixia_intf}  00:03:03:00:00:01
    verify traffic rate  tx_rate  rx_rate  c  e
    verify traffic rate negative  tx_rate  rx_rate  c  a  
    verify traffic rate  tx_rate  rx_rate  d  f
    verify traffic rate negative  tx_rate  rx_rate  d  b    
    stop traffic  ${stream3}
    stop traffic  ${stream1}
    stop traffic  ${stream4}
    stop traffic  ${stream5}
        
Tear down the config
   [Tags]  L2   run    
   delete fabric switch
   rest delete tenant  t1
   base suite teardown

* Keywords      
   
add a tenant  [Arguments]  ${tenant} 
  REST add tenant  ${tenant}    

delete a tenant  [Arguments]  ${tenant} 
  	REST delete tenant  ${tenant}    

add a vns  [Arguments]  ${tenant}  ${vns}  
	REST add vns  ${tenant}  ${vns}   

delete a vns  [Arguments]  ${tenant}  ${vns} 
  	REST delete vns  ${tenant}  ${vns}   

add a portgroup  [Arguments]  ${pg}
  	REST add portgroup  ${pg}    

delete a portgroup  [Arguments]  ${pg}
  	REST delete portgroup  ${pg}    

add a endpoint  [Arguments]  ${tenant}  ${vns}  ${endpoint} 
  	REST add endpoint  ${tenant}  ${vns}  ${endpoint}  

delete a endpoint  [Arguments]  ${tenant}  ${vns}  ${endpoint}
  	REST delete endpoint  ${tenant}  ${vns}  ${endpoint}  

add interface to portgroup  [Arguments]  ${switch}  ${intf}  ${pg} 
  	REST add interface to portgroup  ${switch}  ${intf}  ${pg}  

delete interface from portgroup  [Arguments]  ${switch}  ${intf}  ${pg} 
  	REST delete interface from portgroup  ${switch}  ${intf}  ${pg}  

add portgroup to vns  [Arguments]  ${tenant}  ${vns}  ${pg}  ${vlan}
  	REST add portgroup to vns  ${tenant}  ${vns}  ${pg}  ${vlan} 

add portgroup to endpoint  [Arguments]  ${tenant}  ${vns}  ${endpoint}  ${pg}  ${vlan} 
    REST add portgroup to endpoint  ${tenant}  ${vns}  ${endpoint}  ${pg}  ${vlan} 

delete portgroup from vns  [Arguments]  ${tenant}  ${vns}  ${pg}  ${vlan} 
    REST delete portgroup from vns  ${tenant}  ${vns}  ${pg}  ${vlan}

verify traffic rate   [Arguments]  ${tx_rate}  ${rx_rate}  ${tx_intf}  ${rx_intf}
    Sleep  5
    ${report}=  fetch port stats
    Log  ${report}
    ${tx_value}=  verify dict key  ${report}  ${tx_intf}  transmitted_frame_rate
    ${rx_value}=  verify dict key  ${report}  ${rx_intf}  received_valid_frame_rate
    ixia verify traffic rate  ${tx_value}  ${rx_value}
    
verify traffic rate negative   [Arguments]  ${tx_rate}  ${rx_rate}  ${tx_intf}  ${rx_intf}
    Sleep  5
    ${report}=  fetch port stats
    ${tx_value}=  verify dict key  ${report}  ${tx_intf}  transmitted_frame_rate
    ${rx_value}=  verify dict key  ${report}  ${rx_intf}  received_valid_frame_rate
    Should Not be equal  ${tx_value}  ${rx_value}

T5 test teardown
	delete traffic
	delete a tenant  t1
	sleep  2
	base test teardown

T5 test setup
	base test setup
	rest add tenant  t1
	rest add vns  t1  v1
	rest add interface to vns  t1  v1  leaf0-a  ${leaf0a_ixia_intf}  -1
	rest add interface to vns  t1  v1  leaf1-a  ${leaf1a_ixia_intf}  -1
	rest add interface to vns  t1  v1  leaf2-a  ${leaf2a_ixia_intf}  -1
	rest add interface to vns  t1  v1  leaf0-b  ${leaf0b_ixia_intf}  -1
	rest add interface to vns  t1  v1  leaf1-b  ${leaf1b_ixia_intf}  -1
	rest add interface to vns  t1  v1  leaf2-b  ${leaf2b_ixia_intf}  -1
	
T5 suite teardown
   delete fabric switch
   rest delete tenant  t1
   base suite teardown
   
bring up 1 gig interface
	bash execute command  leaf0-a  ofad-ctl autoneg 24
	bash execute command  leaf0-a  ofad-ctl autoneg 25
	bash execute command  leaf0-a  ofad-ctl autoneg 26
	bash execute command  leaf0-b  ofad-ctl autoneg 24
	bash execute command  leaf1-a  ofad-ctl autoneg 24
	bash execute command  leaf1-a  ofad-ctl autoneg 25
	bash execute command  leaf1-a  ofad-ctl autoneg 26
	bash execute command  leaf1-b  ofad-ctl autoneg 24
	bash execute command  leaf2-a  ofad-ctl autoneg 24
	bash execute command  leaf2-b  ofad-ctl autoneg 24
	
  