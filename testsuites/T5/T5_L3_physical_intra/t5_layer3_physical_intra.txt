* Setting
Documentation   T5 Basic L3 two spine three leaf rack with dual-tor Test Suite
Suite Setup     T5 base suite setup
Suite Teardown  T5 base suite teardown
Test Setup      setup topology
Test Teardown   teardown topology
Force Tags      T5 Sanity
Library         keywords/BsnCommon.py
Library         keywords/Host.py
Library         keywords/T5.py
Library         keywords/T5L3.py
Library         keywords/T5Platform.py
Library         keywords_dev/animesh/BsnCommonShow.py
Library	        Collections.py
Library         keywords/Ixia.py
Resource		testsuites/T5_L3_physical_intra/t5_layer3_physical_intra_variables.txt
Resource		testsuites/T5/t5_dualleaf_three_rack_physical_resource.txt


* Test Cases
Intra tenant L3 untagged traffic with dynamic endpoints same rack
	L3 intra tenant same rack untagged with dynamic endpoints
	[Tags]							smoke				sanity			

Intra tenant L3 untagged traffic with dynamic endpoints across rack
	L3 intra tenant across rack untagged with dynamic endpoints
	[Tags]							smoke				sanity	

Intra tenant L3 tagged traffic with dynamic endpoints same rack
	L3 intra tenant same rack tagged with dynamic endpoints
	[Tags]							smoke				sanity			

Intra tenant L3 tagged traffic with dynamic endpoints across rack
	L3 intra tenant across rack tagged with dynamic endpoints
	[Tags]							smoke				sanity	

Intra tenant L3 untagged traffic with static endpoints same rack
	L3 intra tenant same rack untagged with static endpoints
	[Tags]							smoke				sanity			

Intra tenant L3 untagged traffic with static endpoints across rack
	L3 intra tenant across rack untagged with static endpoints
	[Tags]							smoke				sanity	

Intra tenant L3 tagged traffic with static endpoints same rack
	L3 intra tenant same rack tagged with static endpoints
	[Tags]							smoke				sanity			

Intra tenant L3 tagged traffic with static endpoints across rack
	L3 intra tenant across rack tagged with static endpoints
	[Tags]							smoke				sanity	

Intra tenant dhcp relay 
	L3 intra tenant dhcp relay on same rack
	[Tags]							smoke				sanity	
	
Intra tenant dhcp relay with circuit id
	L3 intra tenant dhcp relay with circuit id on same rack
	[Tags]							smoke				sanity	

Intra tenant dhcp relay across rack
	L3 intra tenant dhcp relay across rack
	[Tags]							smoke				sanity	
	
Intra tenant dhcp relay with circuit id across rack
	L3 intra tenant dhcp relay with circuit id across rack
	[Tags]							smoke				sanity	

Delete and Add dhcp relay
	L3 dhcp request without dhcp relay enabled
	[Tags]							sanity	

Add and delete untagged endpoints with existing host
	L3 add and delete untagged endpoints with existing host
	[Tags]							feature	
	
Add and delete tagged endpoints with existing host
	L3 add and delete tagged endpoints with existing host
	[Tags]							feature	
		
Change L3 endpoint from untagged to tagged and back		
	L3 change endpoint from untagged to tagged and back	
	[Tags]							feature	

Verify L3 endpoint aging
	Check L3 endpoint aging 
	[Tags]							feature	
	
Verify L3 ttl 1 is not being forwarded
	Check L3 ttl 1 is dropped
	[Tags]							sanity			

Change router vns ip
	Change router ip address
	[Tags]							feature			

Delete and add router vns ip
	Delete and add router vns ip 
	[Tags]							feature			

Change tagged endpoint IP address
	Change tagged host endpoint IP address
	[Tags]							feature		

Configure static endpoint with host showing up on another port
	Static endpoint with dynamic host showing up on another port
	[Tags]							sanity		

Verify subnet mask is properly applied on router vns
	Verify subnet mask on vns router ip
	[Tags]							feature		

Verify vlsm forwarding
	Verify vlsm forwarding
	[Tags]							feature		

Verify split horizon forwarding
	Verify l3 forwarding on one arm router
	[Tags]							feature			manual		

	
Configure overlapping router IP 	
	Configure overlapping IP on same tenant across VNS	
	[Tags]							feature		
	
Trigger controller HA failover via CLI
	Controller HA failover via CLI	
	[Tags]							feature			
	
Trigger controller HA failover via reboot
	Controller HA failover via reboot
	[Tags]							feature			

Spine reboot
	Reboot spine0 via CLI
	[Tags]							feature			

Leaf reboot
	Reboot Leaf0 via CLI
	[Tags]							feature			

Spine connect and disconnect to controller
	Connect and Disconnect spine to controller
	[Tags]							feature			
	
Leaf connect and disconnect to controller	
	Connect and disconnect one leaf in dual tor to controller
	[Tags]							feature			

Spine to leaf link flap
	Flap link between leaf and spine
	[Tags]							feature			

Leaf to host link flap
	Flap bond interface towards host
	[Tags]							feature			
	
Restart ofad process on spine
	restart ofad on spine
	[Tags]							feature			
	
Restart ofad process on leaf	
	restart ofad on leaf
	[Tags]							feature			
	
L3 traffic behavior in headless mode
	L3 intra tenant traffic behavior in headless mode 
	Log								manual untested
#	[Tags]							manual			untested			feature			

L3 intra tenant traceroute
	Log								manual untested
#	[Tags]							manual			untested			feature			
		
	
* Keywords
L3 intra tenant same rack untagged with dynamic endpoints
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0	
	BASH ifup intf								h5								bond0	
	BASH ifup intf								h6								bond0			
	REST add portgroup to vns					X								X1						${leaf2_pc1}			-1
	REST add portgroup to vns					X								X2						${leaf2_pc2}			-1
	REST add interface to vns					X								X1						${leaf0-a}				${ixia1}				-1
	REST add interface to vns					X								X2						${leaf1-a}				${ixia3}				-1
	BASH add ip address							h5								10.251.1.11/24			bond0	
	BASH add ip address							h6								10.251.2.11/24			bond0
	BASH add route								h5								10.251.2.0/24			10.251.1.1
	BASH add route								h6								10.251.1.0/24			10.251.2.1
	sleep								20	
	BASH ping									h5								10.251.1.1				count=10
	BASH ping									h6								10.251.2.1				count=10
	${value} = 									BASH verify arp					h5						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h6						10.251.2.1
	Should Be True								${value} 
	${mac1} = 									BASH get intf mac				h5						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h6						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h5						10.251.2.11 			count=10
	Should Be True  							${loss} == 0	
	${stream1}=  								L3 add  						name=stream1		  	flow=a<->c 				frame_rate=100000  			frame_size=9216  			frame_cnt=10000000
	...     									src_ip=10.251.1.101				src_gw=10.251.1.1		dst_ip=10.251.2.201		dst_gw=10.251.2.1			 			
    start traffic  								${stream1}
    sleep  10
    stop traffic								${stream1}
    verify results 								transmitted_frames  			received_frames  		${stream1}  			stream1
	BASH delete route							h5								10.251.2.0/24			10.251.1.1
	BASH delete route							h6								10.251.1.0/24			10.251.2.1
	
	
L3 intra tenant across rack untagged with dynamic endpoints
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0		
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0			
	REST add portgroup to vns					X								X1						${leaf2_pc1}			-1
	REST add portgroup to vns					X								X3						${leaf1_pc2}			-1
	BASH add ip address							h5								10.251.1.11/24			bond0	
	BASH add ip address							h4								10.251.3.11/24			bond0
	BASH add route								h5								10.251.3.0/24			10.251.1.1
	BASH add route								h4								10.251.1.0/24			10.251.3.1
	sleep										20	
	BASH ping									h5								10.251.1.1				count=10
	BASH ping									h4								10.251.3.1				count=10
	${value} = 									BASH verify arp					h5						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h4						10.251.3.1
	Should Be True								${value} 	
	${mac1} = 									BASH get intf mac				h5						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h4						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h5						10.251.3.11 			count=10
	Should Be True  							${loss} == 0	
	BASH delete route							h5								10.251.3.0/24			10.251.1.1
	BASH delete route							h4								10.251.1.0/24			10.251.3.1

	
L3 intra tenant same rack tagged with dynamic endpoints
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0				
	REST add portgroup to vns					X								X1						${leaf0_pc1}			1001
	REST add portgroup to vns					X								X2						${leaf0_pc2}			1002
	BASH add tag								h1								bond0					1001
	BASH add tag								h2								bond0					1002
	BASH ifup intf								h1								bond0.1001
	BASH ifup intf								h2								bond0.1002
	BASH add ip address							h1								10.251.1.11/24			bond0.1001	
	BASH add ip address							h2								10.251.2.11/24			bond0.1002
	BASH add route								h1								10.251.2.0/24			10.251.1.1
	BASH add route								h2								10.251.1.0/24			10.251.2.1
	sleep										20	
	BASH ping									h1								10.251.1.1				count=10
	BASH ping									h2								10.251.2.1				count=10
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Not Be True							${value} 		
	${value} =									BASH verify arp					h2						10.251.2.1
	Should Not Be True							${value} 	
	BASH ping									h1								10.251.2.11				count=10
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h2						10.251.2.1
	Should Be True								${value} 	
	${mac1} = 									BASH get intf mac				h1						bond0.1001
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h2						bond0.1002
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints		
	${loss} = 									BASH ping						h1						10.251.2.11 			count=10
	Should Be True  							${loss} == 0	
	BASH delete route							h1								10.251.2.0/24			10.251.1.1
	BASH delete route							h2								10.251.1.0/24			10.251.2.1
	
	
L3 intra tenant across rack tagged with dynamic endpoints
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0	
	REST add portgroup to vns					X								X1						${leaf0_pc1}			1001
	REST add portgroup to vns					X								X3						${leaf1_pc1}			1003
	BASH add tag								h1								bond0					1001
	BASH add tag								h3								bond0					1003
	BASH ifup intf								h1								bond0.1001
	BASH ifup intf								h3								bond0.1003
	BASH add ip address							h1								10.251.1.11/24			bond0.1001
	BASH add ip address							h3								10.251.3.11/24			bond0.1003
	BASH add route								h1								10.251.3.0/24			10.251.1.1
	BASH add route								h3								10.251.1.0/24			10.251.3.1
	sleep										20	
#	BASH ping									h1								10.251.1.1				count=10
#	BASH ping									h3								10.251.3.1				count=10
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Not Be True							${value} 		
	${value} =									BASH verify arp					h3						10.251.3.1
	Should Not Be True							${value} 	
	BASH ping									h1								10.251.3.11				count=10
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h3						10.251.3.1
	Should Be True								${value} 		
	${mac1} = 									BASH get intf mac				h1						bond0.1001
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h3						bond0.1003
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints		
	${loss} = 									BASH ping						h1						10.251.3.11 			count=10
	Should Be True  							${loss} == 0		
	BASH delete route							h1								10.251.3.0/24			10.251.1.1
	BASH delete route							h3								10.251.1.0/24			10.251.3.1


L3 intra tenant same rack untagged with static endpoints
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0	
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0			
	REST add portgroup to vns					X								X1						${leaf2_pc1}			-1
	REST add portgroup to vns					X								X2						${leaf2_pc2}			-1
	REST add endpoint							X								X1						X1_pc1
	REST add endpoint							X								X2						X2_pc2
	REST add endpoint ip						X								X1						X1_pc1					10.251.1.11
	REST add endpoint ip						X								X2						X2_pc2					10.251.2.11
	${mac1} = 									BASH get intf mac				h5						bond0
	REST add endpoint mac						X								X1						X1_pc1					${mac1}
	REST add endpoint portgroup attachment		X								X1						X1_pc1					${leaf2_pc1}				-1	
	${mac2} = 									BASH get intf mac				h6						bond0
	REST add endpoint mac						X								X2						X2_pc2					${mac2}
	REST add endpoint portgroup attachment		X								X2						X2_pc2					${leaf2_pc2}				-1	
	BASH add ip address							h5								10.251.1.11/24			bond0	
	BASH add ip address							h6								10.251.2.11/24			bond0
	BASH add route								h5								10.251.2.0/24			10.251.1.1
	BASH add route								h6								10.251.1.0/24			10.251.2.1
	sleep										20	
	BASH ping									h5								10.251.1.1				count=10
	BASH ping									h6								10.251.2.1				count=10
	${value} = 									BASH verify arp					h5						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h6						10.251.2.1
	Should Be True								${value} 
	${mac1} = 									BASH get intf mac				h5						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h6						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h5						10.251.2.11 			count=10
	Should Be True  							${loss} == 0	
	BASH delete route							h5								10.251.2.0/24			10.251.1.1
	BASH delete route							h6								10.251.1.0/24			10.251.2.1


L3 intra tenant across rack untagged with static endpoints
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0	
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0		
	REST add portgroup to vns					X								X1						${leaf1_pc2}			-1
	REST add portgroup to vns					X								X3						${leaf2_pc1}			-1
	REST add endpoint							X								X1						X1_pc1
	REST add endpoint							X								X3						X3_pc6
	REST add endpoint ip						X								X1						X1_pc1					10.251.1.11
	REST add endpoint ip						X								X3						X3_pc6					10.251.3.11
	${mac1} = 									BASH get intf mac				h4						bond0
	REST add endpoint mac						X								X1						X1_pc1					${mac1}
	REST add endpoint portgroup attachment		X								X1						X1_pc1					${leaf1_pc2}				-1	
	${mac2} = 									BASH get intf mac				h5						bond0
	REST add endpoint mac						X								X3						X3_pc6					${mac2}
	REST add endpoint portgroup attachment		X								X3						X3_pc6					${leaf2_pc1}				-1	
	REST add portgroup to vns					X								X1						${leaf1_pc2}			-1
	REST add portgroup to vns					X								X3						${leaf2_pc1}			-1
	BASH add ip address							h4								10.251.1.11/24			bond0	
	BASH add ip address							h5								10.251.3.11/24			bond0
	BASH add route								h4								10.251.3.0/24			10.251.1.1
	BASH add route								h5								10.251.1.0/24			10.251.3.1
	sleep										20	
	BASH ping									h4								10.251.1.1				count=10
	BASH ping									h5								10.251.3.1				count=10
	${value} = 									BASH verify arp					h4						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h5						10.251.3.1
	Should Be True								${value} 	
	${mac1} = 									BASH get intf mac				h4						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h5						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h4						10.251.3.11 			count=10
	Should Be True  							${loss} == 0	
	BASH delete route							h4								10.251.3.0/24			10.251.1.1
	BASH delete route							h5								10.251.1.0/24			10.251.3.1


L3 intra tenant same rack tagged with static endpoints
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0				
	REST add portgroup to vns					X								X1						${leaf0_pc1}			1001
	REST add portgroup to vns					X								X2						${leaf0_pc2}			1002
	REST add endpoint							X								X1						X1_pc1
	REST add endpoint							X								X2						X2_pc2
	REST add endpoint ip						X								X1						X1_pc1					10.251.1.11
	REST add endpoint ip						X								X2						X2_pc2					10.251.2.11
	${mac1} = 									BASH get intf mac				h1						bond0
	REST add endpoint mac						X								X1						X1_pc1					${mac1}
	REST add endpoint portgroup attachment		X								X1						X1_pc1					${leaf0_pc1}				1001	
	${mac2} = 									BASH get intf mac				h2						bond0
	REST add endpoint mac						X								X2						X2_pc1					${mac2}
	REST add endpoint portgroup attachment		X								X2						X2_pc1					${leaf0_pc2}				1002	
	REST add portgroup to vns					X								X1						${leaf0_pc1}			1001
	REST add portgroup to vns					X								X2						${leaf0_pc2}			1002
	BASH add tag								h1								bond0					1001
	BASH add tag								h2								bond0					1002
	BASH ifup intf								h1								bond0.1001
	BASH ifup intf								h2								bond0.1002
	BASH add ip address							h1								10.251.1.11/24			bond0.1001	
	BASH add ip address							h2								10.251.2.11/24			bond0.1002
	BASH add route								h1								10.251.2.0/24			10.251.1.1
	BASH add route								h2								10.251.1.0/24			10.251.2.1
	sleep								20	
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Not Be True							${value} 		
	${value} =									BASH verify arp					h2						10.251.2.1
	Should Not Be True							${value} 	
	BASH ping									h1								10.251.2.11				count=10
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h2						10.251.2.1
	Should Be True								${value} 	
	${mac1} = 									BASH get intf mac				h1						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h2						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints		
	${loss} = 									BASH ping						h1						10.251.2.11 			count=10
	Should Be True  							${loss} == 0	
	BASH delete route							h1								10.251.2.0/24			10.251.1.1
	BASH delete route							h2								10.251.1.0/24			10.251.2.1
	
		
L3 intra tenant across rack tagged with static endpoints
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0	
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0			
	REST add portgroup to vns					X								X1						${leaf0_pc1}			1001
	REST add portgroup to vns					X								X3						${leaf1_pc1}			1003
	REST add endpoint							X								X1						X1_pc1
	REST add endpoint							X								X3						X3_pc6
	REST add endpoint ip						X								X1						X1_pc1					10.251.1.11
	REST add endpoint ip						X								X3						X3_pc6					10.251.3.11
	${mac1} = 									BASH get intf mac				h1						bond0
	REST add endpoint mac						X								X1						X1_pc1					${mac1}
	REST add endpoint portgroup attachment		X								X1						X1_pc1					${leaf0_pc1}				1001	
	${mac2} = 									BASH get intf mac				h3						bond0
	REST add endpoint mac						X								X3						X3_pc6					${mac2}
	REST add endpoint portgroup attachment		X								X3						X3_pc6					${leaf1_pc1}				1003
	REST add portgroup to vns					X								X1						${leaf0_pc1}			1001
	REST add portgroup to vns					X								X3						${leaf1_pc1}			1003
	BASH add tag								h1								bond0					1001
	BASH add tag								h3								bond0					1003
	BASH ifup intf								h1								bond0.1001
	BASH ifup intf								h3								bond0.1003
	BASH add ip address							h1								10.251.1.11/24			bond0.1001
	BASH add ip address							h3								10.251.3.11/24			bond0.1003
	BASH add route								h1								10.251.3.0/24			10.251.1.1
	BASH add route								h3								10.251.1.0/24			10.251.3.1
	sleep								20	
#	BASH ping									h1								10.251.1.1				count=10
#	BASH ping									h3								10.251.3.1				count=10
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Not Be True							${value} 		
	${value} =									BASH verify arp					h3						10.251.3.1
	Should Not Be True							${value} 	
	BASH ping									h1								10.251.3.11				count=10
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h3						10.251.3.1
	Should Be True								${value} 		
	${mac1} = 									BASH get intf mac				h1						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h3						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints		
	${loss} = 									BASH ping						h1						10.251.3.11 			count=10
	Should Be True  							${loss} == 0		
	BASH delete route							h1								10.251.3.0/24			10.251.1.1
	BASH delete route							h3								10.251.1.0/24			10.251.3.1


L3 intra tenant dhcp relay on same rack
	BASH ifdown intf							h1 								bond0
	BASH ifdown intf							h2								bond0
	BASH ifdown intf							h3								bond0
	BASH ifdown intf							h4								bond0	
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0		
	BASH init intf								h1								bond0
	BASH init intf								h2								bond0
	BASH ifup intf								h1								bond0
	BASH add ip address							h1								10.252.1.9/24			bond0					
	BASH start service							h1								isc-dhcp-server
	sleep								1
	${value} = 									BASH check service status		h1						isc-dhcp-server
	Should Contain								${value}						is started
	sleep								1
	REST add portgroup to vns					Y								Y1						${leaf0_pc1}			-1
	REST add portgroup to vns					Y								Y3						${leaf0_pc2}			-1
	BASH add route								h1								10.252.3.0/24			10.252.1.1
	REST add dhcp relay							Y								Y3						10.252.1.9
	REST enable dhcp relay						Y								Y3	
	sleep								20
	${h1_ip} = 									BASH get intf ipv4				h1						bond0				
	Should Be Equal As Strings					${h1_ip}						10.252.1.9	
	${h1_mac} =									BASH get intf mac				h1						bond0
	###### another hac to overcome jira PAN 726
	BASH delete arp								h1								10.252.1.1
	${value} = 									BASH verify arp					h1						10.252.1.1
	Should Not Be True							${value} 		
	###### hack to force host to resolve gateway, by right, vrf should attempt to resolve dhcp-server mac address and discover its endpoint but that is not happening
	BASH ping									h1 								10.252.1.1				count=5
	${result} = 								REST show endpoints mac			${h1_mac}
	Should Not Be Empty							${result}
	sleep								1
	${value} = 									BASH verify arp					h1						10.252.1.1
	Should Be True								${value} 		
	sleep								1
	${value} = 									BASH release dhcpv4 address		h2						bond0
	Should Be True								${value}
	sleep								1
	${ipAddr} = 								BASH renew dhcpv4 address		h2						bond0
	Should Not Be Empty							${ipAddr}
	sleep								10
	BASH ping									h1								${ipAddr}				count=10
	${value} = 									BASH verify arp					h1						10.252.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h2						10.252.3.1
	Should Be True								${value} 	
	${mac1} = 									BASH get intf mac				h1						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h2						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h1						${ipAddr} 			count=10
	Should Be True  							${loss} == 0	
	BASH delete route							h1								10.252.3.0/24			10.252.1.1


L3 intra tenant dhcp relay with circuit id on same rack
	BASH ifdown intf							h1 								bond0
	BASH ifdown intf							h2								bond0
	BASH ifdown intf							h3								bond0
	BASH ifdown intf							h4								bond0	
	BASH init intf								h1								bond0
	BASH init intf								h2								bond0
	BASH ifup intf								h1								bond0
	BASH add ip address							h1								10.252.1.9/24			bond0					
	BASH start service							h1								isc-dhcp-server
	sleep								1
	${value} = 									BASH check service status		h1						isc-dhcp-server
	Should Contain								${value}						is started
	sleep								1
	REST add portgroup to vns					Y								Y1						${leaf0_pc1}			-1
	REST add portgroup to vns					Y								Y2						${leaf0_pc2}			-1
	BASH add route								h1								10.252.2.0/24			10.252.1.1
	REST add dhcp relay							Y								Y2						10.252.1.9
	REST add dhcprelay circuitid				Y								Y2						&#!ten Y vns Y2
	REST enable dhcp relay						Y								Y2	
	sleep										20
	###### hack to force host to resolve gateway, by right, vrf should attempt to resolve dhcp-server mac address and discover its endpoint but that is not happening
	BASH ping									h1 								10.252.1.1				count=5
	sleep								1
	${value} = 									BASH verify arp					h1						10.252.1.1
	Should Be True								${value} 		
	sleep								1
	${value} = 									BASH release dhcpv4 address		h2						bond0
	Should Be True								${value}
	sleep								1
	${ipAddr} = 								BASH renew dhcpv4 address		h2						bond0
#	Should Not Be True							'${ipAddr}' == '' 
	Should Not Be Empty							${ipAddr}
	sleep								5
	BASH ping									h1								${ipAddr}				count=10
	${value} = 									BASH verify arp					h1						10.252.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h2						10.252.2.1
	Should Be True								${value} 	
	${mac1} = 									BASH get intf mac				h1						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h2						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h1						${ipAddr} 			count=10
	Should Be True  							${loss} == 0	
	BASH delete route							h1								10.252.2.0/24			10.252.1.1


L3 intra tenant dhcp relay across rack
	BASH ifdown intf							h1 								bond0
	BASH ifdown intf							h2								bond0
	BASH ifdown intf							h3								bond0
	BASH ifdown intf							h4								bond0	
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0		
	BASH init intf								h1								bond0
	BASH init intf								h2								bond0
	BASH ifup intf								h1								bond0
	BASH add ip address							h1								10.252.1.9/24			bond0					
	BASH start service							h1								isc-dhcp-server
	sleep										1
	${value} = 									BASH check service status		h1						isc-dhcp-server
	Should Contain								${value}						is started
	sleep										1
	REST add portgroup to vns					Y								Y1						${leaf0_pc1}			-1
	REST add portgroup to vns					Y								Y3						${leaf2_pc1}			-1
	BASH add route								h1								10.252.3.0/24			10.252.1.1
	REST add dhcp relay							Y								Y3						10.252.1.9
	REST enable dhcp relay						Y								Y3	
	sleep										20
	${h1_ip} = 									BASH get intf ipv4				h1						bond0				
	Should Be Equal As Strings					${h1_ip}						10.252.1.9	
	${h1_mac} =									BASH get intf mac				h1						bond0
	###### another hac to overcome jira PAN 726
	BASH delete arp								h1								10.252.1.1
	${value} = 									BASH verify arp					h1						10.252.1.1
	Should Not Be True							${value} 		
	###### hack to force host to resolve gateway, by right, vrf should attempt to resolve dhcp-server mac address and discover its endpoint but that is not happening
	BASH ping									h1 								10.252.1.1				count=5
	${result} = 								REST show endpoints mac			${h1_mac}
	Should Not Be Empty							${result}
	sleep										1
	${value} = 									BASH verify arp					h1						10.252.1.1
	Should Be True								${value} 		
	sleep										1
	${value} = 									BASH release dhcpv4 address		h5						bond0
	Should Be True								${value}
	sleep										1
	${ipAddr} = 								BASH renew dhcpv4 address		h5						bond0
	Should Not Be Empty							${ipAddr}
	sleep										10
	BASH ping									h1								${ipAddr}				count=10
	${value} = 									BASH verify arp					h1						10.252.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h5						10.252.3.1
	Should Be True								${value} 	
	${mac1} = 									BASH get intf mac				h1						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h5						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h1						${ipAddr} 			count=10
	Should Be True  							${loss} == 0	
	BASH delete route							h1								10.252.3.0/24			10.252.1.1
	

L3 intra tenant dhcp relay with circuit id across rack
	BASH ifdown intf							h1 								bond0
	BASH ifdown intf							h2								bond0
	BASH ifdown intf							h3								bond0
	BASH ifdown intf							h4								bond0	
	BASH init intf								h1								bond0
	BASH init intf								h2								bond0
	BASH ifup intf								h1								bond0
	BASH add ip address							h1								10.252.1.9/24			bond0					
	BASH start service							h1								isc-dhcp-server
	sleep										1
	${value} = 									BASH check service status		h1						isc-dhcp-server
	Should Contain								${value}						is started
	sleep										1
	REST add portgroup to vns					Y								Y1						${leaf0_pc1}			-1
	REST add portgroup to vns					Y								Y2						${leaf1_pc1}			-1
	BASH add route								h1								10.252.2.0/24			10.252.1.1
	REST add dhcp relay							Y								Y2						10.252.1.9
	REST add dhcprelay circuitid				Y								Y2						&#!ten Y vns Y2
	REST enable dhcp relay						Y								Y2	
	sleep										20
	###### hack to force host to resolve gateway, by right, vrf should attempt to resolve dhcp-server mac address and discover its endpoint but that is not happening
	BASH ping									h1 								10.252.1.1				count=5
	sleep										1
	${value} = 									BASH verify arp					h1						10.252.1.1
	Should Be True								${value} 		
	sleep										1
	${value} = 									BASH release dhcpv4 address		h3						bond0
	Should Be True								${value}
	sleep										1
	${ipAddr} = 								BASH renew dhcpv4 address		h3						bond0
#	Should Not Be True							'${ipAddr}' == '' 
	Should Not Be Empty							${ipAddr}
	sleep										5
	BASH ping									h1								${ipAddr}				count=10
	${value} = 									BASH verify arp					h1						10.252.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h3						10.252.2.1
	Should Be True								${value} 	
	${mac1} = 									BASH get intf mac				h1						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h3						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h1						${ipAddr} 			count=10
	Should Be True  							${loss} == 0	
	BASH delete route							h1								10.252.2.0/24			10.252.1.1


L3 dhcp request without dhcp relay enabled
	BASH ifdown intf							h1 								bond0
	BASH ifdown intf							h2								bond0
	BASH ifdown intf							h3								bond0
	BASH ifdown intf							h4								bond0	
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0		
	BASH init intf								h1								bond0
	BASH init intf								h2								bond0
	BASH ifup intf								h1								bond0
	BASH add ip address							h1								10.252.1.9/24			bond0					
	BASH start service							h1								isc-dhcp-server
	sleep										1
	${value} = 									BASH check service status		h1						isc-dhcp-server
	Should Contain								${value}						is started
	sleep										1
	REST add portgroup to vns					Y								Y1						${leaf0_pc1}			-1
	REST add portgroup to vns					Y								Y3						${leaf2_pc1}			-1
	BASH add route								h1								10.252.3.0/24			10.252.1.1
	REST add dhcp relay							Y								Y3						10.252.1.9
	REST enable dhcp relay						Y								Y3	
	sleep										20
	${h1_ip} = 									BASH get intf ipv4				h1						bond0				
	Should Be Equal As Strings					${h1_ip}						10.252.1.9	
	${h1_mac} =									BASH get intf mac				h1						bond0
	###### another hac to overcome jira PAN 726
	BASH delete arp								h1								10.252.1.1
	${value} = 									BASH verify arp					h1						10.252.1.1
	Should Not Be True							${value} 		
	###### hack to force host to resolve gateway, by right, vrf should attempt to resolve dhcp-server mac address and discover its endpoint but that is not happening
	BASH ping									h1 								10.252.1.1				count=5
	${result} = 								REST show endpoints mac			${h1_mac}
	Should Not Be Empty							${result}
	sleep										1
	${value} = 									BASH verify arp					h1						10.252.1.1
	Should Be True								${value} 		
	sleep										1
	${value} = 									BASH release dhcpv4 address		h5						bond0
	Should Be True								${value}
	sleep										1
	${ipAddr} = 								BASH renew dhcpv4 address		h5						bond0
	Should Not Be Empty							${ipAddr}
	sleep										10
	BASH ping									h1								${ipAddr}				count=10
	${value} = 									BASH verify arp					h1						10.252.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h5						10.252.3.1
	Should Be True								${value} 	
	${mac1} = 									BASH get intf mac				h1						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h5						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h1						${ipAddr} 			count=10
	Should Be True  							${loss} == 0	
	REST disable dhcp relay						Y								Y3
	REST delete dhcp relay						Y								Y3						10.252.1.9
	BASH release dhcpv4 address					h5								bond0
	sleep										5
	${ipAddr} = 								BASH renew dhcpv4 address		h5						bond0
	Should Be Empty								${ipAddr}
	sleep										5
	REST add dhcp relay							Y								Y3						10.252.1.9
	REST enable dhcp relay						Y								Y3
	sleep										20
	${ipAddr} = 								BASH renew dhcpv4 address		h5						bond0
	Should Not Be Empty							${ipAddr}
	BASH ping									h1								${ipAddr} 				count=10
	${loss} = 									BASH ping						h1						${ipAddr} 			count=10
	Should Be True  							${loss} == 0	
	BASH delete route							h1								10.252.3.0/24			10.252.1.1


L3 add and delete untagged endpoints with existing host
	BASH init intf								h1 								bond0
	BASH init intf								h2								bond0
	BASH init intf								h3								bond0
	BASH init intf								h4								bond0	
	BASH init intf								h5								bond0
	BASH init intf								h6								bond0
	sleep										1
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0		
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0		
	
	REST add portgroup to vns					X								X1						${leaf2_pc1}			-1
	REST add portgroup to vns					X								X2						${leaf2_pc2}			-1
	BASH add ip address							h5								10.251.1.11/24			bond0	
	BASH add ip address							h6								10.251.2.11/24			bond0
	BASH add route								h5								10.251.2.0/24			10.251.1.1
	BASH add route								h6								10.251.1.0/24			10.251.2.1
	sleep										20	
	BASH ping									h5								10.251.1.1				count=10
	BASH ping									h6								10.251.2.1				count=10
	${value} = 									BASH verify arp					h5						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h6						10.251.2.1
	Should Be True								${value} 
	${mac1} = 									BASH get intf mac				h5						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h6						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h5						10.251.2.11 			count=10
	Should Be True  							${loss} == 0	
	REST delete portgroup from vns				X								X1						${leaf2_pc1}			-1
	sleep										1
	${result} =									REST show endpoints mac			${mac1}
	Should Not Be True							${result}	
	sleep										1
	${value} = 									BASH verify arp					h5						10.251.1.1
	Should Be True								${value} 		
	REST add portgroup to vns					X								X1						${leaf2_pc1}			-1
	sleep										5
	BASH ping									h5								10.251.1.1				count=10
	sleep										1
	${result} =									REST show endpoints mac			${mac1}
	BASH ping									h6								10.251.1.11				count=3
	${loss} = 									BASH ping						h6						10.251.1.11				count=10
	Should Be True  							${loss} == 0	
	BASH delete route							h5								10.251.2.0/24			10.251.1.1
	BASH delete route							h6								10.251.1.0/24			10.251.2.1
		

L3 add and delete tagged endpoints with existing host
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0		
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0		
	REST add portgroup to vns					X								X1						${leaf0_pc1}			1001
	REST add portgroup to vns					X								X3						${leaf1_pc1}			1003
	BASH add tag								h1								bond0					1001
	BASH add tag								h3								bond0					1003
	BASH ifup intf								h1								bond0.1001
	BASH ifup intf								h3								bond0.1003
	BASH add ip address							h1								10.251.1.11/24			bond0.1001
	BASH add ip address							h3								10.251.3.11/24			bond0.1003
	BASH add route								h1								10.251.3.0/24			10.251.1.1
	BASH add route								h3								10.251.1.0/24			10.251.3.1
	sleep										20	
#	BASH ping									h3								10.251.1.1				count=10
#	BASH ping									h2								10.251.3.1				count=10
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Not Be True							${value} 		
	${value} =									BASH verify arp					h3						10.251.3.1
	Should Not Be True							${value} 	
	BASH ping									h1								10.251.3.11				count=10
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h3						10.251.3.1
	Should Be True								${value} 		
	${mac1} = 									BASH get intf mac				h1						bond0.1001
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h3						bond0.1003
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints		
	${loss} = 									BASH ping						h1						10.251.3.11 			count=10
	Should Be True  							${loss} == 0		
	REST delete portgroup from vns				X								X1						${leaf0_pc1}			1001
	sleep										1
	${result} =									REST show endpoints mac			${mac1}
	Should Not Be True							${result}	
	sleep										1
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Be True								${value} 		
	REST add portgroup to vns					X								X1						${leaf0_pc1}			1001
	sleep										5
	BASH ping									h1								10.251.3.11				count=10
	sleep										1
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}	
	${loss} = 									BASH ping						h3						10.251.1.11				count=10
	Should Be True  							${loss} == 0		
	BASH delete route							h1								10.251.3.0/24			10.251.1.1
	BASH delete route							h3								10.251.1.0/24			10.251.3.1


L3 change endpoint from untagged to tagged and back
	BASH init intf								h1 								bond0
	BASH init intf								h2								bond0
	BASH init intf								h3								bond0
	BASH init intf								h4								bond0	
	BASH init intf								h5								bond0
	BASH init intf								h6								bond0
	sleep										1
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0		
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0	
	REST add portgroup to vns					X								X1						${leaf2_pc1}			-1
	REST add portgroup to vns					X								X2						${leaf2_pc2}			-1
	BASH add ip address							h5								10.251.1.11/24			bond0	
	BASH add ip address							h6								10.251.2.11/24			bond0
	BASH add route								h5								10.251.2.0/24			10.251.1.1
	BASH add route								h6								10.251.1.0/24			10.251.2.1
	sleep										20	
	BASH ping									h5								10.251.1.1				count=10
	BASH ping									h6								10.251.2.1				count=10
	${value} = 									BASH verify arp					h5						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h6						10.251.2.1
	Should Be True								${value} 
	${mac1} = 									BASH get intf mac				h5						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h6						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h5						10.251.2.11 			count=10
	Should Be True  							${loss} == 0	
	REST delete portgroup from vns				X								X1						${leaf2_pc1}			-1
	sleep										1
	${result} =									REST show endpoints mac			${mac1}
	Should Not Be True							${result}	
	sleep										1
	BASH init intf								h5								bond0
	BASH add tag								h5								bond0					1005
	BASH ifup intf								h5								bond0.1005
	BASH add ip address							h5								10.251.1.11/24			bond0.1005
	BASH add route								h5								10.251.2.0/24			10.251.1.1
	REST add portgroup to vns					X								X1						${leaf2_pc1}			1005
	sleep										5	
	BASH ping									h5								10.251.1.1	
	${value} = 									BASH verify arp					h5						10.251.1.1
	Should Be True								${value} 		
	BASH ping									h5								10.251.1.1				count=10
	sleep										1
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}	
	${loss} = 									BASH ping						h5						10.251.2.11				count=10
	Should Be True  							${loss} == 0	
	sleep										1
	REST delete portgroup from vns				X								X1						${leaf2_pc1}			1005
	BASH init intf								h5								bond0.1005
	BASH delete tag								h5								bond0.1005				
	BASH init intf								h5								bond0
	BASH add ip address							h5								10.251.1.11/24			bond0
	BASH add route								h5								10.251.2.0/24			10.251.1.1
	REST add portgroup to vns					X								X1						${leaf2_pc1}			-1
	sleep										10	
	BASH ping									h5								10.251.1.1	
	${value} = 									BASH verify arp					h5						10.251.1.1
	Should Be True								${value} 		
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}	
	${loss} = 									BASH ping						h5						10.251.2.11				count=10
	Should Be True  							${loss} == 0	
	BASH delete route							h5								10.251.2.0/24			10.251.1.1
	BASH delete route							h6								10.251.1.0/24			10.251.2.1

	
Check L3 endpoint aging 
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0	
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0			
	REST add portgroup to vns					X								X1						${leaf1_pc1}			-1
	REST add portgroup to vns					X								X2						${leaf1_pc2}			-1
	BASH add ip address							h3								10.251.1.11/24			bond0	
	BASH add ip address							h4								10.251.2.11/24			bond0
	BASH add route								h3								10.251.2.0/24			10.251.1.1
	BASH add route								h4								10.251.1.0/24			10.251.2.1
	sleep										20	
	BASH ping									h3								10.251.1.1				count=10
	BASH ping									h4								10.251.2.1				count=10
	${value} = 									BASH verify arp					h3						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h4						10.251.2.1
	Should Be True								${value} 
	${mac1} = 									BASH get intf mac				h3						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h4						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h3						10.251.2.11 			count=10
	Should Be True  							${loss} == 0	
	BASH ifdown intf							h3 								bond0
	${loss} = 									BASH ping						h4						10.251.1.11 			count=10
	Should Be True  							${loss} == 100	
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	sleep										600
	${result} =									REST show endpoints mac			${mac1}
	Should Not Be True							${result}		
	BASH delete route							h3								10.251.2.0/24			10.251.1.1
	BASH delete route							h4								10.251.1.0/24			10.251.2.1
					

Check L3 ttl 1 is dropped
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0		
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0		
	REST add portgroup to vns					X								X1						${leaf1_pc1}			-1
	REST add portgroup to vns					X								X2						${leaf1_pc2}			-1
	BASH add ip address							h3								10.251.1.11/24			bond0	
	BASH add ip address							h4								10.251.2.11/24			bond0
	BASH add route								h3								10.251.2.0/24			10.251.1.1
	BASH add route								h4								10.251.1.0/24			10.251.2.1
	sleep										10	
	BASH ping									h3								10.251.1.1				count=10
	BASH ping									h4								10.251.2.1				count=10
	${value} = 									BASH verify arp					h3						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h4						10.251.2.1
	Should Be True								${value} 
	${mac1} = 									BASH get intf mac				h3						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h4						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h3						10.251.2.11 			count=10
	Should Be True  							${loss} == 0	
	${loss} = 									BASH ping						h3						10.251.2.11 			count=10			ttl=1
	Should Be True  							${loss} == 100			
	${result} =       							BASH content 					h3
    log              							result from bash ping is ${result}
   	Should Contain X Times						${result}						Time to live exceeded	10
 	BASH delete route							h3								10.251.2.0/24			10.251.1.1
	BASH delete route							h4								10.251.1.0/24			10.251.2.1
   	

Change router ip address
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0		
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0		
	REST add portgroup to vns					X								X1						${leaf1_pc1}			-1
	REST add portgroup to vns					X								X2						${leaf1_pc2}			-1
	BASH add ip address							h3								10.251.1.11/24			bond0	
	BASH add ip address							h4								10.251.2.11/24			bond0
	BASH add route								h3								10.251.2.0/24			10.251.1.1
	BASH add route								h4								10.251.1.0/24			10.251.2.1
	sleep								20	
	BASH ping									h3								10.251.1.1				count=10
	BASH ping									h4								10.251.2.1				count=10
	${value} = 									BASH verify arp					h3						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h4						10.251.2.1
	Should Be True								${value} 
	${mac1} = 									BASH get intf mac				h3						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h4						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h3						10.251.2.11 			count=10
	Should Be True  							${loss} == 0	
	REST add vns ip  							X								X1						10.251.4.1				24	
#	${loss} = 									BASH ping						h3						10.251.2.11 			count=10
#	Should Be True  							${loss} == 0	
	${mac1} = 									BASH get intf mac				h3						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}							
	BASH delete arp								h3								10.251.1.1
	${value} =									BASH verify arp					h3						10.251.1.1
	Should Not Be True							${value} 
	BASH add ip address							h3								10.251.4.11/24			bond0	
	BASH delete route							h3								10.251.2.0/24			10.251.1.1
	BASH delete route							h4								10.251.1.0/24			10.251.2.1
	BASH add route								h3								10.251.2.0/24			10.251.4.1
	BASH add route								h4								10.251.4.0/24			10.251.2.1
	BASH ping									h3								10.251.2.11 			count=10
	${loss} = 									BASH ping						h3						10.251.2.11 			count=10
	Should Be True  							${loss} == 0		
	sleep								1
	${result} =									REST show endpoints mac			${mac1}

	${ipAddr1} = 								Set Variable					${result[0]['ip-address']}	
	Should Be Equal								${ipAddr1}						10.251.4.11
#	Should Contain								${result}						10.251.4.11
	${result} =									REST show endpoints mac			${mac2}
	${ipAddr2} = 								Set Variable					${result[0]['ip-address']}	
	Should Be Equal								${ipAddr2}						10.251.2.11
#	Should Contain								${result}						10.251.2.11
	REST add vns ip  							X								X1						10.251.1.1				24	
	BASH delete arp								h3								10.251.4.1
	${value} =									BASH verify arp					h3						10.251.4.1
	Should Not Be True							${value} 
	BASH add ip address							h3								10.251.1.11/24			bond0	
	BASH delete route							h3								10.251.2.0/24			10.251.4.1
	BASH add route								h3								10.251.2.0/24			10.251.1.1
	BASH ping									h3								10.251.2.11 			count=10
	${loss} = 									BASH ping						h3						10.251.2.11 			count=10
	Should Be True  							${loss} == 0		
	sleep								1
	${result} =									REST show endpoints mac			${mac1}
	Should Contain								${result}						10.251.1.11
	${result} =									REST show endpoints mac			${mac2}
	Should Contain								${result}						10.251.2.11			
	BASH delete route							h3								10.251.2.0/24			10.251.1.1
	BASH delete route							h4								10.251.4.0/24			10.251.2.1
	

Delete and add router vns ip
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0	
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0	
	REST add portgroup to vns					X								X1						${leaf1_pc1}			-1
	REST add portgroup to vns					X								X2						${leaf1_pc2}			-1
	BASH add ip address							h3								10.251.1.11/24			bond0	
	BASH add ip address							h4								10.251.2.11/24			bond0
	BASH add route								h3								10.251.2.0/24			10.251.1.1
	BASH add route								h4								10.251.1.0/24			10.251.2.1
	sleep										10	
	BASH ping									h3								10.251.1.1				count=10
	BASH ping									h4								10.251.2.1				count=10
	${value} = 									BASH verify arp					h3						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h4						10.251.2.1
	Should Be True								${value} 
	${mac1} = 									BASH get intf mac				h3						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h4						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h3						10.251.2.11 			count=10
	Should Be True  							${loss} == 0	
	sleep										1
	REST delete vns ip							X								X1						10.251.1.1				24
	sleep										1
	${loss} = 									BASH ping						h3						10.251.1.1 				count=10
	Should Be True  							${loss} == 100		 
	BASH delete arp								h3								10.251.1.1
	${value} =									BASH verify arp					h3						10.251.1.1
	Should Not Be True							${value} 
	BASH ping									h3								10.251.1.1 				count=10
	${value} =									BASH verify arp					h3						10.251.1.1
	Should Not Be True							${value} 
	${loss} = 									BASH ping						h4						10.251.1.11 			count=10
	Should Be True  							${loss} == 100		 
	sleep										1
	REST add vns ip  							X								X1						10.251.1.1				24
	sleep										1
	BASH ping									h4								10.251.1.11				count=10	
	${value} =									BASH verify arp					h3						10.251.1.1
	Should Be True								${value} 
	${loss} = 									BASH ping						h4						10.251.1.11				count=10
	Should Be True  							${loss} == 0		 	
	BASH delete route							h3								10.251.2.0/24			10.251.1.1
	BASH delete route							h4								10.251.1.0/24			10.251.2.1


Set 32bit full mask on vns router ip
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0		
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0		
	REST add portgroup to vns					X								X1						${leaf1_pc1}			-1
	REST add portgroup to vns					X								X2						${leaf1_pc2}			-1
	BASH add ip address							h3								10.251.1.11/24			bond0	
	BASH add ip address							h4								10.251.2.11/24			bond0
	BASH add route								h3								10.251.2.0/24			10.251.1.1
	BASH add route								h4								10.251.1.0/24			10.251.2.1
	sleep										10	
	BASH ping									h3								10.251.2.11				count=10
	${loss} = 									BASH ping						h3						10.251.2.11 			count=10
	Should Be True  							${loss} == 0	
	${result}=									REST add vns ip					X						X1						10.251.1.1				32			
	Should Not Be True							${result} 
	sleep										1
	${loss} = 									BASH ping						h3						10.251.2.11 			count=10
	Should Be True  							${loss} == 0	


Change tagged host endpoint IP address
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0	
	REST add portgroup to vns					X								X1						${leaf0_pc1}			1001
	REST add portgroup to vns					X								X3						${leaf1_pc1}			1003
	BASH add tag								h1								bond0					1001
	BASH add tag								h3								bond0					1003
	BASH ifup intf								h1								bond0.1001
	BASH ifup intf								h3								bond0.1003
	BASH add ip address							h1								10.251.1.11/24			bond0.1001
	BASH add ip address							h3								10.251.3.11/24			bond0.1003
	BASH add route								h1								10.251.3.0/24			10.251.1.1
	BASH add route								h3								10.251.1.0/24			10.251.3.1
	sleep										20	
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Not Be True							${value} 		
	${value} =									BASH verify arp					h3						10.251.3.1
	Should Not Be True							${value} 	
	BASH ping									h1								10.251.3.11				count=10
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h3						10.251.3.1
	Should Be True								${value} 		
	${mac1} = 									BASH get intf mac				h1						bond0.1001
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h3						bond0.1003
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints		
	${loss} = 									BASH ping						h1						10.251.3.11 			count=10
	Should Be True  							${loss} == 0		
	BASH add ip address							h3								10.251.3.212/24			bond0.1003
	BASH ping									h1								10.251.3.212			count=10
	sleep										5
	${result} =									REST show endpoints mac			${mac2}
	${ipAddr} = 								Get From Dictionary				${result[0]}				ip-address
	Should Be Equal								${ipAddr}						10.251.3.212
	${loss} = 									BASH ping						h1						10.251.3.212			count=10
	Should Be True  							${loss} == 0	 						
	BASH delete route							h1								10.251.3.0/24			10.251.1.1
	BASH delete route							h3								10.251.1.0/24			10.251.3.1	

	
Static endpoint with dynamic host showing up on another port
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0	
	REST add portgroup to vns					X								X1						${leaf0_pc1}			1001
	REST add portgroup to vns					X								X3						${leaf1_pc1}			1003
	BASH add tag								h1								bond0					1001
	BASH add tag								h3								bond0					1003
	BASH ifup intf								h1								bond0.1001
	BASH ifup intf								h3								bond0.1003
	BASH add ip address							h1								10.251.1.11/24			bond0.1001
	BASH add ip address							h3								10.251.3.11/24			bond0.1003
	BASH add route								h1								10.251.3.0/24			10.251.1.1
	BASH add route								h3								10.251.1.0/24			10.251.3.1
	sleep										20	
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Not Be True							${value} 		
	${value} =									BASH verify arp					h3						10.251.3.1
	Should Not Be True							${value} 	
	BASH ping									h1								10.251.3.11				count=10
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h3						10.251.3.1
	Should Be True								${value} 		
	${mac1} = 									BASH get intf mac				h1						bond0.1001
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h3						bond0.1003
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints		
	${loss} = 									BASH ping						h1						10.251.3.11 			count=10
	Should Be True  							${loss} == 0		
	REST add portgroup to vns					X								X3						${leaf0_pc2}			1002
	REST add portgroup to vns					X								X3						${leaf1_pc2}			-1
	REST add portgroup to vns					X								X3						${leaf2_pc1}			-1
	REST add portgroup to vns					X								X3						${leaf2_pc2}			-1
	BASH add tag								h2								bond0					1002
	BASH ifup intf								h2								bond0.1002
	BASH add ip address							h2								10.251.3.22/24			bond0.1002
	BASH add ip address							h4								10.251.3.24/24			bond0
	BASH add ip address							h5								10.251.3.25/24			bond0
	BASH add route								h2								10.251.1.0/24			10.251.3.1
	BASH add route								h4								10.251.1.0/24			10.251.3.1
	BASH add route								h5								10.251.1.0/24			10.251.3.1
	BASH ping									h2								10.251.1.11				count=5
	${loss} = 									BASH ping						h2						10.251.1.11				count=5
	Should Be True								${loss} == 0
	${mac3} = 									BASH get intf mac				h2						bond0.1002
	${result} =									REST show endpoints mac			${mac3}
	Should Be True								${result}	
	REST add endpoint							X								X3						X3_host1
	REST add endpoint ip						X								X3						X3_host1				10.251.3.22
	REST add endpoint mac						X								X3						X3_host1				${mac3}
	REST add endpoint portgroup attachment		X								X3						X3_host1				${leaf2_pc2}				-1
	sleep										1
	${result} =									REST show endpoints mac			${mac3}
	Log                                         result[0] = ${result[0]}
	Log                                         result[0][attachment-point] = ${result[0]['attachment-point']}
	Log                                         result[0][attachment-point][port-group] = ${result[0]['attachment-point']['port-group']}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']['port-group']}	
	Log											attachpoint = 					${attachpoint}				
	Should Contain								${attachpoint}					${leaf2_pc2}
	${loss} = 									BASH ping						h2						10.251.1.11				count=10
	Should Be True								${loss} == 100
	${loss} = 									BASH ping						h2						10.251.3.24				count=10
	Should Be True								${loss} == 100
	${loss} = 									BASH ping						h2						10.251.3.25				count=10
	Should Be True								${loss} == 100
	REST delete endpoint						X								X3						X3_host1
	sleep										1
	${loss} = 									BASH ping						h2						10.251.3.24				count=10
	Should Be True								${loss} == 0
	${loss} = 									BASH ping						h2						10.251.3.25				count=10
	Should Be True								${loss} == 0
	${loss} = 									BASH ping						h2						10.251.1.11				count=10
	Should Be True								${loss} == 0
	BASH delete route							h1								10.251.3.0/24			10.251.1.1
	BASH delete route							h3								10.251.1.0/24			10.251.3.1
	BASH delete route							h2								10.251.1.0/24			10.251.3.1
	BASH delete route							h4								10.251.1.0/24			10.251.3.1
	BASH delete route							h5								10.251.1.0/24			10.251.3.1
	
	
Verify subnet mask on vns router ip
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0	
	BASH ifup intf								h5								bond0	
	BASH ifup intf								h6								bond0			
	REST add portgroup to vns					X								X1						${leaf2_pc1}			-1
	REST add portgroup to vns					X								X2						${leaf2_pc2}			-1
	REST add portgroup to vns					X								X2						${leaf1_pc2}			-1
	BASH add ip address							h4								10.251.2.212/25			bond0
	BASH add ip address							h5								10.251.1.211/25			bond0	
	BASH add ip address							h6								10.251.2.211/25			bond0
	BASH add route								h5								10.251.2.128/25			10.251.1.254
	BASH add route								h6								10.251.1.128/25			10.251.2.254
	sleep										20	
	BASH ping									h5								10.251.2.211			count=10
	${value} = 									BASH verify arp					h5						10.251.1.254
	Should Not Be True							${value} 		
	${value} =									BASH verify arp					h6						10.251.2.254
	Should Not Be True							${value} 
	${mac1} = 									BASH get intf mac				h5						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h6						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	BASH ping									h6								10.251.2.212			count=10
	${loss} = 									BASH ping						h6						10.251.2.212			count=10
	Should Be True								${loss} == 0
	REST add vns ip  							X								X1						10.251.1.254			25
	REST add vns ip  							X								X2						10.251.2.254			25
	sleep										5
	BASH ping									h5								10.251.2.211			count=10
	${value} = 									BASH verify arp					h5						10.251.1.254
	Should Be True								${value} 		
	${value} =									BASH verify arp					h6						10.251.2.254
	Should Be True								${value} 
	${loss} = 									BASH ping						h5						10.251.2.11 			count=10
	Should Be True  							${loss} == 0	
	BASH delete route							h5								10.251.2.128/25			10.251.1.254
	BASH delete route							h6								10.251.1.128/25			10.251.2.254
	

Verify vlsm forwarding
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0	
	BASH ifup intf								h5								bond0	
	BASH ifup intf								h6								bond0			
	REST add vns ip								X								X1						10.251.0.1				17
	REST add vns ip								X								X2						10.252.0.1				25
	REST add portgroup to vns					X								X1						${leaf1_pc2}			-1
	REST add portgroup to vns					X								X2						${leaf2_pc1}			-1
	BASH add ip address							h4								10.251.2.212/17			bond0
	BASH add ip address							h5								10.252.0.211/25			bond0	
	BASH add route								h4								10.252.0.0/25			10.251.0.1
	BASH add route								h5								10.251.0.0/17			10.252.0.1
	sleep										20	
	BASH ping									h5								10.252.0.211			count=10
	${value} = 									BASH verify arp					h5						10.252.0.1
	Should Not Be True							${value} 		
	${value} =									BASH verify arp					h4						10.251.0.1
	Should Not Be True							${value} 
	${mac1} = 									BASH get intf mac				h5						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h4						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h5						10.252.0.211			count=10
	Should Be True								${loss} == 0
	BASH delete route							h4								10.252.0.0/25			10.251.0.1
	BASH delete route							h5								10.251.0.0/17			10.252.0.1
	
Verify l3 forwarding on one arm router
	return True		

One Tenant 100 VNS with one host each
	REST delete tenant							X
	REST delete tenant							Y
	REST delete tenant							Z
	REST add tenant								A
	REST add tenant								B
	${ipAddr} =  								Set Variable					20.0.0.1
	: FOR 										${i}							IN RANGE 				1					100
	\	REST add vns							A								A-${i}
	\	REST add vns ip							A								A-${i}					${ipAddr}			24
	\	${ipAddr} =								get next address				ipv4					${ipAddr}			0.0.1.0
	\	REST add interface to vns				A								A-${i}					leaf0-a				${ixia1}		${i}			
				
	${ipAddr} =  								Set Variable					30.0.0.1
	: FOR 										${i}							IN RANGE 				101					200
	\	REST add vns							B								B-${i}
	\	REST add vns ip							B								B-${i}					${ipAddr}			24
	\	${ipAddr} =								get next address				ipv4					${ipAddr}			0.0.1.0
	\	REST add interface to vns				B								B-${i}					leaf1-a				${ixia3}		${i}			
				

Configure overlapping IP on same tenant across VNS
	REST add tenant									A
	REST add vns									A							X1
	REST add vns									A							X2
	REST add vns									A							X3
	REST add vns ip  								A							X1				10.101.0.1				24	
	${result} = 									REST add vns ip  			A				X2						10.101.0.1				25
	Should Not Be True								${result}
	${result} = 									REST add vns ip  			A				X2						10.101.0.2				25
	Should Not Be True								${result}
	${result} = 									REST add vns ip  			A				X2						10.101.0.254			17				
	Should Not Be True								${result}
	${result} = 									REST add vns ip  			A				X2						10.101.0.255			24
	Should Not Be True								${result}
	REST delete vns ip								A							X1				10.101.0.1				24
	${result} = 									REST add vns ip  			A				X2						10.101.0.1				25
	Should Be True									${result}
	REST delete vns ip								A							X2				10.101.0.1				25
	${result} = 									REST add vns ip  			A				X2						10.101.0.2				25
	Should Be True									${result}
	REST delete vns ip								A							X2				10.101.0.2				25
	${result} = 									REST add vns ip  			A				X2						10.101.0.254			17				
	Should Be True									${result}
	REST delete vns ip  							A							X2				10.101.0.254			17		
	${result} = 									REST add vns ip  			A				X2						10.101.0.255			24
	Should Be True									${result}	


Controller HA failover via CLI
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0	
	REST add portgroup to vns					X								X1						${leaf0_pc1}			1001
	REST add portgroup to vns					X								X3						${leaf1_pc1}			1003
	BASH add tag								h1								bond0					1001
	BASH add tag								h3								bond0					1003
	BASH ifup intf								h1								bond0.1001
	BASH ifup intf								h3								bond0.1003
	BASH add ip address							h1								10.251.1.11/24			bond0.1001
	BASH add ip address							h3								10.251.3.11/24			bond0.1003
	BASH add route								h1								10.251.3.0/24			10.251.1.1
	BASH add route								h3								10.251.1.0/24			10.251.3.1
	REST add interface to vns					X								X1						${leaf0-a}				${ixia1}				-1
	REST add interface to vns					X								X3						${leaf1-a}				${ixia3}				-1	
	sleep										20	
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Not Be True							${value} 		
	${value} =									BASH verify arp					h3						10.251.3.1
	Should Not Be True							${value} 	
	BASH ping									h1								10.251.3.11				count=30
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h3						10.251.3.1
	Should Be True								${value} 		
	${mac1} = 									BASH get intf mac				h1						bond0.1001
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h3						bond0.1003
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints		
	${loss} = 									BASH ping						h1						10.251.3.11 			count=10
	Should Be True  							${loss} == 0		
	${stream1}=  								L3 add  						name=stream1		  	flow=a<->c 				frame_rate=100000  			frame_size=128  			frame_cnt=2000000
	...     									src_ip=10.251.1.101				src_cnt=10				src_ip_step=0.0.0.1 	src_gw=10.251.1.1		
	...											dst_ip=10.251.3.101				dst_cnt=10				dst_ip_step=0.0.0.1		dst_gw=10.251.3.1 
   	start traffic  								${stream1}
	sleep										20
	stop traffic								${stream1}
   	verify results 								transmitted_frames  			received_valid_frames  		${stream1}  			stream1
	start traffic  								${stream1}
	sleep										5
	verify traffic rate  						tx_rate  						rx_rate  				a  						c
	${value} = 									REST verify cluster election take leader
	Should Be True								${value}
	sleep										15
	stop traffic								${stream1}
   	verify results 								transmitted_frames  			received_valid_frames  		${stream1}  			stream1
	${loss} = 									BASH ping						h1						10.251.3.11 			count=10
	Should Be True  							${loss} == 0		
	BASH delete route							h1								10.251.3.0/24			10.251.1.1
	BASH delete route							h3								10.251.1.0/24			10.251.3.1


Controller HA failover via reboot
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0	
	REST add portgroup to vns					X								X1						${leaf0_pc1}			1001
	REST add portgroup to vns					X								X3						${leaf1_pc1}			1003
	BASH add tag								h1								bond0					1001
	BASH add tag								h3								bond0					1003
	BASH ifup intf								h1								bond0.1001
	BASH ifup intf								h3								bond0.1003
	BASH add ip address							h1								10.251.1.11/24			bond0.1001
	BASH add ip address							h3								10.251.3.11/24			bond0.1003
	REST add interface to vns					X								X1						${leaf0-a}				${ixia1}				-1
	REST add interface to vns					X								X3						${leaf1-a}				${ixia3}				-1		
	BASH add route								h1								10.251.3.0/24			10.251.1.1
	BASH add route								h3								10.251.1.0/24			10.251.3.1
	sleep										20	
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Not Be True							${value} 		
	${value} =									BASH verify arp					h3						10.251.3.1
	Should Not Be True							${value} 	
	BASH ping									h1								10.251.3.11				count=10
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h3						10.251.3.1
	Should Be True								${value} 		
	${mac1} = 									BASH get intf mac				h1						bond0.1001
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h3						bond0.1003
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints		
	${loss} = 									BASH ping						h1						10.251.3.11 			count=10
	Should Be True  							${loss} == 0		
	${stream1}=  								L3 add  						name=stream1		  	flow=a<->c 				frame_rate=100000  			frame_size=128  			frame_cnt=2000000
	...     									src_ip=10.251.1.101				src_cnt=10				src_ip_step=0.0.0.1 	src_gw=10.251.1.1		
	...											dst_ip=10.251.3.101				dst_cnt=10				dst_ip_step=0.0.0.1		dst_gw=10.251.3.1 
    start traffic  								${stream1}
	sleep										20
	stop traffic								${stream1}
   	verify results 								transmitted_frames  			received_valid_frames  		${stream1}  			stream1
	start traffic  								${stream1}
	sleep										5
	verify traffic rate  						tx_rate  						rx_rate  				a  						c
	${value} = 									CLI verify cluster master reboot
	Should Be True								${value}
	sleep										15
	stop traffic								${stream1}
   	verify results 								transmitted_frames  			received_valid_frames  		${stream1}  			stream1	
	${loss} = 									BASH ping						h1						10.251.3.11 			count=10
	Should Be True  							${loss} == 0		
	BASH delete route							h1								10.251.3.0/24			10.251.1.1
	BASH delete route							h3								10.251.1.0/24			10.251.3.1
	
		
Reboot spine0 via CLI
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0	
	BASH ifup intf								h5								bond0	
	BASH ifup intf								h6								bond0			
	REST add portgroup to vns					X								X1						${leaf2_pc1}			-1
	REST add portgroup to vns					X								X2						${leaf2_pc2}			-1
	REST add interface to vns					X								X1						${leaf0-a}				${ixia1}				-1
	REST add interface to vns					X								X2						${leaf1-a}				${ixia3}				-1
	BASH add ip address							h5								10.251.1.11/24			bond0	
	BASH add ip address							h6								10.251.2.11/24			bond0
	BASH add route								h5								10.251.2.0/24			10.251.1.1
	BASH add route								h6								10.251.1.0/24			10.251.2.1
	sleep										20	
	BASH ping									h5								10.251.1.1				count=10
	BASH ping									h6								10.251.2.1				count=10
	${value} = 									BASH verify arp					h5						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h6						10.251.2.1
	Should Be True								${value} 
	${mac1} = 									BASH get intf mac				h5						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h6						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h5						10.251.2.11 			count=10
	Should Be True  							${loss} == 0	
	${stream1}=  								L3 add  						name=stream1		  	flow=a<->c 				frame_rate=10000  			frame_size=128  			frame_cnt=2000000
	...     									src_ip=10.251.1.101				src_cnt=10				src_ip_step=0.0.0.1 	src_gw=10.251.1.1		
	...											dst_ip=10.251.2.101				dst_cnt=10				dst_ip_step=0.0.0.1		dst_gw=10.251.2.1			 			
    start traffic  								${stream1}
    sleep  10
    CLI restart switch							s1
	sleep										10
 	stop traffic								${stream1}
    verify results 								transmitted_frames  			received_valid_frames  		${stream1}  			stream1
	BASH delete route							h5								10.251.2.0/24			10.251.1.1
	BASH delete route							h6								10.251.1.0/24			10.251.2.1
	

Reboot Leaf0 via CLI
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0	
	BASH ifup intf								h5								bond0	
	BASH ifup intf								h6								bond0			
	REST add portgroup to vns					X								X1						${leaf2_pc1}			-1
	REST add portgroup to vns					X								X2						${leaf2_pc2}			-1
	REST add interface to vns					X								X1						${leaf0-a}				${ixia1}				-1
	REST add interface to vns					X								X2						${leaf1-a}				${ixia3}				-1
	BASH add ip address							h5								10.251.1.11/24			bond0	
	BASH add ip address							h6								10.251.2.11/24			bond0
	BASH add route								h5								10.251.2.0/24			10.251.1.1
	BASH add route								h6								10.251.1.0/24			10.251.2.1
	sleep										20	
	BASH ping									h5								10.251.1.1				count=10
	BASH ping									h6								10.251.2.1				count=10
	${value} = 									BASH verify arp					h5						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h6						10.251.2.1
	Should Be True								${value} 
	${mac1} = 									BASH get intf mac				h5						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h6						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h5						10.251.2.11 			count=10
	Should Be True  							${loss} == 0	
	${stream1}=  								L3 add  						name=stream1		  	flow=a<->c 				frame_rate=10000  			frame_size=128  			frame_cnt=2000000
	...     									src_ip=10.251.1.101				src_cnt=10				src_ip_step=0.0.0.1 	src_gw=10.251.1.1		
	...											dst_ip=10.251.2.101				dst_cnt=10				dst_ip_step=0.0.0.1		dst_gw=10.251.2.1			 			
    start traffic  								${stream1}
    sleep  10
    CLI restart switch							s3
	sleep										200 
 	stop traffic								${stream1}
    verify results 								transmitted_frames  			received_valid_frames  		${stream1}  			stream1
	BASH delete route							h5								10.251.2.0/24			10.251.1.1
	BASH delete route							h6								10.251.1.0/24			10.251.2.1


Connect and Disconnect spine to controller
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0	
	REST add portgroup to vns					X								X1						${leaf0_pc1}			1001
	REST add portgroup to vns					X								X3						${leaf1_pc1}			1003
	REST add interface to vns					X								X1						${leaf0-a}				${ixia1}				-1
	REST add interface to vns					X								X3						${leaf1-a}				${ixia3}				-1
	BASH add tag								h1								bond0					1001
	BASH add tag								h3								bond0					1003
	BASH ifup intf								h1								bond0.1001
	BASH ifup intf								h3								bond0.1003
	BASH add ip address							h1								10.251.1.11/24			bond0.1001
	BASH add ip address							h3								10.251.3.11/24			bond0.1003
	BASH add route								h1								10.251.3.0/24			10.251.1.1
	BASH add route								h3								10.251.1.0/24			10.251.3.1
	sleep										20	
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Not Be True							${value} 		
	${value} =									BASH verify arp					h3						10.251.3.1
	Should Not Be True							${value} 	
	BASH ping									h1								10.251.3.11				count=10
	${value} = 									BASH verify arp					h1						10.251.1.1
#	Should Be True								${value} 		
	${value} =									BASH verify arp					h3						10.251.3.1
#	Should Be True								${value} 		
	${mac1} = 									BASH get intf mac				h1						bond0.1001
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h3						bond0.1003
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints		
	${loss} = 									BASH ping						h1						10.251.3.11 			count=10
	Should Be True  							${loss} == 0		
	${stream1}=  								L3 add  						name=stream1		  	flow=a<->c 				frame_rate=10000  			frame_size=128  			frame_cnt=2000000000
	...     									src_ip=10.251.1.101				src_cnt=10				src_ip_step=0.0.0.1 	src_gw=10.251.1.1		
	...											dst_ip=10.251.3.101				dst_cnt=10				dst_ip_step=0.0.0.1		dst_gw=10.251.3.1			 			
    start traffic  								${stream1}
    sleep  										5
    verify traffic rate  						tx_rate  						rx_rate  				a  						c
#    CLI enable disable controller				s1								5

	: FOR 										${i}							IN RANGE 				1						5
	\	CLI delete controller					s1								c1
	\	CLI delete controller					s1								c2
	\	verify traffic rate  					tx_rate  						rx_rate  				a  						c
	\	CLI add controller						s1								c1
	\	CLI add controller						s1								c2
	\	verify traffic rate  					tx_rate  						rx_rate  				a  						c

#    verify traffic rate  						tx_rate  						rx_rate  				a  						c
  	sleep										5
	stop traffic								${stream1}
#	verify results 								transmitted_frames  			received_valid_frames  		${stream1}  			stream1
	verify traffic packet						tx_cnt							rx_cnt					a						c
	BASH delete route							h1								10.251.3.0/24			10.251.1.1
	BASH delete route							h3								10.251.1.0/24			10.251.3.1
	

Connect and disconnect one leaf in dual tor to controller
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0	
	REST add portgroup to vns					X								X1						${leaf0_pc1}			1001
	REST add portgroup to vns					X								X3						${leaf1_pc1}			1003
	REST add interface to vns					X								X1						${leaf0-a}				${ixia1}				-1
	REST add interface to vns					X								X3						${leaf1-a}				${ixia3}				-1
	BASH add tag								h1								bond0					1001
	BASH add tag								h3								bond0					1003
	BASH ifup intf								h1								bond0.1001
	BASH ifup intf								h3								bond0.1003
	BASH add ip address							h1								10.251.1.11/24			bond0.1001
	BASH add ip address							h3								10.251.3.11/24			bond0.1003
	BASH add route								h1								10.251.3.0/24			10.251.1.1
	BASH add route								h3								10.251.1.0/24			10.251.3.1
	sleep										20	
	${value} = 									BASH verify arp					h1						10.251.1.1
#	Should Not Be True							${value} 		
	${value} =									BASH verify arp					h3						10.251.3.1
#	Should Not Be True							${value} 	
	BASH ping									h1								10.251.3.11				count=10
	${value} = 									BASH verify arp					h1						10.251.1.1
#	Should Be True								${value} 		
	${value} =									BASH verify arp					h3						10.251.3.1
#	Should Be True								${value} 		
	${mac1} = 									BASH get intf mac				h1						bond0.1001
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h3						bond0.1003
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints		
	${loss} = 									BASH ping						h1						10.251.3.11 			count=10
	Should Be True  							${loss} == 0		
	${stream1}=  								L3 add  						name=stream1		  	flow=a<->c 				frame_rate=10000  			frame_size=128  			frame_cnt=2000000000
	...     									src_ip=10.251.1.101				src_cnt=10				src_ip_step=0.0.0.1 	src_gw=10.251.1.1		
	...											dst_ip=10.251.3.101				dst_cnt=10				dst_ip_step=0.0.0.1		dst_gw=10.251.3.1			 			
    start traffic  								${stream1}
    sleep  										5
    verify traffic rate 						tx_rate  						rx_rate  				a  						c
#    CLI enable disable controller				s3								5
	: FOR 										${i}							IN RANGE 				1						5
	\	CLI delete controller					s3								c1
	\	CLI delete controller					s3								c2
#	\   verify traffic rate 					tx_rate  						rx_rate  				a  						c
	\	CLI add controller						s3								c1
	\	CLI add controller						s3								c2
    \	verify traffic rate  					tx_rate  						rx_rate  				a  						c
  	sleep										1
	stop traffic								${stream1}
#	verify results 								transmitted_frames  			received_valid_frames  		${stream1}  			stream1
	verify traffic packet						tx_cnt							rx_cnt					a						c
	BASH delete route							h1								10.251.3.0/24			10.251.1.1
	BASH delete route							h3								10.251.1.0/24			10.251.3.1
		

Flap link between leaf and spine
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0	
	REST add portgroup to vns					X								X1						${leaf0_pc1}			1001
	REST add portgroup to vns					X								X3						${leaf1_pc1}			1003
	REST add interface to vns					X								X1						${leaf0-a}				${ixia1}				-1
	REST add interface to vns					X								X3						${leaf1-a}				${ixia3}				-1
	BASH add tag								h1								bond0					1001
	BASH add tag								h3								bond0					1003
	BASH ifup intf								h1								bond0.1001
	BASH ifup intf								h3								bond0.1003
	BASH add ip address							h1								10.251.1.11/24			bond0.1001
	BASH add ip address							h3								10.251.3.11/24			bond0.1003
	BASH add route								h1								10.251.3.0/24			10.251.1.1
	BASH add route								h3								10.251.1.0/24			10.251.3.1
	sleep										20	
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Not Be True							${value} 		
	${value} =									BASH verify arp					h3						10.251.3.1
	Should Not Be True							${value} 	
	BASH ping									h1								10.251.3.11				count=10
	${value} = 									BASH verify arp					h1						10.251.1.1
#	Should Be True								${value} 		
	${value} =									BASH verify arp					h3						10.251.3.1
#	Should Be True								${value} 		
	${mac1} = 									BASH get intf mac				h1						bond0.1001
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h3						bond0.1003
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints		
	${loss} = 									BASH ping						h1						10.251.3.11 			count=10
	Should Be True  							${loss} == 0		
	${stream1}=  								L3 add  						name=stream1		  	flow=a<->c 				frame_rate=10000  			frame_size=128  			frame_cnt=4000000
	...     									src_ip=10.251.1.101				src_cnt=10				src_ip_step=0.0.0.1 	src_gw=10.251.1.1		
	...											dst_ip=10.251.3.101				dst_cnt=10				dst_ip_step=0.0.0.1		dst_gw=10.251.3.1			 			
    start traffic  								${stream1}
    sleep  										5
   	CLI disable interface						s3								${leaf0-a_spine0}	
   	sleep										5	
    verify traffic rate  						tx_rate  						rx_rate  				a  						c
	CLI enable interface						s3								${leaf0-a_spine0}	
  	sleep										10
	stop traffic								${stream1}
	verify results 								transmitted_frames  			received_valid_frames  		${stream1}  			stream1
	BASH delete route							h1								10.251.3.0/24			10.251.1.1
	BASH delete route							h3								10.251.1.0/24			10.251.3.1
		

Flap bond interface towards host
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0	
	REST add portgroup to vns					X								X1						${leaf0_pc1}			1001
	REST add portgroup to vns					X								X3						${leaf1_pc1}			1003
	BASH add tag								h1								bond0					1001
	BASH add tag								h3								bond0					1003
	BASH ifup intf								h1								bond0.1001
	BASH ifup intf								h3								bond0.1003
	BASH add ip address							h1								10.251.1.11/24			bond0.1001
	BASH add ip address							h3								10.251.3.11/24			bond0.1003
	BASH add route								h1								10.251.3.0/24			10.251.1.1
	BASH add route								h3								10.251.1.0/24			10.251.3.1
	sleep										20	
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Not Be True							${value} 		
	${value} =									BASH verify arp					h3						10.251.3.1
	Should Not Be True							${value} 	
	BASH ping									h1								10.251.3.11				count=10
	${value} = 									BASH verify arp					h1						10.251.1.1
#	Should Be True								${value} 		
	${value} =									BASH verify arp					h3						10.251.3.1
#	Should Be True								${value} 		
	${mac1} = 									BASH get intf mac				h1						bond0.1001
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']['port-group']}	
	Should Contain								${attachpoint}					${leaf0_pc1}
	${vlanid} = 								Set Variable					${result[0]['attachment-point']['vlan']}	
	Should Be Equal								${vlanid}						${1001}		
	${mac2} = 									BASH get intf mac				h3						bond0.1003
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints		
	${loss} = 									BASH ping						h1						10.251.3.11 			count=10
	Should Be True  							${loss} == 0		
	REST disable fabric interface				s3								${leaf0_pc1_intf1}
	${loss} = 									BASH ping						h1						10.251.3.11 			count=10
	Should Be True  							${loss} == 0		
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']['port-group']}	
	Should Contain								${attachpoint}					${leaf0_pc1}
	${vlanid} = 								Set Variable					${result[0]['attachment-point']['vlan']}	
	Should Be Equal								${vlanid}						${1001}		
	sleep 										5
	REST disable fabric interface				s4								${leaf0_pc1_intf1}
	sleep 										2	
	${result} =									REST show endpoints mac			${mac1}
	Should Not Be True							${result}
	${loss} = 									BASH ping						h1						10.251.3.11 			count=10
	Should Be True  							${loss} == 100		
	sleep										1
	REST enable fabric interface				s3								${leaf0_pc1_intf1}
	REST enable fabric interface				s4								${leaf0_pc1_intf1}
	${loss} = 									BASH ping						h1						10.251.3.11 			count=10
	Should Be True  							${loss} == 0		
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']['port-group']}	
	Should Contain								${attachpoint}					${leaf0_pc1}
	${vlanid} = 								Set Variable					${result[0]['attachment-point']['vlan']}	
	Should Be Equal								${vlanid}						${1001}		
	BASH delete route							h1								10.251.3.0/24			10.251.1.1
	BASH delete route							h3								10.251.1.0/24			10.251.3.1


restart ofad on spine
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0	
	REST add portgroup to vns					X								X1						${leaf0_pc1}			1001
	REST add portgroup to vns					X								X3						${leaf1_pc1}			1003
	REST add interface to vns					X								X1						${leaf0-a}				${ixia1}				-1
	REST add interface to vns					X								X3						${leaf1-a}				${ixia3}				-1
	BASH add tag								h1								bond0					1001
	BASH add tag								h3								bond0					1003
	BASH ifup intf								h1								bond0.1001
	BASH ifup intf								h3								bond0.1003
	BASH add ip address							h1								10.251.1.11/24			bond0.1001
	BASH add ip address							h3								10.251.3.11/24			bond0.1003
	BASH add route								h1								10.251.3.0/24			10.251.1.1
	BASH add route								h3								10.251.1.0/24			10.251.3.1
	sleep										20	
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Not Be True							${value} 		
	${value} =									BASH verify arp					h3						10.251.3.1
	Should Not Be True							${value} 	
	BASH ping									h1								10.251.3.11				count=10
	${value} = 									BASH verify arp					h1						10.251.1.1
#	Should Be True								${value} 		
	${value} =									BASH verify arp					h3						10.251.3.1
#	Should Be True								${value} 		
	${mac1} = 									BASH get intf mac				h1						bond0.1001
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h3						bond0.1003
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints		
	${loss} = 									BASH ping						h1						10.251.3.11 			count=10
	Should Be True  							${loss} == 0		
	${stream1}=  								L3 add  						name=stream1		  	flow=a<->c 				frame_rate=10000  			frame_size=128  			frame_cnt=2000000
	...     									src_ip=10.251.1.101				src_cnt=10				src_ip_step=0.0.0.1 	src_gw=10.251.1.1		
	...											dst_ip=10.251.3.101				dst_cnt=10				dst_ip_step=0.0.0.1		dst_gw=10.251.3.1			 			
    start traffic  								${stream1}
    sleep  										5
   	verify traffic rate  						tx_rate  						rx_rate  				a  						c
	BASH restart process						s1								ofad
	sleep										5
	${value} = 									BASH check service status		s1						ofad
	Should Contain								${value}						is started
	verify traffic rate  						tx_rate  						rx_rate  				a  						c
	sleep										10
	stop traffic								${stream1}
	calculate loss								transmitted_frames  			received_valid_frames  		${stream1}  			stream1
	BASH delete route							h1								10.251.3.0/24			10.251.1.1
	BASH delete route							h3								10.251.1.0/24			10.251.3.1


restart ofad on leaf
#### restart ofad will reset all interfaces to 10gig, need to manaully adjust interface to autoneg for Ixia port for traffic to resume

	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0	
	REST add portgroup to vns					X								X1						${leaf0_pc1}			1001
	REST add portgroup to vns					X								X3						${leaf1_pc1}			1003
	REST add interface to vns					X								X1						${leaf0-a}				${ixia1}				-1
	REST add interface to vns					X								X3						${leaf1-a}				${ixia3}				-1
	BASH add tag								h1								bond0					1001
	BASH add tag								h3								bond0					1003
	BASH ifup intf								h1								bond0.1001
	BASH ifup intf								h3								bond0.1003
	BASH add ip address							h1								10.251.1.11/24			bond0.1001
	BASH add ip address							h3								10.251.3.11/24			bond0.1003
	BASH add route								h1								10.251.3.0/24			10.251.1.1
	BASH add route								h3								10.251.1.0/24			10.251.3.1
	sleep										20	
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Not Be True							${value} 		
	${value} =									BASH verify arp					h3						10.251.3.1
	Should Not Be True							${value} 	
	BASH ping									h1								10.251.3.11				count=10
	${value} = 									BASH verify arp					h1						10.251.1.1
#	Should Be True								${value} 		
	${value} =									BASH verify arp					h3						10.251.3.1
#	Should Be True								${value} 		
	${mac1} = 									BASH get intf mac				h1						bond0.1001
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h3						bond0.1003
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints		
	${loss} = 									BASH ping						h1						10.251.3.11 			count=10
	Should Be True  							${loss} == 0		
	${stream1}=  								L3 add  						name=stream1		  	flow=a<->c 				frame_rate=10000  			frame_size=128  			frame_cnt=2000000
	...     									src_ip=10.251.1.101				src_cnt=10				src_ip_step=0.0.0.1 	src_gw=10.251.1.1		
	...											dst_ip=10.251.3.101				dst_cnt=10				dst_ip_step=0.0.0.1		dst_gw=10.251.3.1			 			
    start traffic  								${stream1}
    sleep  										5
   	verify traffic rate  						tx_rate  						rx_rate  				a  						c
	BASH restart process						s3								ofad
	sleep										5
	CLI execute command							s3								debug ofad "autoneg 24"
	sleep										1
	${value} = 									BASH check service status		s3						ofad
	Should Contain								${value}						is started	
	sleep										10
	verify traffic rate  						tx_rate  						rx_rate  				a  						c
	sleep										10
	stop traffic								${stream1}
	calculate loss								transmitted_frames  			received_valid_frames  		${stream1}  			stream1
	BASH delete route							h1								10.251.3.0/24			10.251.1.1
	BASH delete route							h3								10.251.1.0/24			10.251.3.1


L3 intra tenant traffic behavior in headless mode 
 	Manual failed



initialize host
	BASH delete tag								h1								bond0.1001				soft_error=${true}
	BASH delete tag								h2								bond0.1002				soft_error=${true}
	BASH delete tag								h3								bond0.1003				soft_error=${true}
	BASH delete tag								h4								bond0.1004				soft_error=${true}
	BASH delete tag								h5								bond0.1005				soft_error=${true}
	BASH delete tag								h6								bond0.1006				soft_error=${true}
	BASH init intf								h1								bond0
	BASH init intf								h2								bond0
	BASH init intf								h3								bond0
	BASH init intf								h4								bond0
	BASH init intf								h5								bond0
	BASH init intf								h6								bond0
	BASH ifdown intf							h1 								bond0
	BASH ifdown intf							h2								bond0
	BASH ifdown intf							h3								bond0
	BASH ifdown intf							h4								bond0
	BASH ifdown intf							h5								bond0
	BASH ifdown intf							h6								bond0	
	BASH release dhcpv4 address					h1								bond0
	BASH release dhcpv4 address					h2								bond0
	BASH release dhcpv4 address					h3								bond0
	BASH release dhcpv4 address					h4								bond0
	BASH release dhcpv4 address					h5								bond0
	BASH release dhcpv4 address					h6								bond0
	BASH ifup intf								h1								eth2
	BASH ifup intf								h1								eth3
	BASH ifup intf								h2								eth2
	BASH ifup intf								h2								eth3
	BASH ifup intf								h3								eth2
	BASH ifup intf								h3								eth3
	BASH ifup intf								h4								eth2
	BASH ifup intf								h4								eth3
	BASH ifup intf								h5								eth2
	BASH ifup intf								h5								eth3
	BASH ifup intf								h6								eth2
	BASH ifup intf								h6								eth3
	


setup topology
	initialize host
	add fabric switch
	sleep 											1
	REST add tenant 								X
	REST add tenant									Y
	REST add tenant									Z
	REST add vns									X							X1
	REST add vns									X							X2
	REST add vns									X							X3
	REST add vns									Y							Y1
	REST add vns									Y							Y2
	REST add vns									Y							Y3
	REST add vns									Z							Z1
	REST add vns									Z							Z2
	REST add vns									Z							Z3
	REST add router intf							X							X1
	REST add router intf							X							X2
	REST add router intf							X							X3
	REST add router intf							Y							Y1
	REST add router intf							Y							Y2
	REST add router intf							Y							Y3
	REST add router intf							Z							Z1
	REST add router intf							Z							Z2
	REST add router intf							Z							Z3
	REST add vns ip  								X							X1				10.251.1.1				24	
	REST add vns ip  								X							X2				10.251.2.1				24	
	REST add vns ip  								X							X3				10.251.3.1				24	
	REST add vns ip  								Y							Y1				10.252.1.1				24	
	REST add vns ip  								Y							Y2				10.252.2.1				24	
	REST add vns ip  								Y							Y3				10.252.3.1				24	
	REST add vns ip  								Z							Z1				10.253.1.1				24	
	REST add vns ip  								Z							Z2				10.253.2.1				24	
	REST add vns ip  								Z							Z3				10.253.3.1				24	
	REST add interface to portgroup					leaf0-a						${leaf0_pc1_intf1}					${leaf0_pc1}
	REST add interface to portgroup					leaf0-b						${leaf0_pc1_intf2}					${leaf0_pc1}
	REST add interface to portgroup					leaf0-a						${leaf0_pc2_intf1}					${leaf0_pc2}
	REST add interface to portgroup					leaf0-b						${leaf0_pc2_intf2}					${leaf0_pc2}
#	REST add interface to portgroup					leaf0-a						${leaf0_pc3_intf1}					${leaf0_pc3}
#	REST add interface to portgroup					leaf0-b						${leaf0_pc3_intf2}					${leaf0_pc3}
#	REST add interface to portgroup					leaf0-a						${leaf0_pc4_intf1}					${leaf0_pc4}
#	REST add interface to portgroup					leaf0-b						${leaf0_pc4_intf2}					${leaf0_pc4}
#	REST add interface to portgroup					leaf0-a						${leaf0_pc5_intf1}					${leaf0_pc5}
#	REST add interface to portgroup					leaf0-a						${leaf0_pc5_intf2}					${leaf0_pc5}
#	REST add interface to portgroup					leaf0-a						${leaf0_pc6_intf1}					${leaf0_pc6}
#	REST add interface to portgroup					leaf0-a						${leaf0_pc6_intf2}					${leaf0_pc6}
	REST add interface to portgroup					leaf1-a						${leaf1_pc1_intf1}					${leaf1_pc1}
	REST add interface to portgroup					leaf1-b						${leaf1_pc1_intf2}					${leaf1_pc1}
	REST add interface to portgroup					leaf1-a						${leaf1_pc2_intf1}					${leaf1_pc2}
	REST add interface to portgroup					leaf1-b						${leaf1_pc2_intf2}					${leaf1_pc2}
#	REST add interface to portgroup					leaf1-a						${leaf1_pc3_intf1}					${leaf1_pc3}
#	REST add interface to portgroup					leaf1-b						${leaf1_pc3_intf2}					${leaf1_pc3}
#	REST add interface to portgroup					leaf1-a						${leaf1_pc4_intf1}					${leaf1_pc4}
#	REST add interface to portgroup					leaf1-b						${leaf1_pc4_intf2}					${leaf1_pc4}
	REST add interface to portgroup					leaf2-a						${leaf2_pc1_intf1}					${leaf2_pc1}
	REST add interface to portgroup					leaf2-b						${leaf2_pc1_intf2}					${leaf2_pc1}
	REST add interface to portgroup					leaf2-a						${leaf2_pc2_intf1}					${leaf2_pc2}
	REST add interface to portgroup					leaf2-b						${leaf2_pc2_intf2}					${leaf2_pc2}	
  	REST add portgroup lacp							${leaf0_pc1}
  	REST add portgroup lacp							${leaf0_pc2}
  	REST add portgroup lacp							${leaf1_pc1}
  	REST add portgroup lacp							${leaf1_pc2}
  	REST add portgroup lacp							${leaf2_pc1}
  	REST add portgroup lacp							${leaf2_pc2}
 
 
teardown topology
	delete traffic
	REST delete vns ip  							X							X1				10.251.1.1				24	
	REST delete vns ip  							X							X2				10.251.2.1				24	
	REST delete vns ip  							X							X3				10.251.3.1				24	
	REST delete vns ip  							Y							Y1				10.252.1.1				24	
	REST delete vns ip  							Y							Y2				10.252.2.1				24	
	REST delete vns ip  							Y							Y3				10.252.3.1				24	
	REST delete vns ip  							Z							Z1				10.253.1.1				24	
	REST delete vns ip  							Z							Z2				10.253.2.1				24	
	REST delete vns ip  							Z							Z3				10.253.3.1				24	
	REST delete vns									X							X1
	REST delete vns									X							X2
	REST delete vns									X							X3
	REST delete vns									Y							Y1
	REST delete vns									Y							Y2
	REST delete vns									Y							Y3
	REST delete vns									Z							Z1
	REST delete vns									Z							Z2
	REST delete vns									Z							Z3
	REST delete tenant								X
	REST delete tenant								Y
	REST delete tenant								Z
	delete fabric switch
	initialize host
	

T5 base suite setup
	base suite setup
	add fabric switch
	sleep 											5
	${result} = 									CLI verify controller		s1							c1		
	Should Be True									${result}
	${result} = 									CLI verify controller   	s1							c2
	Should Be True									${result}
	${result} = 									CLI verify controller       s2							c1
	Should Be True									${result}
	${result} = 									CLI verify controller       s2							c2
	Should Be True									${result}
	${result} = 									CLI verify controller       s3							c1
	Should Be True									${result}
	${result} = 									CLI verify controller       s3							c2
	Should Be True									${result}
	${result} = 									CLI verify controller       s4							c1
	Should Be True									${result}
	${result} = 									CLI verify controller       s4							c2
	Should Be True									${result}
	${result} = 									CLI verify controller       s5							c1
	Should Be True									${result}
	${result} = 									CLI verify controller       s5							c2
	Should Be True									${result}
	${result} = 									CLI verify controller       s6							c1
	Should Be True									${result}
	${result} = 									CLI verify controller       s6							c2
	Should Be True									${result}		
  	# REST add switch  								spine0
  	# REST add dpid  									spine0  					${spine0_dpid}
  	# REST add fabric role  							spine0  					spine
  	# REST add switch  								spine1	
  	# REST add dpid  									spine1  					${spine1_dpid}
  	# REST add fabric role						  	spine1  					spine
  	# REST add switch  								leaf0a
  	# REST add dpid  									leaf0a  					${leaf0a_dpid}
  	# REST add fabric role  							leaf0a  					leaf
  	# REST add switch  								leaf0b
  	# REST add dpid  									leaf0b  					${leaf0b_dpid}
  	# REST add fabric role  							leaf0b  					leaf
  	# REST add switch  								leaf1a
  	# REST add dpid  									leaf1a  					${leaf1a_dpid}
  	# REST add fabric role  							leaf1a  					leaf
 	# REST add switch  								leaf1b
  	# REST add dpid  									leaf1b  					${leaf1b_dpid}
  	# REST add fabric role  							leaf1b  					leaf
  	# REST add switch  								leaf2a
  	# REST add dpid  									leaf2a  					${leaf2a_dpid}
  	# REST add fabric role  							leaf2a  					leaf
 	# REST add switch  								leaf2b
  	# REST add dpid  									leaf2b  					${leaf2b_dpid}
  	# REST add fabric role  							leaf2b  					leaf  	
	# REST add portgroup								${leaf0_pc1}
	# REST add portgroup								${leaf0_pc2}
	# REST add portgroup								${leaf0_pc3}
	# REST add portgroup								${leaf0_pc4}
	# REST add portgroup								${leaf0_pc5}
	# REST add portgroup								${leaf0_pc6}	
	# REST add portgroup								${leaf1_pc1}
	# REST add portgroup								${leaf1_pc2}
	# REST add portgroup								${leaf1_pc3}
	# REST add portgroup								${leaf1_pc4}
	# REST add portgroup								${leaf2_pc1}
	# REST add portgroup								${leaf2_pc2}
	REST add portgroup								${leaf0_pc1}
	REST add portgroup								${leaf0_pc2}
	REST add portgroup								${leaf1_pc1}
	REST add portgroup								${leaf1_pc2}
	REST add portgroup								${leaf2_pc1}
	REST add portgroup								${leaf2_pc2}
		
	

#	REST add leaf group								leaf0a						leaf0
#	REST add leaf group								leaf0b						leaf0
#	REST add leaf group								leaf1a						leaf1
#	REST add leaf group								leaf1b						leaf1
#	REST add leaf group								leaf2a						leaf2
#	REST add leaf group								leaf2b						leaf2
		

  
T5 base suite teardown
	delete fabric switch  
  	REST delete portgroup lacp							${leaf0_pc1}
  	REST delete portgroup lacp							${leaf0_pc2}
  	REST delete portgroup lacp							${leaf1_pc1}
  	REST delete portgroup lacp							${leaf1_pc2}
  	REST delete portgroup lacp							${leaf2_pc1}
  	REST delete portgroup lacp							${leaf2_pc2}	
	REST delete portgroup								${leaf0_pc1}
	REST delete portgroup								${leaf0_pc2}
	REST delete portgroup								${leaf1_pc1}
	REST delete portgroup								${leaf1_pc2}
	REST delete portgroup								${leaf2_pc1}
	REST delete portgroup								${leaf2_pc2}


verify results   [Arguments]  ${transmitted_frames}  ${received_frames}  ${stream}  ${stream_name}
    Sleep  5
    ${report}=  fetch port stats  stream=${stream}  
    ${tx_value}=  verify dict key  ${report}  ${stream_name}  ${transmitted_frames}
    ${rx_value}=  verify dict key  ${report}  ${stream_name}  ${received_frames}
    ${in_range}=  ixia verify traffic rate  ${tx_value}  ${rx_value}
 	Log 		${in_range}
   Should be true  ${in_range}	
  	
calculate loss	 [Arguments]  ${transmitted_frames}  ${received_frames}  ${stream}  ${stream_name}
    Sleep  5
    ${report} =  	fetch port stats  	stream=${stream}  
    ${tx_value} =  	verify dict key  	${report}  ${stream_name}  ${transmitted_frames}
    ${rx_value} =  	verify dict key  	${report}  ${stream_name}  ${received_frames}
	${loss} = 		evaluate 			${tx_value} - ${rx_value}
	Log 			${loss}
	
verify traffic rate   [Arguments]  ${tx_rate}  ${rx_rate}  ${tx_intf}  ${rx_intf}
    Sleep  5
    ${report}=  fetch port stats
    Log  	${report}
    ${tx_value}=  verify dict key  ${report}  ${tx_intf}  transmitted_frame_rate
    ${rx_value}=  verify dict key  ${report}  ${rx_intf}  received_valid_frame_rate
    ixia verify traffic rate  ${tx_value}  ${rx_value}
    
verify traffic packet  [Arguments]  ${tx_cnt}  ${rx_cnt}  ${tx_intf}  ${rx_intf}
	Sleep  5
    ${report} =  	fetch port stats
    ${tx_value} =  	verify dict key  	${report}  ${tx_intf}  transmitted_frames
    ${rx_value} =  	verify dict key  	${report}  ${rx_intf}  received_valid_frames
    ${result} =  	evaluate  			${tx_value} - ${rx_value}
    Log 	${result}
#   Should Be True   -100000 < ${result} < 100000


    