* Setting
Documentation   T5 inter tenant L3 Test Suite
Suite Setup     T5 base suite setup
Suite Teardown  T5 base suite teardown
Test Setup      test setup topology
Test Teardown   test teardown topology
Force Tags      T5     L3      IronHorse
Library         keywords/BsnCommon.py
Library         keywords/Host.py
Library         keywords/T5.py
Library         keywords/T5L3.py
Library         keywords/T5Platform.py
Library			keywords/SwitchLight.py
Library 		keywords/T5Utilities.py
Library         keywords/BsnCommon.py
Library	        Collections.py
Library         keywords/Ixia.py
Library         keywords/KVMOperations.py
Resource		testsuites/T5/L3//T5_L3_physical_inter/t5_layer3_physical_inter_variables.txt
Resource		testsuites/T5/t5_dualleaf_three_rack_physical_resource.txt

* Test Cases
Inter tenant L3 untagged traffic with dynamic endpoints same rack
	L3 inter tenant same rack untagged with dynamic endpoints
	[Tags]     sanity		feature	

Inter tenant L3 untagged traffic with dynamic endpoints across rack
	L3 inter tenant across rack untagged with dynamic endpoints
    [Tags]     sanity       feature 
    
Inter tenant L3 tagged traffic with dynamic endpoints same rack
	L3 inter tenant same rack tagged with dynamic endpoints
    [Tags]     sanity       feature 
    
inter tenant L3 tagged traffic with dynamic endpoints across rack
	L3 inter tenant across rack tagged with dynamic endpoints
    [Tags]     sanity       feature 
    
Add and delete default route on tenant
	Add and delete default route on tenant router
	[Tags]	    feature	

Add and delete static route on tenant
	manual passed
	[Tags]		manual         feature							

Add and delete more specific route on tenant over existing static route
	Add and delete more specific route on tenant over existing static route
	[Tags]		feature

Add and delete tenant system interface on tenant router
	Add and delete tenant system interface on tenant router
	[Tags]		feature

Add and delete tenant router interface on system tenant
	Add and delete tenant router interface on system tenant
    [Tags]      feature	

L3 ttl one forwarding
	Verify inter tenant L3 traffic with ttl value of one two and three
    [Tags]      feature					

L3 inter tenant forwarding with end host moved to another port
	L3 inter tenant host moved 
    [Tags]      feature					

L3 inter tenant forwarding split horizon on the same port 
	manual passed
    [Tags]      feature     manual		

L3 inter tenant forwarding between endpoints on the same rack but different switch
	L3 inter tenant forwarding between endpoints on the same rack but different switch
    [Tags]      feature				
	
Inter tenant DHCP relay
	Inter tenant DHCP relay
    [Tags]      sanity      feature			dhcp-relay		run1	

Dhcp request from other host in other tenants with dhcp enabled but no inter tenant route
	Dhcp request from other host in other tenants with dhcp enabled but no inter tenant route
	[Tags]		feature			dhcp-relay			

Dhcp request from other host in other tenants without dhcp relay enabled but with inter tenant route
	Dhcp request from other host in other tenants without dhcp relay enabled but with inter tenant route
	[Tags]		feature			dhcp-relay			

Inter tenant dhcp relay with multiple dhcp servers
	Inter tenant dhcp relay with multiple dhcp servers
	[Tags]		feature			dhcp-relay

Inter tenant dhcp relay with duplicate circuitid
    manual failed
    [Tags]      feature         dhcp-relay          jira-PAN-902
    
Host moved to another vns on another tenant and renew dhcp 
	Host moved to another vns on another tenant and renew dhcp 
	[Tags]		feature			dhcp-relay			

DHCP request to external dhcp servers
	manual passed
	[Tags]			manual			feature			dhcp-relay		

Overlapping IP subnet with and without private keyword
	Overlapping IP subnet with and without private keyword
	[Tags]			feature			

One public IP and multiple private IP
	One public IP and multiple private IP
	[Tags]			feature			

Verify private IP is able to communicate with other vns in the same tenant
	Verify private IP is able to communicate with other vns in the same tenant
	[Tags]			feature			

Controller HA failover via CLI
	Controller HA failover via CLI
	[Tags]			feature			HA	

Controller HA failover via reboot of master
	Controller HA failover via reboot of master
	[Tags]			feature			HA
	
Spine reboot
	Spine reboot
	[Tags]			feature			HA

Leaf reboot
	Leaf reboot
	[Tags]			feature			HA

Traffic load balance across ECMP group
	manual passed
	[Tags]			manual			feature			ecmp		

Add and delete one ECMP members with active traffic in ecmp group
	manual passed
	[Tags]			manual			feature			ecmp			

Add and delete all ECMP members in ecmp group  
	manual passed
	[Tags]			manual			feature			ecmp			

Delete existing one ECMP members and add new ECMP member
	manual passed
	[Tags]			manual			feature			ecmp			

Verify L3 traffic honor more specific routes with ecmp group
	manual passed
	[Tags]			manual			feature			ecmp		

Move ecmp endpoint to another attachment point and verify L3 forwarding
	manual passed
	[Tags]			manual			feature			ecmp		

Verify L3 traffic switch over to different path when the same route is applied with different nexthop or tenant
	manual passed
	[Tags]			manual			feature			

L3 inter tenant traffic behavior in headless mode
	manual passed
	[Tags]			manual			feature			

Link flap between leaf and spine
	Link flap between leaf and spine
	[Tags]			feature			

L3 inter tenant forwarding to external router
	manual passed
	[Tags]			manual			feature			

L3 inter tenant forwarding to VRRP routers
	manual failed
	[Tags]			manual        	feature			BVS-1701

L3 inter tenant traceroute with icmp and udp probe
	L3 inter tenant traceroute with icmp and udp probe
	[Tags]			feature			

Add and delete endpoints with L3 inter tenant traffic
	Add and delete endpoints with L3 inter tenant traffic
	[Tags]			feature			

Verify private subnet cannot be routed via system router
	Verify private subnet cannot be routed via system router
	[Tags]			feature			

L3 inter tenant traffic with jumbo frame
	L3 inter tenant traffic with jumbo frame
	[Tags]			feature			

L3 inter tenant with CRC errors
	L3 inter tenant with CRC errors
	[Tags]			feature			

Verify route next hop IP must be in the same tenant
	manual passed
	[Tags]			manual			feature			

Verify ECMP next hop IP must be in the same tenant
	manual passed
	[Tags]			manual					feature			ecmp			

L3 inter tenant forwarding with ecmp destination
	manual passed
	[Tags]			manual					feature			ecmp			

L3 inter tenant shutdown and bringup both leaf switch in a dual tor setup
	L3 inter tenant shutdown and bringup both leaf switch in a dual tor setup
	[Tags]			feature			

L3 inter tenant shutdown and bringup both spine switch 
	L3 inter tenant shutdown and bringup both spine switch
	[Tags]			feature			

L3 inter tenant destroy active controller VM from KVM
	manual passed
	[Tags]			manual            feature		jira-BVS-1695	

L3 inter tenant destroy standby controller VM from KVM
	manual passed
	[Tags]			manual			 feature			

Restart ofad on leaf switch
	Restart ofad on leaf switch
	[Tags]			feature			

Restart ofad on spine switch
	Restart ofad on spine switch
	[Tags]			feature			

Controller HA failover with ecmp group
	manual failed
	[Tags]			manual			feature			ecmp	
		
Controller HA failover with dhcp-relay
	Controller HA failover with dhcp-relay
	[Tags]			feature			dhcp-relay		HA

Active Controller reboot with ecmp group
	manual passed
	[Tags]			manual			feature			ecmp	
	
Active Controller reboot with dhcp-relay
	Active Controller reboot with dhcp-relay
	[Tags]			feature			dhcp-relay			HA

Verify inter tenant L3 traffic is getting drop with null next hop
	Verify inter tenant L3 traffic is getting drop with null next hop
	[Tags]			feature				

Restart ofad on leaf switch with ecmp group
	manual passed
	[Tags]			manual			feature			ecmp	

Restart ofad on spine with ecmp group
	manual passed
	[Tags]			manual			feature			ecmp	

Restart ofad on leaf with dhcp-relay
	Restart ofad on leaf with dhcp-relay
	[Tags]			feature			dhcp-relay	

Restart ofad on spine with dhcp-relay
	Restart ofad on spine with dhcp-relay
	[Tags]			feature			dhcp-relay	
	
Flap member link in a port-group in ecmp group
	manual passed
	[Tags]			manual			solution			ecmp	
	
Flap port group in ecmp group
	manual passed
	[Tags]			manual			solution			ecmp

inter tenant ecmp forwarding in headless mode
	manual passed
	[Tags]			manual			solution			ecmp

inter tenant dhcp relay in headless mode
	manual passed
    [Tags]          manual			solution			dhcp-relay	

Verify L3 inter tenant forwarding after controller upgrade
	manual failed
    [Tags]          manual			feature					

Verify inter tenant ecmp forwarding after controller upgrade
	manual failed
	[Tags]			manual			feature					

Verify inter tenant dhcp-relay functionality after controller upgrade
	manual failed
	[Tags]			manual			feature		

Dhcp request from overlapping private IP and public IP
    Dhcp request from overlapping private IP and public IP
    [Tags]          solution            dhcp-relay  
    				
Verify routing loop is not causing packets to loop forever
    manual passed
    [Tags]          manual          feature     
    

* Keywords
L3 inter tenant same rack untagged with dynamic endpoints
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0	
	BASH ifup intf								h5								bond0	
	BASH ifup intf								h6								bond0			
	REST add portgroup to vns					X								X1						${leaf2_pc1}			-1
	REST add portgroup to vns					Y								Y1						${leaf2_pc2}			-1
	REST add interface to vns					X								X1						${leaf0_a}				${ixia1}				-1
	REST add interface to vns					Y								Y1						${leaf0_b}				${ixia2}				-1
	BASH ifconfig ip address							h5								10.251.1.11/24			bond0	
	BASH ifconfig ip address							h6								10.252.1.11/24			bond0
	BASH add route								h5								10.252.1.0/24			10.251.1.1
	BASH add route								h6								10.251.1.0/24			10.252.1.1
	sleep										5	
	BASH ping									h5								10.251.1.1				count=10
	BASH ping									h6								10.252.1.1				count=10
	${value} = 									BASH verify arp					h5						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h6						10.252.1.1
	Should Be True								${value} 
	${mac1} = 									BASH get intf mac				h5						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h6						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h5						10.252.1.11 			count=10
	Should Be True  							${loss} == 0	
#	${stream1}=  								L3 add  						name=stream1		  	flow=a<->b 				frame_rate=1000  			frame_size=9216  			frame_cnt=10000
#	...     									src_ip=10.251.1.101				src_gw=10.251.1.1		dst_ip=10.252.1.101		dst_gw=10.252.1.1			 			
#   start traffic  								${stream1}
#   sleep  10
#   stop traffic								${stream1}
#    verify results 								transmitted_frames  			received_valid_frames	${stream1}  			stream1
 	BASH delete route							h5								10.252.1.0/24			10.251.1.1
	BASH delete route							h6								10.251.1.0/24			10.252.1.1

	
L3 inter tenant across rack untagged with dynamic endpoints	
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0		
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0			
	REST add portgroup to vns					X								X1						${leaf2_pc1}			-1
	REST add portgroup to vns					Y								Y1						${leaf1_pc2}			-1
	REST add interface to vns					X								X1						${leaf0_a}				${ixia1}				-1
	REST add interface to vns					Y								Y1						${leaf1_a}				${ixia3}				-1	
	BASH ifconfig ip address							h5								10.251.1.11/24			bond0	
	BASH ifconfig ip address							h4								10.252.1.11/24			bond0
	BASH add route								h5								10.252.0.0/16			10.251.1.1
	BASH add route								h4								10.251.0.0/16			10.252.1.1
	sleep										5	
	BASH ping									h5								10.251.1.1				count=10
	BASH ping									h4								10.252.1.1				count=10
	${value} = 									BASH verify arp					h5						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h4						10.252.1.1
	Should Be True								${value} 	
	${mac1} = 									BASH get intf mac				h5						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h4						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h5						10.252.1.11 			count=10
	Should Be True  							${loss} == 0	
 	BASH delete route							h5								10.252.0.0/16			10.251.1.1
	BASH delete route							h4								10.251.0.0/16			10.252.1.1
	
L3 inter tenant traffic with jumbo frame
    BASH ifup intf                              h1                              bond0
    BASH ifup intf                              h2                              bond0
    BASH ifup intf                              h3                              bond0
    BASH ifup intf                              h4                              bond0       
    BASH ifup intf                              h5                              bond0
    BASH ifup intf                              h6                              bond0           
    REST add portgroup to vns                   X                               X1                      ${leaf2_pc1}            -1
    REST add portgroup to vns                   Y                               Y1                      ${leaf1_pc2}            -1
    REST add interface to vns                   X                               X1                      ${leaf0_a}              ${ixia1}                -1
    REST add interface to vns                   Y                               Y1                      ${leaf1_a}              ${ixia3}                -1  
    BASH ifconfig ip address                         h5                              10.251.1.11/24          bond0   
    BASH ifconfig ip address                         h4                              10.252.1.11/24          bond0
    BASH add route                              h5                              10.252.0.0/16           10.251.1.1
    BASH add route                              h4                              10.251.0.0/16           10.252.1.1
    sleep                                       5   
    BASH ping                                   h5                              10.251.1.1              count=10
    BASH ping                                   h4                              10.252.1.1              count=10
    ${value} =                                  BASH verify arp                 h5                      10.251.1.1
    Should Be True                              ${value}        
    ${value} =                                  BASH verify arp                 h4                      10.252.1.1
    Should Be True                              ${value}    
    ${mac1} =                                   BASH get intf mac               h5                      bond0
    ${result} =                                 REST show endpoints mac         ${mac1}
    Should Be True                              ${result}                       
    ${mac2} =                                   BASH get intf mac               h4                      bond0
    ${result} =                                 REST show endpoints mac         ${mac2}
    Should Be True                              ${result}                       
    REST show endpoints 
    ${loss} =                                   BASH ping                       h5                      10.252.1.11             count=10
    Should Be True                              ${loss} == 0    
    ${stream1}=                                 L3 add                          name=stream1            flow=a<->c              frame_rate=10000             frame_size=9216             frame_cnt=100000
    ...                                         src_ip=10.251.1.101             src_gw=10.251.1.1       dst_ip=10.252.1.101     dst_gw=10.252.1.1                       
    start traffic                               ${stream1}
    sleep  10
    stop traffic                                ${stream1}
    verify results                              transmitted_frames              received_valid_frames       ${stream1}              stream1
    BASH delete route                           h5                              10.252.0.0/16           10.251.1.1
    BASH delete route                           h4                              10.251.0.0/16           10.252.1.1
    
    	
L3 inter tenant same rack tagged with dynamic endpoints
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0				
	REST add portgroup to vns					X								X1						${leaf0_pc1}			1001
	REST add portgroup to vns					Y								Y1						${leaf0_pc2}			1002
	REST add interface to vns					X								X1						${leaf0_a}				${ixia1}				101
	REST add interface to vns					Y								Y1						${leaf0_b}				${ixia2}				201
	BASH add tag								h1								bond0					1001
	BASH add tag								h2								bond0					1002
	BASH ifup intf								h1								bond0.1001
	BASH ifup intf								h2								bond0.1002
	BASH ifconfig ip address							h1								10.251.1.11/24			bond0.1001	
	BASH ifconfig ip address							h2								10.252.1.11/24			bond0.1002
	BASH add route								h1								10.252.0.0/16			10.251.1.1
	BASH add route								h2								10.251.0.0/16			10.252.1.1
	sleep										5	
#	${value} = 									BASH verify arp					h1						10.251.1.1
#	Should Not Be True							${value} 		
#	${value} =									BASH verify arp					h2						10.252.1.1
#	Should Not Be True							${value} 	
	BASH ping									h1								10.252.1.11				count=10
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h2						10.252.1.1
	Should Be True								${value} 	
	${mac1} = 									BASH get intf mac				h1						bond0.1001
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h2						bond0.1002
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints		
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10
	Should Be True  							${loss} == 0	
	BASH delete route							h1								10.252.0.0/16			10.251.1.1
	BASH delete route							h2								10.251.0.0/16			10.252.1.1	
	
	
L3 inter tenant across rack tagged with dynamic endpoints	
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0	
	REST add portgroup to vns					X								X1						${leaf0_pc1}			1001
	REST add portgroup to vns					Y								Y1						${leaf1_pc1}			1003
	REST add interface to vns					X								X1						${leaf0_a}				${ixia1}				101
	REST add interface to vns					Y								Y1						${leaf1_a}				${ixia3}				201	
	BASH add tag								h1								bond0					1001
	BASH add tag								h3								bond0					1003
	BASH ifup intf								h1								bond0.1001
	BASH ifup intf								h3								bond0.1003
	BASH ifconfig ip address							h1								10.251.1.11/24			bond0.1001
	BASH ifconfig ip address							h3								10.252.1.11/24			bond0.1003
	BASH add route								h1								10.252.0.0/16			10.251.1.1
	BASH add route								h3								10.251.0.0/16			10.252.1.1
	sleep										5	
#	BASH ping									h1								10.251.1.1				count=10
#	BASH ping									h3								10.252.1.1				count=10
#	${value} = 									BASH verify arp					h1						10.251.1.1
#	Should Not Be True							${value} 		
#	${value} =									BASH verify arp					h3						10.252.1.1
#	Should Not Be True							${value} 	
	BASH ping									h1								10.252.1.11				count=10
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h3						10.252.1.1
	Should Be True								${value} 		
	${mac1} = 									BASH get intf mac				h1						bond0.1001
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h3						bond0.1003
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints		
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10
	Should Be True  							${loss} == 0		
	BASH delete route							h1								10.252.0.0/16			10.251.1.1
	BASH delete route							h3								10.251.0.0/16			10.252.1.1
	

Verify inter tenant L3 traffic is getting drop with null next hop
    BASH ifup intf                              h1                              bond0
    BASH ifup intf                              h2                              bond0
    BASH ifup intf                              h3                              bond0
    BASH ifup intf                              h4                              bond0
    BASH ifup intf                              h5                              bond0
    BASH ifup intf                              h6                              bond0   
    REST add portgroup to vns                   X                               X1                      ${leaf0_pc1}            1001
    REST add portgroup to vns                   Y                               Y1                      ${leaf1_pc1}            1003
    BASH add tag                                h1                              bond0                   1001
    BASH add tag                                h3                              bond0                   1003
    BASH ifup intf                              h1                              bond0.1001
    BASH ifup intf                              h3                              bond0.1003
    BASH ifconfig ip address                    h1                              10.251.1.11/24          bond0.1001
    BASH ifconfig ip address                    h3                              10.252.1.11/24          bond0.1003
    BASH add route                              h1                              10.252.0.0/16           10.251.1.1
    BASH add route                              h3                              10.251.0.0/16           10.252.1.1
    sleep                                       5   
    BASH ping                                   h1                              10.252.1.11             count=3
    ${value} =                                  BASH verify arp                 h1                      10.251.1.1
    Should Be True                              ${value}        
    ${value} =                                  BASH verify arp                 h3                      10.252.1.1
    Should Be True                              ${value}        
    ${mac1} =                                   BASH get intf mac               h1                      bond0.1001
    ${result} =                                 REST show endpoints mac         ${mac1}
    Should Be True                              ${result}                       
    ${mac2} =                                   BASH get intf mac               h3                      bond0.1003
    ${result} =                                 REST show endpoints mac         ${mac2}
    Should Be True                              ${result}                       
    REST show endpoints     
    ${loss} =                                   BASH ping                       h1                      10.252.1.11             count=10
    Should Be True                              ${loss} == 0
    REST delete static routes                   X                               10.252.0.0/16           
    sleep                                       1   
    REST add static routes                      X                               10.252.0.0/16           
    ${loss} =                                   BASH ping                       h1                      10.252.1.11             count=10
    Should Be True                              ${loss} == 100   
    REST delete static routes                   X                               10.252.0.0/16   
    ${loss} =                                   BASH ping                       h1                      10.252.1.11             count=10
    Should Be True                              ${loss} == 0   
    BASH delete route                           h1                              10.252.0.0/16           10.251.1.1
    BASH delete route                           h3                              10.251.0.0/16           10.252.1.1

	

Add and delete default route on tenant router
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0	
	REST add portgroup to vns					X								X1						${leaf0_pc1}			1001
	REST add portgroup to vns					Y								Y1						${leaf1_pc1}			1003
	REST add interface to vns					X								X1						${leaf0_a}				${ixia1}				101
	REST add interface to vns					Y								Y1						${leaf1_a}				${ixia3}				201	
	BASH add tag								h1								bond0					1001
	BASH add tag								h3								bond0					1003
	BASH ifup intf								h1								bond0.1001
	BASH ifup intf								h3								bond0.1003
	BASH ifconfig ip address							h1								10.251.1.11/24			bond0.1001
	BASH ifconfig ip address							h3								10.252.1.11/24			bond0.1003
	BASH add route								h1								10.252.0.0/16			10.251.1.1
	BASH add route								h3								10.251.0.0/16			10.252.1.1
	sleep										5	
#	BASH ping									h1								10.251.1.1				count=10
#	BASH ping									h3								10.252.1.1				count=10
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Not Be True							${value} 		
	${value} =									BASH verify arp					h3						10.252.1.1
	Should Not Be True							${value} 	
	BASH ping									h1								10.252.1.11				count=10
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h3						10.252.1.1
	Should Be True								${value} 		
	${mac1} = 									BASH get intf mac				h1						bond0.1001
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h3						bond0.1003
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints		
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10
	Should Be True  							${loss} == 0		
	REST delete static routes					X								10.252.0.0/16		 		
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10
	Should Be True  							${loss} == 100		
	REST add static routes						X								0.0.0.0/0				{"tenant-name": "system"}
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10
	Should Be True  							${loss} == 0		
	REST delete static routes					X								0.0.0.0/0				
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10
	Should Be True  							${loss} == 100		
	BASH delete route							h1								10.252.0.0/16			10.251.1.1
	BASH delete route							h3								10.251.0.0/16			10.252.1.1
	


Add and delete tenant system interface on tenant router
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0	
	REST add portgroup to vns					X								X1						${leaf0_pc1}			1001
	REST add portgroup to vns					Y								Y1						${leaf1_pc1}			1003
	REST add interface to vns					X								X1						${leaf0_a}				${ixia1}				101
	REST add interface to vns					Y								Y1						${leaf1_a}				${ixia3}				201	
	BASH add tag								h1								bond0					1001
	BASH add tag								h3								bond0					1003
	BASH ifup intf								h1								bond0.1001
	BASH ifup intf								h3								bond0.1003
	BASH ifconfig ip address							h1								10.251.1.11/24			bond0.1001
	BASH ifconfig ip address							h3								10.252.1.11/24			bond0.1003
	BASH add route								h1								10.252.0.0/16			10.251.1.1
	BASH add route								h3								10.251.0.0/16			10.252.1.1
	sleep										10	
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Not Be True							${value} 		
	${value} =									BASH verify arp					h3						10.252.1.1
	Should Not Be True							${value} 	
	BASH ping									h1								10.252.1.11				count=10
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h3						10.252.1.1
	Should Be True								${value} 		
	${mac1} = 									BASH get intf mac				h1						bond0.1001
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h3						bond0.1003
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints		
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10
	Should Be True  							${loss} == 0		
	REST delete system intf to tenant routers		X
	sleep											1
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10
	Should Be True  							${loss} == 100		
	REST add system intf to tenant routers		X
	sleep										1
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10
	Should Be True  							${loss} == 0		
	BASH delete route							h1								10.252.0.0/16			10.251.1.1
	BASH delete route							h3								10.251.0.0/16			10.252.1.1
	

Add and delete tenant router interface on system tenant
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0	
	REST add portgroup to vns					X								X1						${leaf0_pc1}			1001
	REST add portgroup to vns					Y								Y1						${leaf1_pc1}			1003
	REST add interface to vns					X								X1						${leaf0_a}				${ixia1}				101
	REST add interface to vns					Y								Y1						${leaf1_a}				${ixia3}				201	
	BASH add tag								h1								bond0					1001
	BASH add tag								h3								bond0					1003
	BASH ifup intf								h1								bond0.1001
	BASH ifup intf								h3								bond0.1003
	BASH ifconfig ip address							h1								10.251.1.11/24			bond0.1001
	BASH ifconfig ip address							h3								10.252.1.11/24			bond0.1003
	BASH add route								h1								10.252.0.0/16			10.251.1.1
	BASH add route								h3								10.251.0.0/16			10.252.1.1
	sleep										10	
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Not Be True							${value} 		
	${value} =									BASH verify arp					h3						10.252.1.1
	Should Not Be True							${value} 	
	BASH ping									h1								10.252.1.11				count=10
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h3						10.252.1.1
	Should Be True								${value} 		
	${mac1} = 									BASH get intf mac				h1						bond0.1001
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h3						bond0.1003
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints		
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10
	Should Be True  							${loss} == 0		
	REST delete tenant routers intf to system	Y
	sleep										1
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10
	Should Be True  							${loss} == 100		
	REST add tenant routers intf to system		Y
	sleep										1
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10
	Should Be True  							${loss} == 0		
	BASH delete route							h1								10.252.0.0/16			10.251.1.1
	BASH delete route							h3								10.251.0.0/16			10.252.1.1


Add and delete more specific route on tenant over existing static route
    BASH ifup intf                              h1                              bond0
    BASH ifup intf                              h2                              bond0
    BASH ifup intf                              h3                              bond0
    BASH ifup intf                              h4                              bond0
    BASH ifup intf                              h5                              bond0
    BASH ifup intf                              h6                              bond0   
    REST add portgroup to vns                   X                               X1                      ${leaf0_pc1}            1001
    REST add portgroup to vns                   X                               X2                      ${leaf0_pc2}            1002
    REST add portgroup to vns                   Y                               Y1                      ${leaf1_pc1}            1003
    REST add portgroup to vns                   Y                               Y2                      ${leaf1_pc2}            -1
    BASH add tag                                h1                              bond0                   1001
    BASH add tag                                h2                              bond0                   1002
    BASH add tag                                h3                              bond0                   1003
    BASH ifup intf                              h1                              bond0.1001
    BASH ifup intf                              h2                              bond0.1002
    BASH ifup intf                              h3                              bond0.1003
    BASH ifup intf                              h4                              bond0
    BASH ifconfig ip address                    h1                              10.251.1.11/24          bond0.1001
    BASH ifconfig ip address                    h2                              10.251.2.11/24          bond0.1002
    BASH ifconfig ip address                    h3                              10.252.1.11/24          bond0.1003
    BASH ifconfig ip address                    h4                              10.252.2.11/24          bond0
    BASH add route                              h1                              10.252.0.0/16           10.251.1.1
    BASH add route                              h1                              10.251.0.0/16           10.251.1.1
    BASH add route                              h2                              10.252.0.0/16           10.251.2.1
    BASH add route                              h2                              10.251.0.0/16           10.251.2.1
    BASH add route                              h3                              10.251.0.0/16           10.252.1.1
    BASH add route                              h3                              10.252.0.0/16           10.252.1.1
    BASH add route                              h4                              10.251.0.0/16           10.252.2.1
    BASH add route                              h4                              10.252.0.0/16           10.252.2.1
    sleep                                       5
    REST delete static routes                   X                               0.0.0.0/0   
    REST add static routes                      X                               10.252.0.0/16           {"tenant-name": "system"}
    REST delete static routes                   Y                               0.0.0.0/0   
    REST add static routes                      Y                               10.251.0.0/16           {"tenant-name": "system"}
    ${loss} =                                   BASH ping                       h1                      10.252.1.11             count=10
    Should Be True                              ${loss} < 40
    ${value} =                                  BASH verify arp                 h1                      10.251.1.1
    Should Be True                              ${value}        
    ${value} =                                  BASH verify arp                 h3                      10.252.1.1
    Should Be True                              ${value} 
    REST add static routes                      X                               10.252.1.0/24           {"ip-address": "10.251.2.11"}
    sleep                                       1
    ${returnVal} =                              verify ping with tcpdump        h1                      10.252.1.11            h2      bond0       ICMP echo request   
    Should Be True                              ${returnVal}    
    ${returnVal} =                              verify ping with tcpdump        h1                      10.252.1.11            h2      bond0       10.252.1.11   
    Should Be True                              ${returnVal}    
    ${loss} =                                   BASH ping                       h1                      10.252.1.11             count=5
    Should Be True                              ${loss} == 100
    REST delete static routes                   X                               10.252.1.0/24
    sleep                                       1
    Log                                         REST show l3 host table
    Log                                         REST show l3 cidr table
    Log                                         CLI show running tenant
    ${loss} =                                   BASH ping                       h1                      10.252.1.11             count=10
    Should Be True                              ${loss} < 40
    BASH delete route                           h1                              10.252.0.0/16           10.251.1.1
    BASH delete route                           h3                              10.251.0.0/16           10.252.1.1

Verify inter tenant L3 traffic with ttl value of one two and three
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0	
	REST add portgroup to vns					X								X1						${leaf0_pc1}			1001
	REST add portgroup to vns					Y								Y1						${leaf1_pc1}			1003
	REST add interface to vns					X								X1						${leaf0_a}				${ixia1}				101
	REST add interface to vns					Y								Y1						${leaf1_a}				${ixia3}				201	
	BASH add tag								h1								bond0					1001
	BASH add tag								h3								bond0					1003
	BASH ifup intf								h1								bond0.1001
	BASH ifup intf								h3								bond0.1003
	BASH ifconfig ip address							h1								10.251.1.11/24			bond0.1001
	BASH ifconfig ip address							h3								10.252.1.11/24			bond0.1003
	BASH add route								h1								10.252.0.0/16			10.251.1.1
	BASH add route								h3								10.251.0.0/16			10.252.1.1
	sleep										5	
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Not Be True							${value} 		
	${value} =									BASH verify arp					h3						10.252.1.1
	Should Not Be True							${value} 	
	BASH ping									h1								10.252.1.11				count=10
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h3						10.252.1.1
	Should Be True								${value} 		
	${mac1} = 									BASH get intf mac				h1						bond0.1001
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h3						bond0.1003
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints		
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10
	Should Be True  							${loss} == 0		
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10			ttl=1
	Should Be True  							${loss} == 100		
	${result} =       							BASH content 					h1
    log              							result from bash ping is ${result}
   	Should Contain X Times						${result}						Time to live exceeded	10
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10			ttl=2
	Should Be True  							${loss} == 100		
	${result} =       							BASH content 					h1
    log              							result from bash ping is ${result}
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10			ttl=3
	Should Be True  							${loss} == 100
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10			ttl=4
	Should Be True  							${loss} == 0
	BASH delete route							h1								10.252.0.0/16			10.251.1.1
	BASH delete route							h3								10.251.0.0/16			10.252.1.1
	

L3 inter tenant host moved 
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0
	BASH delete tag								h3								bond0.1002				soft_error=${true}				
	REST add portgroup to vns					X								X1						${leaf0_pc1}			1001
	REST add portgroup to vns					Y								Y1						${leaf0_pc2}			1002
	REST add portgroup to vns					Y								Y1						${leaf1_pc1}			1002
	REST add interface to vns					X								X1						${leaf0_a}				${ixia1}				101
	REST add interface to vns					Y								Y1						${leaf0_b}				${ixia2}				201
	BASH add tag								h1								bond0					1001
	BASH add tag								h2								bond0					1002
	BASH ifup intf								h1								bond0.1001
	BASH ifup intf								h2								bond0.1002
	BASH ifconfig ip address							h1								10.251.1.11/24			bond0.1001	
	BASH ifconfig ip address							h2								10.252.1.11/24			bond0.1002
	BASH add route								h1								10.252.0.0/16			10.251.1.1
	BASH add route								h2								10.251.0.0/16			10.252.1.1
	sleep										5	
	BASH ping									h1								10.252.1.11				count=10
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h2						10.252.1.1
	Should Be True								${value} 	
	${mac1} = 									BASH get intf mac				h1						bond0.1001
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h2						bond0.1002
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}	
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']}	
	Should Contain								${attachpoint}					${leaf0_pc2}	
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10
	Should Be True  							${loss} < 20	
	sleep										5
	BASH init intf								h2								bond0.1002
	BASH ifdown intf							h2								bond0
	BASH add tag								h3								bond0					1002
	BASH set mac address						h3								bond0.1002				${mac2}
	BASH ifup intf								h3								bond0.1002
	BASH ifconfig ip address							h3								10.252.1.11/24			bond0.1002
	BASH add route								h3								10.251.0.0/16			10.252.1.1
	${mac3} = 									BASH get intf mac				h3						bond0.1002
	Should Be Equal								${mac3}							${mac2}
	BASH ping									h3								10.252.1.1				count=5
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10
	Should Be True  							${loss} < 20	
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}	
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']}	
	Should Contain								${attachpoint}					${leaf1_pc1}
	BASH delete tag								h3								bond0.1002				soft_error=${true}
	BASH delete route							h1								10.252.0.0/16			10.251.1.1
	BASH delete route							h2								10.251.0.0/16			10.252.1.1	


L3 inter tenant forwarding between endpoints on the same rack but different switch
### host onboard nic is 1gig, switchlight will not support 1gig interface
    BASH init intf                              h5                              bond0
    BASH init intf                              h6                              bond0
    BASH ifup intf                              h5                              eth1
    BASH ifup intf                              h6                              em2
    BASH init intf                              h5                              eth1
    BASH init intf                              h6                              em2
    BASH ifconfig ip address                         h5                              10.251.1.31/24          eth1
    BASH ifconfig ip address                         h6                              10.252.1.31/24          em2
    BASH add route                              h5                              10.252.1.0/24           10.251.1.1
    BASH add route                              h6                              10.251.1.0/24           10.252.1.1
    REST add interface to vns                   X                               X1                      ${leaf2_a}          ${leaf2a_host5}            -1
    REST add interface to vns                   Y                               Y1                      ${leaf2_b}          ${leaf2b_host6}            -1
    sleep                                       1
    BASH ping                                   h5                              10.252.1.31             count=5
    ${value} =                                  BASH verify arp                 h5                      10.251.1.1
    Should Be True                              ${value}        
    ${value} =                                  BASH verify arp                 h6                      10.252.1.1
    Should Be True                              ${value}    
    ${mac1} =                                   BASH get intf mac               h5                      eth1
    ${result} =                                 REST show endpoints mac         ${mac1}
    Should Be True                              ${result}   
    ${attachpoint} =                            Set Variable                    ${result[0]['attachment-point']}    
    Should Contain                              ${attachpoint}                  ${leaf2a_host5}
    ${mac2} =                                   BASH get intf mac               h6                      em2
    ${result} =                                 REST show endpoints mac         ${mac2}
    Should Be True                              ${result}                       
    ${attachpoint} =                            Set Variable                    ${result[0]['attachment-point']}    
    Should Contain                              ${attachpoint}                  ${leaf2b_host6}
    REST show endpoints     
    ${loss} =                                   BASH ping                       h5                      10.252.1.31             count=10
    Should Be True                              ${loss} < 20        
    BASH init intf                              h5                              eth1
    BASH init intf                              h6                              em2
    

Overlapping IP subnet with and without private keyword
    REST add tenant                                 A
    REST add tenant                                 B
    REST add vns                                    A                           A1
    REST add vns                                    A                           A2
    REST add vns                                    A                           A3
    REST add router intf                            A                           A1
    REST add router intf                            A                           A2
    REST add router intf                            A                           A3  
    REST add vns                                    B                           B1
    REST add vns                                    B                           B2
    REST add vns                                    B                           B3
    REST add router intf                            B                           B1
    REST add router intf                            B                           B2
    REST add router intf                            B                           B3  
    REST add vns ip                                 A                           A1              10.101.0.1              24
    sleep                                           2   
    ${result} =                                     REST add vns ip             B               B1                      10.101.0.1              25
    Should Not Be True                              ${result}
    sleep                                           2
    ${result} =                                     REST add vns ip             B               B1                      10.101.0.1              24
    Should Not Be True                              ${result}
    sleep                                           2
    ${result} =                                     REST add vns ip             B               B1                      10.101.0.254            25
    Should Not Be True                              ${result}
    sleep                                           2
    ${result} =                                     REST add vns ip             B               B1                      10.101.0.126            25
    Should Not Be True                              ${result}
    sleep                                           2
    REST add vns ip                                 A                           A1              10.101.0.1              24                      private=true
    sleep                                           2   
    ${result} =                                     REST add vns ip             B               B1                      10.101.0.1              25
    Should Be True                                  ${result}
    sleep                                           2
    ${result} =                                     REST add vns ip             B               B1                      10.101.0.1              24
    Should Be True                                  ${result}
    sleep                                           2
    ${result} =                                     REST add vns ip             B               B1                      10.101.0.254            25
    Should Be True                                  ${result}
    sleep                                           2
    ${result} =                                     REST add vns ip             B               B1                      10.101.0.126            25
    Should Be True                                  ${result}
    sleep                                           2
    REST add vns ip                                 A                           A1              10.101.0.1              24                      
    sleep                                           2   
    ${result} =                                     REST add vns ip             B               B1                      10.101.0.1              25      private=true
    Should Be True                                  ${result}
    sleep                                           2
    ${result} =                                     REST add vns ip             B               B1                      10.101.0.1              24      private=true
    Should Be True                                  ${result}
    sleep                                           2
    ${result} =                                     REST add vns ip             B               B1                      10.101.0.254            25      private=true
    Should Be True                                  ${result}
    sleep                                           2
    ${result} =                                     REST add vns ip             B               B1                      10.101.0.126            25      private=true
    Should Be True                                  ${result}
    sleep                                           2

One public IP and multiple private IP
    REST add tenant                                 A
    REST add tenant                                 B
    REST add tenant                                 C
    REST add tenant                                 D
    REST add tenant                                 E
    REST add vns                                    A                           A1
    REST add vns                                    B                           B1
    REST add vns                                    C                           C1
    REST add vns                                    D                           D1
    REST add vns                                    E                           E1
    REST add router intf                            A                           A1
    REST add router intf                            B                           B1
    REST add router intf                            C                           C1
    REST add router intf                            D                           D1
    REST add router intf                            E                           E1      
    REST add vns ip                                 A                           A1              10.101.0.1              24
    sleep                                           2   
    ${result} =                                     REST add vns ip             B               B1                      10.101.0.1              24      private=true
    Should Be True                                  ${result}
    ${result} =                                     REST add vns ip             C               C1                      10.101.0.1              24      private=true
    Should Be True                                  ${result}
    ${result} =                                     REST add vns ip             D               D1                      10.101.0.1              24      private=true
    Should Be True                                  ${result}
    ${result} =                                     REST add vns ip             E               E1                      10.101.0.1              24      private=true
    Should Be True                                  ${result}

Verify private IP is able to communicate with other vns in the same tenant
    BASH ifup intf                              h1                              bond0
    BASH ifup intf                              h2                              bond0
    BASH ifup intf                              h3                              bond0
    BASH ifup intf                              h4                              bond0       
    BASH ifup intf                              h5                              bond0
    BASH ifup intf                              h6                              bond0           
    REST add portgroup to vns                   X                               X1                      ${leaf2_pc1}            -1
    REST add portgroup to vns                   X                               X2                      ${leaf2_pc2}            -1
    REST add portgroup to vns                   Y                               Y1                      ${leaf1_pc1}            -1
    REST add portgroup to vns                   Y                               Y2                      ${leaf1_pc2}            -1
    REST add vns ip                             X                               X1                      10.251.1.1              24              private=true
    REST add vns ip                             Y                               Y1                      10.251.1.1              24              private=true
    BASH ifconfig ip address                         h5                              10.251.1.11/24          bond0   
    BASH ifconfig ip address                         h6                              10.251.2.11/24          bond0   
    BASH ifconfig ip address                         h3                              10.251.1.11/24          bond0
    BASH ifconfig ip address                         h4                              10.252.2.11/24          bond0
    BASH add route                              h5                              10.252.0.0/16           10.251.1.1
    BASH add route                              h5                              10.251.0.0/16           10.251.1.1
    BASH add route                              h6                              10.251.0.0/16           10.251.2.1
    BASH add route                              h6                              10.252.0.0/16           10.251.2.1
    BASH add route                              h3                              10.251.0.0/16           10.251.1.1
    BASH add route                              h3                              10.252.0.0/16           10.251.1.1
    BASH add route                              h4                              10.251.0.0/16           10.252.2.1
    BASH add route                              h4                              10.252.0.0/16           10.252.2.1
    sleep                                       5   
    BASH ping                                   h5                              10.251.1.1              count=5
    BASH ping                                   h6                              10.251.2.1              count=5
    BASH ping                                   h3                              10.251.1.1              count=5
    BASH ping                                   h4                              10.252.2.1              count=5
    ${value} =                                  BASH verify arp                 h5                      10.251.1.1
    Should Be True                              ${value}        
    ${value} =                                  BASH verify arp                 h6                      10.251.2.1
    Should Be True                              ${value}        
    ${value} =                                  BASH verify arp                 h4                      10.252.2.1
    Should Be True                              ${value}        
    ${value} =                                  BASH verify arp                 h3                      10.251.1.1
    Should Be True                              ${value}    
    ${mac1} =                                   BASH get intf mac               h5                      bond0
    ${result} =                                 REST show endpoints mac         ${mac1}
    Should Be True                              ${result}                       
    ${mac2} =                                   BASH get intf mac               h6                      bond0
    ${result} =                                 REST show endpoints mac         ${mac2}
    Should Be True                              ${result} 
    ${mac3} =                                   BASH get intf mac               h3                      bond0
    ${result} =                                 REST show endpoints mac         ${mac3}
    Should Be True                              ${result}                       
    ${mac4} =                                   BASH get intf mac               h4                      bond0
    ${result} =                                 REST show endpoints mac         ${mac4}
    Should Be True                              ${result} 
    REST show endpoints 
    ${loss} =                                   BASH ping                       h5                      10.251.2.11             count=10
    Should Be True                              ${loss} == 0    
    ${loss} =                                   BASH ping                       h3                      10.252.2.11             count=10
    Should Be True                              ${loss} == 0    
    ${loss} =                                   BASH ping                       h3                      10.251.2.11             count=10
    Should Be True                              ${loss} == 100    
    ${loss} =                                   BASH ping                       h6                      10.252.2.11             count=10
    Should Be True                              ${loss} == 0    
    BASH delete route                           h5                              10.252.0.0/16           10.251.1.1
    BASH delete route                           h5                              10.251.0.0/16           10.251.1.1
    BASH delete route                           h6                              10.251.0.0/16           10.251.2.1
    BASH delete route                           h6                              10.252.0.0/16           10.251.2.1
    BASH delete route                           h3                              10.251.0.0/16           10.251.1.1
    BASH delete route                           h3                              10.252.0.0/16           10.251.1.1
    BASH delete route                           h4                              10.251.0.0/16           10.252.2.1
    BASH delete route                           h4                              10.252.0.0/16           10.252.2.1


L3 inter tenant with CRC errors
    BASH ifup intf                              h1                              bond0
    BASH ifup intf                              h2                              bond0
    BASH ifup intf                              h3                              bond0
    BASH ifup intf                              h4                              bond0   
    BASH ifup intf                              h5                              bond0   
    BASH ifup intf                              h6                              bond0           
    REST add portgroup to vns                   X                               X1                      ${leaf2_pc1}            -1
    REST add portgroup to vns                   Y                               Y1                      ${leaf2_pc2}            -1
    REST add interface to vns                   X                               X1                      ${leaf0_a}              ${ixia1}                -1
    REST add interface to vns                   Y                               Y1                      ${leaf0_b}              ${ixia2}                -1
    BASH ifconfig ip address                         h5                              10.251.1.11/24          bond0   
    BASH ifconfig ip address                         h6                              10.252.1.11/24          bond0
    BASH add route                              h5                              10.252.1.0/24           10.251.1.1
    BASH add route                              h6                              10.251.1.0/24           10.252.1.1
    sleep                                       5   
    BASH ping                                   h5                              10.251.1.1              count=10
    BASH ping                                   h6                              10.252.1.1              count=10
    ${value} =                                  BASH verify arp                 h5                      10.251.1.1
    Should Be True                              ${value}        
    ${value} =                                  BASH verify arp                 h6                      10.252.1.1
    Should Be True                              ${value} 
    ${mac1} =                                   BASH get intf mac               h5                      bond0
    ${result} =                                 REST show endpoints mac         ${mac1}
    Should Be True                              ${result}                       
    ${mac2} =                                   BASH get intf mac               h6                      bond0
    ${result} =                                 REST show endpoints mac         ${mac2}
    Should Be True                              ${result}                       
    REST show endpoints 
    ${loss} =                                   BASH ping                       h5                      10.252.1.11             count=10
    Should Be True                              ${loss} == 0    
    ${stream1}=                                 L3 add                          name=stream1            flow=a<->b              frame_rate=1000             frame_size=9216             frame_cnt=10000
    ...                                         src_ip=10.251.1.101             src_gw=10.251.1.1       dst_ip=10.252.1.101     dst_gw=10.252.1.1                       
    start traffic                               ${stream1}
    sleep  10
    stop traffic                                ${stream1}
    verify results                              transmitted_frames              received_valid_frames   ${stream1}              stream1
    sleep                                       1
    ${stream2}=                                 L3 add                          name=stream1            flow=a<->b              frame_rate=1000             frame_size=9216             frame_cnt=10000
    ...                                         src_ip=10.251.1.101             src_gw=10.251.1.1       dst_ip=10.252.1.101     dst_gw=10.252.1.1           crc=True                    
    start traffic                               ${stream2}
    sleep  10
    stop traffic                                ${stream2}
    calculate loss                              transmitted_frames              received_valid_frames   ${stream2}              stream2    
    BASH delete route                           h5                              10.252.1.0/24           10.251.1.1
    BASH delete route                           h6                              10.251.1.0/24           10.252.1.1


L3 inter tenant traceroute with icmp and udp probe
    BASH ifup intf                              h1                              bond0
    BASH ifup intf                              h2                              bond0
    BASH ifup intf                              h3                              bond0
    BASH ifup intf                              h4                              bond0   
    BASH ifup intf                              h5                              bond0   
    BASH ifup intf                              h6                              bond0           
    REST add portgroup to vns                   X                               X1                      ${leaf2_pc1}            -1
    REST add portgroup to vns                   Y                               Y1                      ${leaf2_pc2}            -1
    BASH ifconfig ip address                    h5                              10.251.1.11/24          bond0   
    BASH ifconfig ip address                    h6                              10.252.1.11/24          bond0
    BASH add route                              h5                              10.252.0.0/16           10.251.1.1
    BASH add route                              h6                              10.251.0.0/16           10.252.1.1
    sleep                                       1
    ${loss} =                                   BASH ping                       h5                      10.252.1.1              count=10
    Should Be True                              ${loss} < 50
    ${string} =                                 BASH run command                h5                      traceroute -n -m 10 10.252.1.11
    ${result} =                                 Set Variable                    ${string[1]} 
    Should Contain                              ${result}                       \ 1\ \ 10.251.1.1 
    ${result} =                                 Set Variable                    ${string[2]} 
    Should Contain                              ${result}                       \ 2\ \ * * * 
    ${result} =                                 Set Variable                    ${string[3]} 
    Should Contain                              ${result}                       \ 3\ \ * * * 
    ${result} =                                 Set Variable                    ${string[4]} 
    Should Contain                              ${result}                       \ 4\ \ 10.252.1.11 
    ${string} =                                 BASH run command                h5                      traceroute -n -m 10 -I 10.252.1.11
    ${result} =                                 Set Variable                    ${string[1]} 
    Should Contain                              ${result}                       \ 1\ \ 10.251.1.1 
    ${result} =                                 Set Variable                    ${string[2]} 
    Should Contain                              ${result}                       \ 2\ \ * * * 
    ${result} =                                 Set Variable                    ${string[3]} 
    Should Contain                              ${result}                       \ 3\ \ * * * 
    ${result} =                                 Set Variable                    ${string[4]} 
    Should Contain                              ${result}                       \ 4\ \ 10.252.1.11 
    BASH delete route                           h5                              10.252.1.0/24           10.251.1.1
    BASH delete route                           h6                              10.251.1.0/24           10.252.1.1

    
Inter tenant dhcp relay	
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0				
	REST add portgroup to vns					X								X1						${leaf0_pc1}			-1
	REST add portgroup to vns					Y								Y1						${leaf0_pc2}			1002
	REST add portgroup to vns					Y								Y1						${leaf2_pc1}			-1
	BASH delete tag								h1								bond0.1001				soft_error=${true}		
	BASH add tag								h2								bond0					1002
	BASH ifup intf								h1								bond0
	BASH ifup intf								h2								bond0.1002
	BASH ifconfig ip address	      			h1								10.251.1.11/24			bond0
	BASH start service							h1								isc-dhcp-server
	sleep										1
	${value} = 									BASH check service status		h1						isc-dhcp-server
	Should Contain								${value}						is started
	sleep										1
	BASH add route								h1								10.252.0.0/16			10.251.1.1
	BASH ping                                   h1                              10.251.1.1              count=4
	REST add dhcp relay							Y								Y1						10.251.1.11
	#REST enable dhcp relay						Y								Y1	
	sleep										5
	${ipAddr2} = 								BASH renew dhcpv4 address		h2						bond0.1002
	Should Not Be Empty							${ipAddr2}
	${ipAddr5} = 								BASH renew dhcpv4 address		h5						bond0
	Should Not Be Empty							${ipAddr5}
	${mac1} =									BASH get intf mac				h1						bond0
	${result} = 								REST show endpoints mac			${mac1}
	Should Not Be Empty							${result}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']}	
	Should Contain								${attachpoint}					${leaf0_pc1}
	BASH add route								h2								10.251.0.0/16			10.252.1.1
	BASH add route								h5								10.251.0.0/16			10.252.1.1
	BASH ping									h1								${ipAddr2}				count=10
	BASH ping									h1								${ipAddr5}				count=10
	${mac2} =									BASH get intf mac				h2						bond0
	${result} = 								REST show endpoints mac			${mac2}
	Should Not Be Empty							${result}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']}	
	${ipAddr} = 								Set Variable					${result[0]['ip-address']}
	Should Contain								${attachpoint}					${leaf0_pc2}
	Should Contain								${ipAddr}						${ipAddr2}
	${mac5} =									BASH get intf mac				h5						bond0
	${result} = 								REST show endpoints mac			${mac5}
	Should Not Be Empty							${result}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']}
	${ipAddr} = 								Set Variable					${result[0]['ip-address']}	
	Should Contain								${attachpoint}					${leaf2_pc1}
	Should Contain								${ipAddr}						${ipAddr5}
	sleep										1
	${loss} =									BASH ping 						h1						${ipAddr2}				count=10
	Should Be True  							${loss} < 20	
	${loss} =									BASH ping 						h1						${ipAddr5}				count=10
	Should Be True  							${loss} < 20	
	${value} = 									BASH release dhcpv4 address		h2						bond0.1002
	Should Be True								${value}
	${value} = 									BASH release dhcpv4 address		h5						bond0
	Should Be True								${value}
	${loss} =									BASH ping 						h1						${ipAddr2}				count=10
	Should Be True								${loss}	= 100
	${loss} =									BASH ping 						h1						${ipAddr5}				count=10
	Should Be True								${loss}	= 100
	BASH delete route							h1								10.252.0.0/16			10.251.1.1
	BASH delete route							h2								10.251.0.0/16			10.252.1.1	
	BASH delete route							h5								10.251.0.0/16			10.252.1.1
	

Dhcp request from other host in other tenants with dhcp enabled but no inter tenant route
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0				
	REST add portgroup to vns					X								X1						${leaf0_pc1}			-1
	REST add portgroup to vns					Y								Y1						${leaf0_pc2}			1002
	REST add portgroup to vns					Y								Y1						${leaf2_pc1}			-1
	BASH delete tag								h1								bond0.1001				soft_error=${true}		
	BASH add tag								h2								bond0					1002
	BASH ifup intf								h1								bond0
	BASH ifup intf								h2								bond0.1002
	BASH ifconfig ip address							h1								10.251.1.11/24			bond0
	BASH start service							h1								isc-dhcp-server
	sleep										1
	${value} = 									BASH check service status		h1						isc-dhcp-server
	Should Contain								${value}						is started
	sleep										1
	BASH add route								h1								10.252.0.0/16			10.251.1.1
	BASH ping                                   h1                              10.251.1.1              count=4
	REST add dhcp relay							Y								Y1						10.251.1.11
	#REST enable dhcp relay						Y								Y1	
	sleep										5
	${ipAddr2} = 								BASH renew dhcpv4 address		h2						bond0.1002
	Should Not Be Empty							${ipAddr2}
	${mac1} =									BASH get intf mac				h1						bond0
	${result} = 								REST show endpoints mac			${mac1}
	Should Not Be Empty							${result}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']}	
	Should Contain								${attachpoint}					${leaf0_pc1}
	BASH add route								h2								10.251.0.0/16			10.252.1.1
	BASH add route								h5								10.251.0.0/16			10.252.1.1
	BASH ping									h1								${ipAddr2}				count=10
	${mac2} =									BASH get intf mac				h2						bond0
	${result} = 								REST show endpoints mac			${mac2}
	Should Not Be Empty							${result}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']}	
	${ipAddr} = 								Set Variable					${result[0]['ip-address']}
	Should Contain								${attachpoint}					${leaf0_pc2}
	Should Contain								${ipAddr}						${ipAddr2}
	sleep										1
	${loss} =									BASH ping 						h1						${ipAddr2}				count=10
	Should Be True  							${loss} < 20	
	REST delete static routes					Y								10.251.0.0/16		
	${value} = 									BASH release dhcpv4 address		h2						bond0.1002
	Should Be True								${value}
	${ipAddr2} = 								BASH renew dhcpv4 address		h2						bond0.1002
	Should Be Empty								${ipAddr2}
	${loss} =									BASH ping						h1						${ipAddr2}
	Should Be True								${loss} = 100
	REST add static routes						Y								10.251.0.0/16			 {"tenant-name": "system"}
	sleep										1
	${ipAddr2} = 								BASH renew dhcpv4 address		h2						bond0.1002
	Should Not Be Empty							${ipAddr2}
	BASH add route								h2								10.251.0.0/16			10.252.1.1
	${loss} =									BASH ping						h1						${ipAddr2}
	Should Be True								${loss} < 20
	BASH delete route							h1								10.252.0.0/16			10.251.1.1
	BASH delete route							h2								10.251.0.0/16			10.252.1.1	
	BASH delete route							h5								10.251.0.0/16			10.252.1.1

Dhcp request from other host in other tenants without dhcp relay enabled but with inter tenant route
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0				
	REST add portgroup to vns					X								X1						${leaf0_pc1}			-1
	REST add portgroup to vns					Y								Y1						${leaf0_pc2}			1002
	REST add portgroup to vns					Y								Y1						${leaf2_pc1}			-1
	BASH delete tag								h1								bond0.1001				soft_error=${true}		
	BASH add tag								h2								bond0					1002
	BASH ifup intf								h1								bond0
	BASH ifup intf								h2								bond0.1002
	BASH ifconfig ip address					h1								10.251.1.11/24			bond0
	BASH start service							h1								isc-dhcp-server
	BASH ping                                   h1                              10.251.1.1              count=4
	sleep										1
	${value} = 									BASH check service status		h1						isc-dhcp-server
	Should Contain								${value}						is started
	sleep										1
	BASH add route								h1								10.252.0.0/16			10.251.1.1
	${ipAddr2} = 								BASH renew dhcpv4 address		h2						bond0.1002
	Should Be Empty								${ipAddr2}
	${ipAddr5} = 								BASH renew dhcpv4 address		h5						bond0
	Should Be Empty								${ipAddr5}	
	${mac2} =									BASH get intf mac				h2						bond0
	${result} = 								REST show endpoints mac			${mac2}
	Should Not Be Empty							${result}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']}	
	${state2} = 								Set Variable					${result[0]['state']}	
	Should Contain								${attachpoint}					${leaf0_pc2}
	Should Contain								${state2}						L2 Only
	${mac5} =									BASH get intf mac				h5						bond0
	${result} = 								REST show endpoints mac			${mac5}
	Should Not Be Empty							${result}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']}
	${state5} = 								Set Variable					${result[0]['state']}	
	Should Contain								${attachpoint}					${leaf2_pc1}
	Should Contain								${state5}						L2 Only
	sleep										5
	REST add dhcp relay							Y								Y1						10.251.1.11
	#REST enable dhcp relay						Y								Y1	
	sleep										5
	${ipAddr2} = 								BASH renew dhcpv4 address		h2						bond0.1002
	Should Not Be Empty							${ipAddr2}
	${ipAddr5} = 								BASH renew dhcpv4 address		h5						bond0
	Should Not Be Empty							${ipAddr5}
	${mac1} =									BASH get intf mac				h1						bond0
	${result} = 								REST show endpoints mac			${mac1}
	Should Not Be Empty							${result}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']}	
	Should Contain								${attachpoint}					${leaf0_pc1}
	BASH add route								h2								10.251.0.0/16			10.252.1.1
	BASH add route								h5								10.251.0.0/16			10.252.1.1
	BASH ping									h1								${ipAddr2}				count=10
	BASH ping									h1								${ipAddr5}				count=10
	${mac2} =									BASH get intf mac				h2						bond0
	${result} = 								REST show endpoints mac			${mac2}
	Should Not Be Empty							${result}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']}	
	${ipAddr} = 								Set Variable					${result[0]['ip-address']}
	Should Contain								${attachpoint}					${leaf0_pc2}
	Should Contain								${ipAddr}						${ipAddr2}
	${mac5} =									BASH get intf mac				h5						bond0
	${result} = 								REST show endpoints mac			${mac5}
	Should Not Be Empty							${result}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']}
	${ipAddr} = 								Set Variable					${result[0]['ip-address']}	
	Should Contain								${attachpoint}					${leaf2_pc1}
	Should Contain								${ipAddr}						${ipAddr5}
	sleep										1
	${loss} =									BASH ping 						h1						${ipAddr2}				count=10
	Should Be True  							${loss} < 20	
	${loss} =									BASH ping 						h1						${ipAddr5}				count=10
	Should Be True  							${loss} < 20	
	${value} = 									BASH release dhcpv4 address		h2						bond0.1002
	Should Be True								${value}
	${value} = 									BASH release dhcpv4 address		h5						bond0
	Should Be True								${value}
	${loss} =									BASH ping 						h1						${ipAddr2}				count=10
	Should Be True								${loss}	= 100
	${loss} =									BASH ping 						h1						${ipAddr5}				count=10
	Should Be True								${loss}	= 100
	BASH delete route							h1								10.252.0.0/16			10.251.1.1
	BASH delete route							h2								10.251.0.0/16			10.252.1.1	
	BASH delete route							h5								10.251.0.0/16			10.252.1.1
	

Host moved to another vns on another tenant and renew dhcp 
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0				
	REST add portgroup to vns					X								X1						${leaf0_pc1}			-1
	REST add portgroup to vns					Y								Y1						${leaf0_pc2}			1002
	REST add portgroup to vns					Y								Y1						${leaf2_pc1}			-1
	BASH delete tag								h1								bond0.1001				soft_error=${true}		
	BASH add tag								h2								bond0					1002
	BASH ifup intf								h1								bond0
	BASH ifup intf								h2								bond0.1002
	BASH ifconfig ip address					h1								10.251.1.11/24			bond0
	BASH start service							h1								isc-dhcp-server
    BASH ping                                   h1                              10.251.1.1              count=4	
	sleep										1
	${value} = 									BASH check service status		h1						isc-dhcp-server
	Should Contain								${value}						is started
	sleep										1
	BASH add route								h1								10.252.0.0/16			10.251.1.1
	REST add dhcp relay							Y								Y1						10.251.1.11
	#REST enable dhcp relay						Y								Y1	
	sleep										5
	${ipAddr2} = 								BASH renew dhcpv4 address		h2						bond0.1002
	Should Not Be Empty							${ipAddr2}
	${ipAddr5} = 								BASH renew dhcpv4 address		h5						bond0
	Should Not Be Empty							${ipAddr5}
	${mac1} =									BASH get intf mac				h1						bond0
	${result} = 								REST show endpoints mac			${mac1}
	Should Not Be Empty							${result}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']}	
	Should Contain								${attachpoint}					${leaf0_pc1}
	BASH add route								h2								10.251.0.0/16			10.252.1.1
	BASH add route								h5								10.251.0.0/16			10.252.1.1
	BASH ping									h1								${ipAddr2}				count=10
	BASH ping									h1								${ipAddr5}				count=10
	${mac2} =									BASH get intf mac				h2						bond0
	${result} = 								REST show endpoints mac			${mac2}
	Should Not Be Empty							${result}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']}	
	${ipAddr} = 								Set Variable					${result[0]['ip-address']}
	Should Contain								${attachpoint}					${leaf0_pc2}
	Should Contain								${ipAddr}						${ipAddr2}
	${mac5} =									BASH get intf mac				h5						bond0
	${result} = 								REST show endpoints mac			${mac5}
	Should Not Be Empty							${result}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']}
	${ipAddr} = 								Set Variable					${result[0]['ip-address']}	
	Should Contain								${attachpoint}					${leaf2_pc1}
	Should Contain								${ipAddr}						${ipAddr5}
	sleep										1
	${loss} =									BASH ping 						h1						${ipAddr2}				count=10
	Should Be True  							${loss} < 20	
	${loss} =									BASH ping 						h1						${ipAddr5}				count=10
	Should Be True  							${loss} < 20	
	REST delete portgroup from vns				Y								Y1						${leaf2_pc1}			-1
	REST add portgroup to vns					Z								Z3						${leaf2_pc1}			-1
	${ipAddr5} =								BASH renew dhcpv4 address		h5						bond0
	Should Be True								${ipAddr5}
	${result} = 								REST show endpoints mac			${mac5}
	Should Not Be Empty							${result}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']}
	${ipAddr} = 								Set Variable					${result[0]['ip-address']}	
	${segment} =								Set Variable					${result[0]['segment']}
	Should Contain								${attachpoint}					${leaf2_pc1}
	Should Contain								${ipAddr}						${ipAddr5}
	Should Contain								${segment}						Z3
	BASH add route								h5								10.251.0.0/16			10.253.3.1
	sleep										1	
	${loss} =									BASH ping 						h1						${ipAddr5}				count=10
	Should Be True								${loss} < 20
	${value} = 									BASH release dhcpv4 address		h2						bond0.1002
	Should Be True								${value}
	${value} = 									BASH release dhcpv4 address		h5						bond0
	Should Be True								${value}
	${loss} =									BASH ping 						h1						${ipAddr2}				count=10
	Should Be True								${loss}	= 100
	${loss} =									BASH ping 						h1						${ipAddr5}				count=10
	Should Be True								${loss}	= 100
	BASH delete route							h1								10.252.0.0/16			10.251.1.1
	BASH delete route							h2								10.251.0.0/16			10.252.1.1	
	BASH delete route							h5								10.251.0.0/16			10.252.1.1


Inter tenant dhcp relay with multiple dhcp servers
    BASH ifup intf                              h1                              bond0
    BASH ifup intf                              h2                              bond0
    BASH ifup intf                              h3                              bond0
    BASH ifup intf                              h4                              bond0
    BASH ifup intf                              h5                              bond0
    BASH ifup intf                              h6                              bond0               
    REST add portgroup to vns                   X                               X1                      ${leaf0_pc2}            -1
    REST add portgroup to vns                   X                               X2                      ${leaf0_pc1}            -1
    REST add portgroup to vns                   Y                               Y1                      ${leaf1_pc1}            -1
    REST add portgroup to vns                   Y                               Y2                      ${leaf1_pc2}            -1
    BASH delete tag                             h1                              bond0.1001              soft_error=${true}      
    BASH delete tag                             h2                              bond0.1002              soft_error=${true}      
    BASH delete tag                             h3                              bond0.1003              soft_error=${true}      
    BASH ifup intf                              h1                              bond0
    BASH ifup intf                              h2                              bond0
    BASH ifup intf                              h3                              bond0
    BASH ifup intf                              h4                              bond0
    BASH ifconfig ip address                    h2                              10.251.1.11/24          bond0
    BASH start service                          h2                              isc-dhcp-server
    BASH ping                                   h2                              10.251.1.1              count=4    
    sleep                                       1
    ${value} =                                  BASH check service status       h2                      isc-dhcp-server
    Should Contain                              ${value}                        is started
    sleep                                       1
    BASH ifconfig ip address                    h3                              10.252.1.11/24          bond0
    BASH start service                          h3                              isc-dhcp-server
    BASH ping                                   h3                              10.252.1.1              count=4
    sleep                                       1
    ${value} =                                  BASH check service status       h3                      isc-dhcp-server
    Should Contain                              ${value}                        is started
    sleep                                       1
    BASH add route                              h2                              10.252.0.0/16           10.251.1.1
    BASH add route                              h3                              10.251.0.0/16           10.252.1.1
    REST add dhcp relay                         X                               X2                      10.252.1.11
    #REST enable dhcp relay                      X                               X2  
    REST add dhcp relay                         Y                               Y2                      10.251.1.11
    #REST enable dhcp relay                      Y                               Y2  
    sleep                                       5
    ${mac1} =                                   BASH get intf mac               h1                      bond0
    ${result} =                                 REST show endpoints mac         ${mac1}
    Should Not Be Empty                         ${result}
    ${attachpoint} =                            Set Variable                    ${result[0]['attachment-point']}    
    Should Contain                              ${attachpoint}                  ${leaf0_pc1}
    ${mac3} =                                   BASH get intf mac               h3                      bond0
    ${result} =                                 REST show endpoints mac         ${mac3}
    Should Not Be Empty                         ${result}
    ${attachpoint} =                            Set Variable                    ${result[0]['attachment-point']}    
    Should Contain                              ${attachpoint}                  ${leaf1_pc1}
    ${ipAddr1} =                                BASH renew dhcpv4 address       h1                      bond0
    Should Not Be Empty                         ${ipAddr1}
    ${ipAddr4} =                                BASH renew dhcpv4 address       h4                      bond0
    Should Not Be Empty                         ${ipAddr4}
    ${loss} =                                   BASH ping                       h1                      ${ipAddr4}          count=5
    Should Be True                              ${loss} < 20
    ${value} =                                  BASH release dhcpv4 address     h1                      bond0
    Should Be True                              ${value}
    BASH stop service                           h3                              isc-dhcp-server
    sleep                                       1
    ${value} =                                  BASH check service status       h3                      isc-dhcp-server
    Should Contain                              ${value}                        is not running
    ${ipAddr1} =                                BASH renew dhcpv4 address       h1                      bond0
    Should Be Empty                             ${ipAddr1}
    BASH stop service                           h2                              isc-dhcp-server
    sleep                                       1
    ${value} =                                  BASH check service status       h2                      isc-dhcp-server
    Should Contain                              ${value}                        is not running
    ${value} =                                  BASH release dhcpv4 address     h4                      bond0
    Should Be True                              ${value}
    BASH delete route                           h2                              10.252.0.0/16           10.251.1.1
    BASH delete route                           h3                              10.251.0.0/16           10.252.1.1


Controller HA failover via CLI
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0		
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0			
	REST add portgroup to vns					X								X1						${leaf2_pc1}			-1
	REST add portgroup to vns					Y								Y1						${leaf1_pc2}			-1
	REST add interface to vns					X								X1						${leaf0_a}				${ixia1}				-1
	REST add interface to vns					Y								Y1						${leaf1_a}				${ixia3}				-1	
	BASH ifconfig ip address							h5								10.251.1.11/24			bond0	
	BASH ifconfig ip address							h4								10.252.1.11/24			bond0
	BASH add route								h5								10.252.0.0/16			10.251.1.1
	BASH add route								h4								10.251.0.0/16			10.252.1.1
	sleep										5	
	BASH ping									h5								10.251.1.1				count=10
	BASH ping									h4								10.252.1.1				count=10
	${value} = 									BASH verify arp					h5						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h4						10.252.1.1
	Should Be True								${value} 	
	${mac1} = 									BASH get intf mac				h5						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h4						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h5						10.252.1.11 			count=10
	Should Be True  							${loss} == 0	
	${stream1}=  								L3 add  						name=stream1		  	flow=a<->c 				frame_rate=10000  			frame_size=9216  			frame_cnt=100000
	...     									src_ip=10.251.1.101				src_gw=10.251.1.1		dst_ip=10.252.1.101		dst_gw=10.252.1.1			 			
 	start traffic  								${stream1}
    sleep  10
    stop traffic								${stream1}
    verify results 								transmitted_frames  			received_valid_frames  		${stream1}  			stream1
 	start traffic  								${stream1}
    sleep  10
 	verify traffic rate  						tx_rate  						rx_rate  				a  						c
 	${value} = 									REST verify cluster election take leader
	Should Be True								${value}
	sleep										5
	verify traffic rate  						tx_rate  						rx_rate  				a  						c
	sleep										5	
	stop traffic								${stream1}
   	verify results 								transmitted_frames  			received_valid_frames  		${stream1}  			stream1
	${loss} = 									BASH ping						h5						10.252.1.11 			count=10
	Should Be True  							${loss} == 0		
 	BASH delete route							h5								10.252.0.0/16			10.251.1.1
	BASH delete route							h4								10.251.0.0/16			10.252.1.1
	
	
Controller HA failover via reboot of master
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0		
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0			
	REST add portgroup to vns					X								X1						${leaf2_pc1}			-1
	REST add portgroup to vns					Y								Y1						${leaf1_pc2}			-1
	REST add interface to vns					X								X1						${leaf0_a}				${ixia1}				-1
	REST add interface to vns					Y								Y1						${leaf1_a}				${ixia3}				-1	
	BASH ifconfig ip address							h5								10.251.1.11/24			bond0	
	BASH ifconfig ip address							h4								10.252.1.11/24			bond0
	BASH add route								h5								10.252.0.0/16			10.251.1.1
	BASH add route								h4								10.251.0.0/16			10.252.1.1
	sleep										5	
	BASH ping									h5								10.251.1.1				count=10
	BASH ping									h4								10.252.1.1				count=10
	${value} = 									BASH verify arp					h5						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h4						10.252.1.1
	Should Be True								${value} 	
	${mac1} = 									BASH get intf mac				h5						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h4						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h5						10.252.1.11 			count=10
	Should Be True  							${loss} == 0	
	${stream1}=  								L3 add  						name=stream1		  	flow=a<->c 				frame_rate=10000  			frame_size=9216  			frame_cnt=100000
	...     									src_ip=10.251.1.101				src_gw=10.251.1.1		dst_ip=10.252.1.101		dst_gw=10.252.1.1			 			
 	start traffic  								${stream1}
    sleep  10
    stop traffic								${stream1}
    verify results 								transmitted_frames  			received_valid_frames  		${stream1}  			stream1
 	start traffic  								${stream1}
    sleep  10
 	verify traffic rate  						tx_rate  						rx_rate  				a  						c
 	${value} = 									CLI verify cluster master reboot
	Should Be True								${value}
	sleep										5
	verify traffic rate  						tx_rate  						rx_rate  				a  						c
	sleep										5	
	stop traffic								${stream1}
   	verify results 								transmitted_frames  			received_valid_frames  		${stream1}  			stream1
	${loss} = 									BASH ping						h5						10.252.1.11 			count=10
	Should Be True  							${loss} == 0		
 	BASH delete route							h5								10.252.0.0/16			10.251.1.1
	BASH delete route							h4								10.251.0.0/16			10.252.1.1
	

Spine reboot
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0		
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0			
	REST add portgroup to vns					X								X1						${leaf2_pc1}			-1
	REST add portgroup to vns					Y								Y1						${leaf1_pc2}			-1
	REST add interface to vns					X								X1						${leaf0_a}				${ixia1}				-1
	REST add interface to vns					Y								Y1						${leaf1_a}				${ixia3}				-1	
	BASH ifconfig ip address							h5								10.251.1.11/24			bond0	
	BASH ifconfig ip address							h4								10.252.1.11/24			bond0
	BASH add route								h5								10.252.0.0/16			10.251.1.1
	BASH add route								h4								10.251.0.0/16			10.252.1.1
	sleep										5	
	BASH ping									h5								10.251.1.1				count=10
	BASH ping									h4								10.252.1.1				count=10
	${value} = 									BASH verify arp					h5						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h4						10.252.1.1
	Should Be True								${value} 	
	${mac1} = 									BASH get intf mac				h5						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h4						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h5						10.252.1.11 			count=10
	Should Be True  							${loss} == 0	
	${stream1}=  								L3 add  						name=stream1		  	flow=a<->c 				frame_rate=1000  			frame_size=9216  			frame_cnt=10000
	...     									src_ip=10.251.1.101				src_gw=10.251.1.1		dst_ip=10.252.1.101		dst_gw=10.252.1.1			 			
 	start traffic  								${stream1}
    sleep  10
    stop traffic								${stream1}
    verify results 								transmitted_frames  			received_valid_frames  		${stream1}  			stream1
    start traffic								${stream1}
    sleep										5
    verify traffic rate							tx_rate  						rx_rate  				a  						c
    sleep										5
    CLI restart switch							s1
	sleep										10
	verify traffic rate							tx_rate  						rx_rate  				a  						c
	sleep										5
 	stop traffic								${stream1}
    calculate loss 								transmitted_frames  			received_valid_frames  		${stream1}  			stream1   
 	BASH delete route							h5								10.252.0.0/16			10.251.1.1
	BASH delete route							h4								10.251.0.0/16			10.252.1.1
	
Leaf reboot
    BASH ifup intf                              h1                              bond0
    BASH ifup intf                              h2                              bond0
    BASH ifup intf                              h3                              bond0
    BASH ifup intf                              h4                              bond0       
    BASH ifup intf                              h5                              bond0
    BASH ifup intf                              h6                              bond0           
    REST add portgroup to vns                   X                               X1                      ${leaf2_pc1}            -1
    REST add portgroup to vns                   Y                               Y1                      ${leaf1_pc2}            -1
    REST add interface to vns                   X                               X1                      ${leaf0_a}              ${ixia1}                -1
    REST add interface to vns                   Y                               Y1                      ${leaf1_a}              ${ixia3}                -1  
    BASH ifconfig ip address                         h5                              10.251.1.11/24          bond0   
    BASH ifconfig ip address                         h4                              10.252.1.11/24          bond0
    BASH add route                              h5                              10.252.0.0/16           10.251.1.1
    BASH add route                              h4                              10.251.0.0/16           10.252.1.1
    sleep                                       5   
    BASH ping                                   h5                              10.251.1.1              count=10
    BASH ping                                   h4                              10.252.1.1              count=10
    ${value} =                                  BASH verify arp                 h5                      10.251.1.1
    Should Be True                              ${value}        
    ${value} =                                  BASH verify arp                 h4                      10.252.1.1
    Should Be True                              ${value}    
    ${mac1} =                                   BASH get intf mac               h5                      bond0
    ${result} =                                 REST show endpoints mac         ${mac1}
    Should Be True                              ${result}                       
    ${mac2} =                                   BASH get intf mac               h4                      bond0
    ${result} =                                 REST show endpoints mac         ${mac2}
    Should Be True                              ${result}                       
    REST show endpoints 
    ${loss} =                                   BASH ping                       h5                      10.252.1.11             count=10
    Should Be True                              ${loss} == 0    
    ${stream1}=                                 L3 add                          name=stream1            flow=a<->c              frame_rate=1000             frame_size=9216             frame_cnt=10000
    ...                                         src_ip=10.251.1.101             src_gw=10.251.1.1       dst_ip=10.252.1.101     dst_gw=10.252.1.1                       
    start traffic                               ${stream1}
    sleep  10
    stop traffic                                ${stream1}
    verify results                              transmitted_frames              received_valid_frames       ${stream1}              stream1
    start traffic                               ${stream1}
    sleep                                       5
    verify traffic rate                         tx_rate                         rx_rate                 a                       c
    sleep                                       5
    CLI restart switch                          s5
    sleep                                       10
    verify traffic rate                         tx_rate                         rx_rate                 a                       c
    sleep                                       5
    stop traffic                                ${stream1}
    calculate loss                              transmitted_frames              received_valid_frames       ${stream1}              stream1   
    BASH delete route                           h5                              10.252.0.0/16           10.251.1.1
    BASH delete route                           h4                              10.251.0.0/16           10.252.1.1
    
    	
Add and delete endpoints with L3 inter tenant traffic	
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0		
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0			
	REST add portgroup to vns					X								X1						${leaf2_pc1}			-1
	REST add portgroup to vns					Y								Y1						${leaf1_pc2}			-1
	REST add interface to vns					X								X1						${leaf0_a}				${ixia1}				-1
	REST add interface to vns					Y								Y1						${leaf1_a}				${ixia3}				-1	
	BASH ifconfig ip address							h5								10.251.1.11/24			bond0	
	BASH ifconfig ip address							h4								10.252.1.11/24			bond0
	BASH add route								h5								10.252.0.0/16			10.251.1.1
	BASH add route								h4								10.251.0.0/16			10.252.1.1
	sleep										5	
	BASH ping									h5								10.251.1.1				count=10
	BASH ping									h4								10.252.1.1				count=10
	${value} = 									BASH verify arp					h5						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h4						10.252.1.1
	Should Be True								${value} 	
	${mac1} = 									BASH get intf mac				h5						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h4						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h5						10.252.1.11 			count=10
	Should Be True  							${loss} == 0	
	REST delete portgroup from vns				X								X1						${leaf2_pc1}			-1
	sleep										1
	${loss} = 									BASH ping						h5						10.252.1.11 			count=10
	Should Be True  							${loss} == 100	
	sleep										1
	REST add portgroup to vns					X								X1						${leaf2_pc1}			-1
	sleep										1
	${loss} = 									BASH ping						h5						10.252.1.11 			count=10
	Should Be True  							${loss} < 40	
#	${stream1}=  								L3 add  						name=stream1		  	flow=a<->c 				frame_rate=1000  			frame_size=9216  			frame_cnt=10000
#	...     									src_ip=10.251.1.101				src_gw=10.251.1.1		dst_ip=10.252.1.101		dst_gw=10.252.1.1			 			
#   start traffic  								${stream1}
#   sleep  10
#   stop traffic								${stream1}
#   verify results 								transmitted_frames  			received_valid_frames  		${stream1}  			stream1
 	BASH delete route							h5								10.252.0.0/16			10.251.1.1
	BASH delete route							h4								10.251.0.0/16			10.252.1.1
	
Restart ofad on leaf switch
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0		
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0			
	REST add portgroup to vns					X								X1						${leaf2_pc1}			-1
	REST add portgroup to vns					Y								Y1						${leaf1_pc2}			-1
	REST add interface to vns					X								X1						${leaf0_a}				${ixia1}				-1
	REST add interface to vns					Y								Y1						${leaf1_a}				${ixia3}				-1	
	BASH ifconfig ip address							h5								10.251.1.11/24			bond0	
	BASH ifconfig ip address							h4								10.252.1.11/24			bond0
	BASH add route								h5								10.252.0.0/16			10.251.1.1
	BASH add route								h4								10.251.0.0/16			10.252.1.1
	sleep										5	
	BASH ping									h5								10.251.1.1				count=10
	BASH ping									h4								10.252.1.1				count=10
	${value} = 									BASH verify arp					h5						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h4						10.252.1.1
	Should Be True								${value} 	
	${mac1} = 									BASH get intf mac				h5						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h4						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h5						10.252.1.11 			count=10
	Should Be True  							${loss} == 0	
	${stream1}=  								L3 add  						name=stream1		  	flow=a<->c 				frame_rate=10000  			frame_size=9216  			frame_cnt=1000000
	...     									src_ip=10.251.1.101				src_gw=10.251.1.1		dst_ip=10.252.1.101		dst_gw=10.252.1.1			 			
	start traffic  								${stream1}
	sleep  10
	stop traffic								${stream1}
	verify results 								transmitted_frames  			received_valid_frames  		${stream1}  			stream1
    start traffic  								${stream1}
    sleep  										5
   	verify traffic rate  						tx_rate  						rx_rate  				a  						c
	BASH restart process						s3								ofad					timeout=60
	sleep										5
	${value} = 									BASH check service status		s3						ofad
	Should Contain								${value}						is started
	sleep										10
	verify traffic rate  						tx_rate  						rx_rate  				a  						c
	sleep										10
	stop traffic								${stream1}
	calculate loss								transmitted_frames  			received_valid_frames  		${stream1}  			stream1
 	BASH delete route							h5								10.252.0.0/16			10.251.1.1
	BASH delete route							h4								10.251.0.0/16			10.252.1.1
	
Restart ofad on spine switch
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0		
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0			
	REST add portgroup to vns					X								X1						${leaf2_pc1}			-1
	REST add portgroup to vns					Y								Y1						${leaf1_pc2}			-1
	REST add interface to vns					X								X1						${leaf0_a}				${ixia1}				-1
	REST add interface to vns					Y								Y1						${leaf1_a}				${ixia3}				-1	
	BASH ifconfig ip address							h5								10.251.1.11/24			bond0	
	BASH ifconfig ip address							h4								10.252.1.11/24			bond0
	BASH add route								h5								10.252.0.0/16			10.251.1.1
	BASH add route								h4								10.251.0.0/16			10.252.1.1
	sleep										5	
	BASH ping									h5								10.251.1.1				count=10
	BASH ping									h4								10.252.1.1				count=10
	${value} = 									BASH verify arp					h5						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h4						10.252.1.1
	Should Be True								${value} 	
	${mac1} = 									BASH get intf mac				h5						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h4						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h5						10.252.1.11 			count=10
	Should Be True  							${loss} == 0	
	${stream1}=  								L3 add  						name=stream1		  	flow=a<->c 				frame_rate=10000  			frame_size=9216  			frame_cnt=1000000
	...     									src_ip=10.251.1.101				src_gw=10.251.1.1		dst_ip=10.252.1.101		dst_gw=10.252.1.1			 			
	start traffic  								${stream1}
	sleep  10
	stop traffic								${stream1}
	verify results 								transmitted_frames  			received_valid_frames  		${stream1}  			stream1
    start traffic  								${stream1}
    sleep  										5
   	verify traffic rate  						tx_rate  						rx_rate  				a  						c
	BASH restart process						s2								ofad					timeout=60
	sleep										5
	${value} = 									BASH check service status		s2						ofad
	Should Contain								${value}						is started
	sleep										10
	verify traffic rate  						tx_rate  						rx_rate  				a  						c
	sleep										10
	stop traffic								${stream1}
	calculate loss								transmitted_frames  			received_valid_frames  		${stream1}  			stream1
 	BASH delete route							h5								10.252.0.0/16			10.251.1.1
	BASH delete route							h4								10.251.0.0/16			10.252.1.1
	

Controller HA failover with dhcp-relay
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0				
	REST add portgroup to vns					X								X1						${leaf0_pc1}			-1
	REST add portgroup to vns					Y								Y1						${leaf0_pc2}			1002
	REST add portgroup to vns					Y								Y1						${leaf2_pc1}			-1
	BASH delete tag								h1								bond0.1001				soft_error=${true}		
	BASH add tag								h2								bond0					1002
	BASH ifup intf								h1								bond0
	BASH ifup intf								h2								bond0.1002
	BASH ifconfig ip address					h1								10.251.1.11/24			bond0
	BASH start service							h1								isc-dhcp-server
    BASH ping                                   h1                              10.251.1.1              count=4
	sleep										1
	${value} = 									BASH check service status		h1						isc-dhcp-server
	Should Contain								${value}						is started
	sleep										1
	BASH add route								h1								10.252.0.0/16			10.251.1.1
	REST add dhcp relay							Y								Y1						10.251.1.11
	#REST enable dhcp relay						Y								Y1	
	sleep										5
	${ipAddr2} = 								BASH renew dhcpv4 address		h2						bond0.1002
	Should Not Be Empty							${ipAddr2}
	${ipAddr5} = 								BASH renew dhcpv4 address		h5						bond0
	Should Not Be Empty							${ipAddr5}
	${mac1} =									BASH get intf mac				h1						bond0
	${result} = 								REST show endpoints mac			${mac1}
	Should Not Be Empty							${result}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']}	
	Should Contain								${attachpoint}					${leaf0_pc1}
	BASH add route								h2								10.251.0.0/16			10.252.1.1
	BASH add route								h5								10.251.0.0/16			10.252.1.1
	BASH ping									h1								${ipAddr2}				count=10
	BASH ping									h1								${ipAddr5}				count=10
	${mac2} =									BASH get intf mac				h2						bond0
	${result} = 								REST show endpoints mac			${mac2}
	Should Not Be Empty							${result}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']}	
	${ipAddr} = 								Set Variable					${result[0]['ip-address']}
	Should Contain								${attachpoint}					${leaf0_pc2}
	Should Contain								${ipAddr}						${ipAddr2}
	${mac5} =									BASH get intf mac				h5						bond0
	${result} = 								REST show endpoints mac			${mac5}
	Should Not Be Empty							${result}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']}
	${ipAddr} = 								Set Variable					${result[0]['ip-address']}	
	Should Contain								${attachpoint}					${leaf2_pc1}
	Should Contain								${ipAddr}						${ipAddr5}
	sleep										1
	${loss} =									BASH ping 						h1						${ipAddr2}				count=10
	Should Be True  							${loss} < 20	
	${loss} =									BASH ping 						h1						${ipAddr5}				count=10
	Should Be True  							${loss} < 20	
	${value} = 									BASH release dhcpv4 address		h2						bond0.1002
	Should Be True								${value}
	${value} = 									BASH release dhcpv4 address		h5						bond0
	Should Be True								${value}
	${value} = 									REST verify cluster election take leader
	Should Be True								${value}
	sleep										5
	${ipAddr2} = 								BASH renew dhcpv4 address		h2						bond0.1002
	Should Not Be Empty							${ipAddr2}
	${ipAddr5} = 								BASH renew dhcpv4 address		h5						bond0
	Should Not Be Empty							${ipAddr5}	
	BASH add route								h2								10.251.0.0/16			10.252.1.1
	BASH add route								h5								10.251.0.0/16			10.252.1.1
	${result} = 								REST show endpoints mac			${mac2}
	Should Not Be Empty							${result}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']}	
	${ipAddr} = 								Set Variable					${result[0]['ip-address']}
	Should Contain								${attachpoint}					${leaf0_pc2}
	Should Contain								${ipAddr}						${ipAddr2}
	${mac5} =									BASH get intf mac				h5						bond0
	${result} = 								REST show endpoints mac			${mac5}
	Should Not Be Empty							${result}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']}
	${ipAddr} = 								Set Variable					${result[0]['ip-address']}	
	Should Contain								${attachpoint}					${leaf2_pc1}
	Should Contain								${ipAddr}						${ipAddr5}
	sleep										1
	${loss} =									BASH ping 						h1						${ipAddr2}				count=10
	Should Be True  							${loss} < 20	
	${loss} =									BASH ping 						h1						${ipAddr5}				count=10
	Should Be True  							${loss} < 20		
	BASH delete route							h1								10.252.0.0/16			10.251.1.1
	BASH delete route							h2								10.251.0.0/16			10.252.1.1	
	BASH delete route							h5								10.251.0.0/16			10.252.1.1
	
Active Controller reboot with dhcp-relay
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0				
	REST add portgroup to vns					X								X1						${leaf0_pc1}			-1
	REST add portgroup to vns					Y								Y1						${leaf0_pc2}			1002
	REST add portgroup to vns					Y								Y1						${leaf2_pc1}			-1
	BASH delete tag								h1								bond0.1001				soft_error=${true}		
	BASH add tag								h2								bond0					1002
	BASH ifup intf								h1								bond0
	BASH ifup intf								h2								bond0.1002
	BASH ifconfig ip address					h1								10.251.1.11/24			bond0
	BASH start service							h1								isc-dhcp-server
    BASH ping                                   h1                              10.251.1.1              count=4
	sleep										1
	${value} = 									BASH check service status		h1						isc-dhcp-server
	Should Contain								${value}						is started
	sleep										1
	BASH add route								h1								10.252.0.0/16			10.251.1.1
	REST add dhcp relay							Y								Y1						10.251.1.11
	#REST enable dhcp relay						Y								Y1	
	sleep										5
	${ipAddr2} = 								BASH renew dhcpv4 address		h2						bond0.1002
	Should Not Be Empty							${ipAddr2}
	${ipAddr5} = 								BASH renew dhcpv4 address		h5						bond0
	Should Not Be Empty							${ipAddr5}
	${mac1} =									BASH get intf mac				h1						bond0
	${result} = 								REST show endpoints mac			${mac1}
	Should Not Be Empty							${result}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']}	
	Should Contain								${attachpoint}					${leaf0_pc1}
	BASH add route								h2								10.251.0.0/16			10.252.1.1
	BASH add route								h5								10.251.0.0/16			10.252.1.1
	BASH ping									h1								${ipAddr2}				count=10
	BASH ping									h1								${ipAddr5}				count=10
	${mac2} =									BASH get intf mac				h2						bond0
	${result} = 								REST show endpoints mac			${mac2}
	Should Not Be Empty							${result}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']}	
	${ipAddr} = 								Set Variable					${result[0]['ip-address']}
	Should Contain								${attachpoint}					${leaf0_pc2}
	Should Contain								${ipAddr}						${ipAddr2}
	${mac5} =									BASH get intf mac				h5						bond0
	${result} = 								REST show endpoints mac			${mac5}
	Should Not Be Empty							${result}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']}
	${ipAddr} = 								Set Variable					${result[0]['ip-address']}	
	Should Contain								${attachpoint}					${leaf2_pc1}
	Should Contain								${ipAddr}						${ipAddr5}
	sleep										1
	${loss} =									BASH ping 						h1						${ipAddr2}				count=10
	Should Be True  							${loss} < 20	
	${loss} =									BASH ping 						h1						${ipAddr5}				count=10
	Should Be True  							${loss} < 20	
	${value} = 									BASH release dhcpv4 address		h2						bond0.1002
	Should Be True								${value}
	${value} = 									BASH release dhcpv4 address		h5						bond0
	Should Be True								${value}
 	${value} = 									CLI verify cluster master reboot
	Should Be True								${value}
	sleep										5
	${ipAddr2} = 								BASH renew dhcpv4 address		h2						bond0.1002
	Should Not Be Empty							${ipAddr2}
	${ipAddr5} = 								BASH renew dhcpv4 address		h5						bond0
	Should Not Be Empty							${ipAddr5}	
	BASH add route								h2								10.251.0.0/16			10.252.1.1
	BASH add route								h5								10.251.0.0/16			10.252.1.1
	${result} = 								REST show endpoints mac			${mac2}
	Should Not Be Empty							${result}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']}	
	${ipAddr} = 								Set Variable					${result[0]['ip-address']}
	Should Contain								${attachpoint}					${leaf0_pc2}
	Should Contain								${ipAddr}						${ipAddr2}
	${mac5} =									BASH get intf mac				h5						bond0
	${result} = 								REST show endpoints mac			${mac5}
	Should Not Be Empty							${result}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']}
	${ipAddr} = 								Set Variable					${result[0]['ip-address']}	
	Should Contain								${attachpoint}					${leaf2_pc1}
	Should Contain								${ipAddr}						${ipAddr5}
	sleep										1
	${loss} =									BASH ping 						h1						${ipAddr2}				count=10
	Should Be True  							${loss} < 20	
	${loss} =									BASH ping 						h1						${ipAddr5}				count=10
	Should Be True  							${loss} < 20		
	BASH delete route							h1								10.252.0.0/16			10.251.1.1
	BASH delete route							h2								10.251.0.0/16			10.252.1.1	
	BASH delete route							h5								10.251.0.0/16			10.252.1.1	


Dhcp request from overlapping private IP and public IP
    BASH ifup intf                              h1                              bond0
    BASH ifup intf                              h2                              bond0
    BASH ifup intf                              h3                              bond0
    BASH ifup intf                              h4                              bond0
    BASH ifup intf                              h5                              bond0
    BASH ifup intf                              h6                              bond0
    BASH init intf                              h5                              bond0
    BASH init intf                              h6                              bond0
    BASH init intf                              h2                              bond0
    REST add portgroup to vns                   X                               X1                      ${leaf0_pc1}            -1
    REST add portgroup to vns                   Y                               Y1                      ${leaf0_pc2}            1002
    REST add portgroup to vns                   Y                               Y3                      ${leaf2_pc1}            -1
    REST add portgroup to vns                   X                               X3                      ${leaf2_pc2}            -1
    BASH delete tag                             h1                              bond0.1001              soft_error=${true}      
    BASH add tag                                h2                              bond0                   1002
    BASH ifup intf                              h1                              bond0
    BASH ifup intf                              h2                              bond0.1002
    BASH init intf                              h2                              bond0.1002
    BASH ifconfig ip address                    h1                              10.251.1.11/24          bond0
    BASH start service                          h1                              isc-dhcp-server
    BASH ping                                   h1                              10.251.1.1              count=4
    sleep                                       1
    ${value} =                                  BASH check service status       h1                      isc-dhcp-server
    Should Contain                              ${value}                        is started
    sleep                                       1
    BASH add route                              h1                              10.252.0.0/16           10.251.1.1
    REST add vns ip                             X                               X3                      10.251.3.1              24          private=true
    REST add vns ip                             Y                               Y3                      10.251.3.1              24  
    REST add dhcp relay                         Y                               Y3                      10.251.1.11
    #REST enable dhcp relay                      Y                               Y3
    REST add dhcp relay                         X                               X3                      10.251.1.11
    #REST enable dhcp relay                      X                               X3
    sleep                                       5
    ${ipAddr2} =                                BASH renew dhcpv4 address       h2                      bond0.1002
    Should Not Be Empty                         ${ipAddr2}
    ${ipAddr6} =                                BASH renew dhcpv4 address       h6                      bond0
    Should Not Be Empty                         ${ipAddr6}
    ${ipAddr5} =                                BASH renew dhcpv4 address       h5                      bond0
    Should Be Empty                             ${ipAddr5}
    ${mac1} =                                   BASH get intf mac               h1                      bond0
    ${result} =                                 REST show endpoints mac         ${mac1}
    Should Not Be Empty                         ${result}
    ${attachpoint} =                            Set Variable                    ${result[0]['attachment-point']}    
    Should Contain                              ${attachpoint}                  ${leaf0_pc1}
    BASH add route                              h2                              10.251.0.0/16           10.252.1.1
    BASH add route                              h6                              10.251.0.0/16           10.251.1.1
    BASH ping                                   h1                              ${ipAddr2}              count=10
    BASH ping                                   h1                              ${ipAddr6}              count=10
    ${mac2} =                                   BASH get intf mac               h2                      bond0
    ${result} =                                 REST show endpoints mac         ${mac2}
    Should Not Be Empty                         ${result}
    ${attachpoint} =                            Set Variable                    ${result[0]['attachment-point']}    
    ${ipAddr} =                                 Set Variable                    ${result[0]['ip-address']}
    Should Contain                              ${attachpoint}                  ${leaf0_pc2}
    Should Contain                              ${ipAddr}                       ${ipAddr2}
    ${mac6} =                                   BASH get intf mac               h6                      bond0
    ${result} =                                 REST show endpoints mac         ${mac6}
    Should Not Be Empty                         ${result}
    ${attachpoint} =                            Set Variable                    ${result[0]['attachment-point']}    
    ${ipAddr} =                                 Set Variable                    ${result[0]['ip-address']}
    Should Contain                              ${attachpoint}                  ${leaf2_pc2}
    Should Contain                              ${ipAddr}                       ${ipAddr6}
    ${mac5} =                                   BASH get intf mac               h5                      bond0
    ${result} =                                 REST show endpoints mac         ${mac5}
    Should Not Be Empty                         ${result}
    ${attachpoint} =                            Set Variable                    ${result[0]['attachment-point']}
    ${state} =                                  Set Variable                    ${result[0]['state']}  
    Should Contain                              ${attachpoint}                  ${leaf2_pc1}
    Should Contain                              ${state}                        L2 Only
    BASH delete route                           h1                              10.252.0.0/16           10.251.1.1
    BASH delete route                           h2                              10.251.0.0/16           10.252.1.1  
    BASH delete route                           h6                              10.251.0.0/16           10.251.1.1


Restart ofad on leaf with dhcp-relay
    BASH ifup intf                              h1                              bond0
    BASH ifup intf                              h2                              bond0
    BASH ifup intf                              h3                              bond0
    BASH ifup intf                              h4                              bond0
    BASH ifup intf                              h5                              bond0
    BASH ifup intf                              h6                              bond0               
    REST add portgroup to vns                   X                               X1                      ${leaf0_pc1}            -1
    REST add portgroup to vns                   Y                               Y1                      ${leaf0_pc2}            1002
    REST add portgroup to vns                   Y                               Y1                      ${leaf2_pc1}            -1
    BASH delete tag                             h1                              bond0.1001              soft_error=${true}      
    BASH add tag                                h2                              bond0                   1002
    BASH ifup intf                              h1                              bond0
    BASH ifup intf                              h2                              bond0.1002
    BASH ifconfig ip address                    h1                              10.251.1.11/24          bond0
    BASH start service                          h1                              isc-dhcp-server
    BASH ping                                   h1                              10.251.1.1              count=4    
    sleep                                       1
    ${value} =                                  BASH check service status       h1                      isc-dhcp-server
    Should Contain                              ${value}                        is started
    sleep                                       1
    BASH add route                              h1                              10.252.0.0/16           10.251.1.1
    REST add dhcp relay                         Y                               Y1                      10.251.1.11
    #REST enable dhcp relay                      Y                               Y1  
    sleep                                       5
    ${ipAddr2} =                                BASH renew dhcpv4 address       h2                      bond0.1002
    Should Not Be Empty                         ${ipAddr2}
    ${ipAddr5} =                                BASH renew dhcpv4 address       h5                      bond0
    Should Not Be Empty                         ${ipAddr5}
    ${mac1} =                                   BASH get intf mac               h1                      bond0
    ${result} =                                 REST show endpoints mac         ${mac1}
    Should Not Be Empty                         ${result}
    ${attachpoint} =                            Set Variable                    ${result[0]['attachment-point']}    
    Should Contain                              ${attachpoint}                  ${leaf0_pc1}
    BASH add route                              h2                              10.251.0.0/16           10.252.1.1
    BASH add route                              h5                              10.251.0.0/16           10.252.1.1
    BASH ping                                   h1                              ${ipAddr2}              count=10
    BASH ping                                   h1                              ${ipAddr5}              count=10
    ${mac2} =                                   BASH get intf mac               h2                      bond0
    ${result} =                                 REST show endpoints mac         ${mac2}
    Should Not Be Empty                         ${result}
    ${attachpoint} =                            Set Variable                    ${result[0]['attachment-point']}    
    ${ipAddr} =                                 Set Variable                    ${result[0]['ip-address']}
    Should Contain                              ${attachpoint}                  ${leaf0_pc2}
    Should Contain                              ${ipAddr}                       ${ipAddr2}
    ${mac5} =                                   BASH get intf mac               h5                      bond0
    ${result} =                                 REST show endpoints mac         ${mac5}
    Should Not Be Empty                         ${result}
    ${attachpoint} =                            Set Variable                    ${result[0]['attachment-point']}
    ${ipAddr} =                                 Set Variable                    ${result[0]['ip-address']}  
    Should Contain                              ${attachpoint}                  ${leaf2_pc1}
    Should Contain                              ${ipAddr}                       ${ipAddr5}
    sleep                                       1
    ${loss} =                                   BASH ping                       h1                      ${ipAddr2}              count=10
    Should Be True                              ${loss} < 20    
    ${loss} =                                   BASH ping                       h1                      ${ipAddr5}              count=10
    Should Be True                              ${loss} < 20    
    ${value} =                                  BASH release dhcpv4 address     h2                      bond0.1002
    Should Be True                              ${value}
    ${value} =                                  BASH release dhcpv4 address     h5                      bond0
    Should Be True                              ${value}
    BASH restart process                        s3                              ofad                    timeout=60
    sleep                                       5
    ${value} =                                  BASH check service status       s1                      ofad
    Should Contain                              ${value}                        is started
    sleep                                       10
    BASH restart process                        s4                              ofad                    timeout=60
    sleep                                       5
    ${value} =                                  BASH check service status       s1                      ofad
    Should Contain                              ${value}                        is started
    sleep                                       10
    ${ipAddr2} =                                BASH renew dhcpv4 address       h2                      bond0.1002
    Should Not Be Empty                         ${ipAddr2}
    ${ipAddr5} =                                BASH renew dhcpv4 address       h5                      bond0
    Should Not Be Empty                         ${ipAddr5}  
    BASH add route                              h2                              10.251.0.0/16           10.252.1.1
    BASH add route                              h5                              10.251.0.0/16           10.252.1.1
    ${result} =                                 REST show endpoints mac         ${mac2}
    Should Not Be Empty                         ${result}
    ${attachpoint} =                            Set Variable                    ${result[0]['attachment-point']}    
    ${ipAddr} =                                 Set Variable                    ${result[0]['ip-address']}
    Should Contain                              ${attachpoint}                  ${leaf0_pc2}
    Should Contain                              ${ipAddr}                       ${ipAddr2}
    ${mac5} =                                   BASH get intf mac               h5                      bond0
    ${result} =                                 REST show endpoints mac         ${mac5}
    Should Not Be Empty                         ${result}
    ${attachpoint} =                            Set Variable                    ${result[0]['attachment-point']}
    ${ipAddr} =                                 Set Variable                    ${result[0]['ip-address']}  
    Should Contain                              ${attachpoint}                  ${leaf2_pc1}
    Should Contain                              ${ipAddr}                       ${ipAddr5}
    sleep                                       1
    ${loss} =                                   BASH ping                       h1                      ${ipAddr2}              count=10
    Should Be True                              ${loss} < 20    
    ${loss} =                                   BASH ping                       h1                      ${ipAddr5}              count=10
    Should Be True                              ${loss} < 20        
    BASH delete route                           h1                              10.252.0.0/16           10.251.1.1
    BASH delete route                           h2                              10.251.0.0/16           10.252.1.1  
    BASH delete route                           h5                              10.251.0.0/16           10.252.1.1
    
Restart ofad on spine with dhcp-relay
    BASH ifup intf                              h1                              bond0
    BASH ifup intf                              h2                              bond0
    BASH ifup intf                              h3                              bond0
    BASH ifup intf                              h4                              bond0
    BASH ifup intf                              h5                              bond0
    BASH ifup intf                              h6                              bond0               
    REST add portgroup to vns                   X                               X1                      ${leaf0_pc1}            -1
    REST add portgroup to vns                   Y                               Y1                      ${leaf0_pc2}            1002
    REST add portgroup to vns                   Y                               Y1                      ${leaf2_pc1}            -1
    BASH delete tag                             h1                              bond0.1001              soft_error=${true}      
    BASH add tag                                h2                              bond0                   1002
    BASH ifup intf                              h1                              bond0
    BASH ifup intf                              h2                              bond0.1002
    BASH ifconfig ip address                    h1                              10.251.1.11/24          bond0
    BASH start service                          h1                              isc-dhcp-server
    BASH ping                                   h1                              10.251.1.1              count=4
    sleep                                       1
    ${value} =                                  BASH check service status       h1                      isc-dhcp-server
    Should Contain                              ${value}                        is started
    sleep                                       1
    BASH add route                              h1                              10.252.0.0/16           10.251.1.1
    REST add dhcp relay                         Y                               Y1                      10.251.1.11
    #REST enable dhcp relay                      Y                               Y1  
    sleep                                       5
    ${ipAddr2} =                                BASH renew dhcpv4 address       h2                      bond0.1002
    Should Not Be Empty                         ${ipAddr2}
    ${ipAddr5} =                                BASH renew dhcpv4 address       h5                      bond0
    Should Not Be Empty                         ${ipAddr5}
    ${mac1} =                                   BASH get intf mac               h1                      bond0
    ${result} =                                 REST show endpoints mac         ${mac1}
    Should Not Be Empty                         ${result}
    ${attachpoint} =                            Set Variable                    ${result[0]['attachment-point']}    
    Should Contain                              ${attachpoint}                  ${leaf0_pc1}
    BASH add route                              h2                              10.251.0.0/16           10.252.1.1
    BASH add route                              h5                              10.251.0.0/16           10.252.1.1
    BASH ping                                   h1                              ${ipAddr2}              count=10
    BASH ping                                   h1                              ${ipAddr5}              count=10
    ${mac2} =                                   BASH get intf mac               h2                      bond0
    ${result} =                                 REST show endpoints mac         ${mac2}
    Should Not Be Empty                         ${result}
    ${attachpoint} =                            Set Variable                    ${result[0]['attachment-point']}    
    ${ipAddr} =                                 Set Variable                    ${result[0]['ip-address']}
    Should Contain                              ${attachpoint}                  ${leaf0_pc2}
    Should Contain                              ${ipAddr}                       ${ipAddr2}
    ${mac5} =                                   BASH get intf mac               h5                      bond0
    ${result} =                                 REST show endpoints mac         ${mac5}
    Should Not Be Empty                         ${result}
    ${attachpoint} =                            Set Variable                    ${result[0]['attachment-point']}
    ${ipAddr} =                                 Set Variable                    ${result[0]['ip-address']}  
    Should Contain                              ${attachpoint}                  ${leaf2_pc1}
    Should Contain                              ${ipAddr}                       ${ipAddr5}
    sleep                                       1
    ${loss} =                                   BASH ping                       h1                      ${ipAddr2}              count=10
    Should Be True                              ${loss} < 20    
    ${loss} =                                   BASH ping                       h1                      ${ipAddr5}              count=10
    Should Be True                              ${loss} < 20    
    ${value} =                                  BASH release dhcpv4 address     h2                      bond0.1002
    Should Be True                              ${value}
    ${value} =                                  BASH release dhcpv4 address     h5                      bond0
    Should Be True                              ${value}
    BASH restart process                        s1                              ofad                    timeout=60
    sleep                                       5
    ${value} =                                  BASH check service status       s1                      ofad
    Should Contain                              ${value}                        is started
    sleep                                       10
    BASH restart process                        s2                              ofad                    timeout=60
    sleep                                       5
    ${value} =                                  BASH check service status       s1                      ofad
    Should Contain                              ${value}                        is started
    sleep                                       10
    ${ipAddr2} =                                BASH renew dhcpv4 address       h2                      bond0.1002
    Should Not Be Empty                         ${ipAddr2}
    ${ipAddr5} =                                BASH renew dhcpv4 address       h5                      bond0
    Should Not Be Empty                         ${ipAddr5}  
    BASH add route                              h2                              10.251.0.0/16           10.252.1.1
    BASH add route                              h5                              10.251.0.0/16           10.252.1.1
    ${result} =                                 REST show endpoints mac         ${mac2}
    Should Not Be Empty                         ${result}
    ${attachpoint} =                            Set Variable                    ${result[0]['attachment-point']}    
    ${ipAddr} =                                 Set Variable                    ${result[0]['ip-address']}
    Should Contain                              ${attachpoint}                  ${leaf0_pc2}
    Should Contain                              ${ipAddr}                       ${ipAddr2}
    ${mac5} =                                   BASH get intf mac               h5                      bond0
    ${result} =                                 REST show endpoints mac         ${mac5}
    Should Not Be Empty                         ${result}
    ${attachpoint} =                            Set Variable                    ${result[0]['attachment-point']}
    ${ipAddr} =                                 Set Variable                    ${result[0]['ip-address']}  
    Should Contain                              ${attachpoint}                  ${leaf2_pc1}
    Should Contain                              ${ipAddr}                       ${ipAddr5}
    sleep                                       1
    ${loss} =                                   BASH ping                       h1                      ${ipAddr2}              count=10
    Should Be True                              ${loss} < 20    
    ${loss} =                                   BASH ping                       h1                      ${ipAddr5}              count=10
    Should Be True                              ${loss} < 20        
    BASH delete route                           h1                              10.252.0.0/16           10.251.1.1
    BASH delete route                           h2                              10.251.0.0/16           10.252.1.1  
    BASH delete route                           h5                              10.251.0.0/16           10.252.1.1
    
L3 inter tenant shutdown and bringup both leaf switch in a dual tor setup
    BASH ifup intf                              h1                              bond0
    BASH ifup intf                              h2                              bond0
    BASH ifup intf                              h3                              bond0
    BASH ifup intf                              h4                              bond0       
    BASH ifup intf                              h5                              bond0
    BASH ifup intf                              h6                              bond0           
    REST add portgroup to vns                   X                               X1                      ${leaf2_pc1}            -1
    REST add portgroup to vns                   Y                               Y1                      ${leaf1_pc2}            -1
    REST add interface to vns                   X                               X1                      ${leaf0_a}              ${ixia1}                -1
    REST add interface to vns                   Y                               Y1                      ${leaf1_a}              ${ixia3}                -1  
    BASH ifconfig ip address                         h5                              10.251.1.11/24          bond0   
    BASH ifconfig ip address                         h4                              10.252.1.11/24          bond0
    BASH add route                              h5                              10.252.0.0/16           10.251.1.1
    BASH add route                              h4                              10.251.0.0/16           10.252.1.1
    sleep                                       5   
    BASH ping                                   h5                              10.251.1.1              count=10
    BASH ping                                   h4                              10.252.1.1              count=10
    ${value} =                                  BASH verify arp                 h5                      10.251.1.1
    Should Be True                              ${value}        
    ${value} =                                  BASH verify arp                 h4                      10.252.1.1
    Should Be True                              ${value}    
    ${mac1} =                                   BASH get intf mac               h5                      bond0
    ${result} =                                 REST show endpoints mac         ${mac1}
    Should Be True                              ${result}                       
    ${mac2} =                                   BASH get intf mac               h4                      bond0
    ${result} =                                 REST show endpoints mac         ${mac2}
    Should Be True                              ${result}                       
    REST show endpoints 
    ${loss} =                                   BASH ping                       h5                      10.252.1.11             count=10
    Should Be True                              ${loss} == 0    
    REST add shutdown fabric switch             s3
    sleep                                       1
    ${loss} =                                   BASH ping                       h5                      10.252.1.11             count=10
    Should Be True                              ${loss} < 20    
    REST delete shutdown fabric switch          s3
    sleep                                       1
    ${loss} =                                   BASH ping                       h5                      10.252.1.11             count=10
    Should Be True                              ${loss} < 20    
    sleep                                       1
    REST add shutdown fabric switch             s4
    sleep                                       1
    ${loss} =                                   BASH ping                       h5                      10.252.1.11             count=10
    Should Be True                              ${loss} < 20    
    REST delete shutdown fabric switch          s4
    sleep                                       1
    ${loss} =                                   BASH ping                       h5                      10.252.1.11             count=10
    Should Be True                              ${loss} < 20    
    BASH delete route                           h5                              10.252.0.0/16           10.251.1.1
    BASH delete route                           h4                              10.251.0.0/16           10.252.1.1

L3 inter tenant shutdown and bringup both spine switch
    BASH ifup intf                              h1                              bond0
    BASH ifup intf                              h2                              bond0
    BASH ifup intf                              h3                              bond0
    BASH ifup intf                              h4                              bond0       
    BASH ifup intf                              h5                              bond0
    BASH ifup intf                              h6                              bond0           
    REST add portgroup to vns                   X                               X1                      ${leaf2_pc1}            -1
    REST add portgroup to vns                   Y                               Y1                      ${leaf1_pc2}            -1
    REST add interface to vns                   X                               X1                      ${leaf0_a}              ${ixia1}                -1
    REST add interface to vns                   Y                               Y1                      ${leaf1_a}              ${ixia3}                -1  
    BASH ifconfig ip address                         h5                              10.251.1.11/24          bond0   
    BASH ifconfig ip address                         h4                              10.252.1.11/24          bond0
    BASH add route                              h5                              10.252.0.0/16           10.251.1.1
    BASH add route                              h4                              10.251.0.0/16           10.252.1.1
    sleep                                       5   
    BASH ping                                   h5                              10.251.1.1              count=10
    BASH ping                                   h4                              10.252.1.1              count=10
    ${value} =                                  BASH verify arp                 h5                      10.251.1.1
    Should Be True                              ${value}        
    ${value} =                                  BASH verify arp                 h4                      10.252.1.1
    Should Be True                              ${value}    
    ${mac1} =                                   BASH get intf mac               h5                      bond0
    ${result} =                                 REST show endpoints mac         ${mac1}
    Should Be True                              ${result}                       
    ${mac2} =                                   BASH get intf mac               h4                      bond0
    ${result} =                                 REST show endpoints mac         ${mac2}
    Should Be True                              ${result}                       
    REST show endpoints 
    ${loss} =                                   BASH ping                       h5                      10.252.1.11             count=10
    Should Be True                              ${loss} == 0    
    REST add shutdown fabric switch             s1
    sleep                                       1
    ${loss} =                                   BASH ping                       h5                      10.252.1.11             count=10
    Should Be True                              ${loss} < 20    
    REST delete shutdown fabric switch          s1
    sleep                                       1
    ${loss} =                                   BASH ping                       h5                      10.252.1.11             count=10
    Should Be True                              ${loss} < 20    
    sleep                                       1
    REST add shutdown fabric switch             s2
    sleep                                       1
    ${loss} =                                   BASH ping                       h5                      10.252.1.11             count=10
    Should Be True                              ${loss} < 20    
    REST delete shutdown fabric switch          s2
    sleep                                       1
    ${loss} =                                   BASH ping                       h5                      10.252.1.11             count=10
    Should Be True                              ${loss} < 20    
    BASH delete route                           h5                              10.252.0.0/16           10.251.1.1
    BASH delete route                           h4                              10.251.0.0/16           10.252.1.1

Link flap between leaf and spine
    BASH ifup intf                              h1                              bond0
    BASH ifup intf                              h2                              bond0
    BASH ifup intf                              h3                              bond0
    BASH ifup intf                              h4                              bond0       
    BASH ifup intf                              h5                              bond0
    BASH ifup intf                              h6                              bond0           
    REST add portgroup to vns                   X                               X1                      ${leaf2_pc1}            -1
    REST add portgroup to vns                   Y                               Y1                      ${leaf1_pc2}            -1
    REST add interface to vns                   X                               X1                      ${leaf0_a}              ${ixia1}                -1
    REST add interface to vns                   Y                               Y1                      ${leaf1_a}              ${ixia3}                -1  
    BASH ifconfig ip address                         h5                              10.251.1.11/24          bond0   
    BASH ifconfig ip address                         h4                              10.252.1.11/24          bond0
    BASH add route                              h5                              10.252.0.0/16           10.251.1.1
    BASH add route                              h4                              10.251.0.0/16           10.252.1.1
    sleep                                       5   
    BASH ping                                   h5                              10.251.1.1              count=10
    BASH ping                                   h4                              10.252.1.1              count=10
    ${value} =                                  BASH verify arp                 h5                      10.251.1.1
    Should Be True                              ${value}        
    ${value} =                                  BASH verify arp                 h4                      10.252.1.1
    Should Be True                              ${value}    
    ${mac1} =                                   BASH get intf mac               h5                      bond0
    ${result} =                                 REST show endpoints mac         ${mac1}
    Should Be True                              ${result}                       
    ${mac2} =                                   BASH get intf mac               h4                      bond0
    ${result} =                                 REST show endpoints mac         ${mac2}
    Should Be True                              ${result}                       
    REST show endpoints 
    ${loss} =                                   BASH ping                       h5                      10.252.1.11             count=10
    Should Be True                              ${loss} == 0    
    ${stream1}=                                 L3 add                          name=stream1            flow=a<->c              frame_rate=10000             frame_size=9216             frame_cnt=400000
    ...                                         src_ip=10.251.1.101             src_gw=10.251.1.1       dst_ip=10.252.1.101     dst_gw=10.252.1.1                       
    start traffic                               ${stream1}
    sleep  10
    stop traffic                                ${stream1}
    verify results                              transmitted_frames              received_valid_frames       ${stream1}              stream1
    start traffic                               ${stream1}
    sleep  10
    CLI disable interface                       s3                              ${leaf0a_spine0}    
    sleep                                       5   
    log traffic rate                            tx_rate                         rx_rate                 a                       c
    CLI enable interface                        s3                              ${leaf0a_spine0}    
    sleep                                       10
    stop traffic                                ${stream1}
    calculate loss                              transmitted_frames              received_valid_frames       ${stream1}              stream1    
    BASH delete route                           h5                              10.252.0.0/16           10.251.1.1
    BASH delete route                           h4                              10.251.0.0/16           10.252.1.1

        
Verify private subnet cannot be routed via system router            
    BASH ifup intf                              h1                              bond0
    BASH ifup intf                              h2                              bond0
    BASH ifup intf                              h3                              bond0
    BASH ifup intf                              h4                              bond0       
    BASH ifup intf                              h5                              bond0
    BASH ifup intf                              h6                              bond0           
    REST add portgroup to vns                   X                               X1                      ${leaf2_pc1}            -1
    REST add portgroup to vns                   X                               X2                      ${leaf2_pc2}            -1
    REST add portgroup to vns                   Y                               Y1                      ${leaf1_pc1}            -1
    REST add portgroup to vns                   Y                               Y2                      ${leaf1_pc2}            -1
    REST add vns ip                             X                               X1                      10.251.1.1              24              private=true
    BASH ifconfig ip address                         h5                              10.251.1.11/24          bond0   
    BASH ifconfig ip address                         h6                              10.251.2.11/24          bond0   
    BASH ifconfig ip address                         h3                              10.252.1.11/24          bond0
    BASH ifconfig ip address                         h4                              10.252.2.11/24          bond0
    BASH add route                              h5                              10.252.0.0/16           10.251.1.1
    BASH add route                              h5                              10.251.0.0/16           10.251.1.1
    BASH add route                              h6                              10.251.0.0/16           10.251.2.1
    BASH add route                              h6                              10.252.0.0/16           10.251.2.1
    BASH add route                              h3                              10.251.0.0/16           10.252.1.1
    BASH add route                              h3                              10.252.0.0/16           10.252.1.1
    BASH add route                              h4                              10.251.0.0/16           10.252.2.1
    BASH add route                              h4                              10.252.0.0/16           10.252.2.1
    sleep                                       5   
    BASH ping                                   h5                              10.251.1.1              count=5
    BASH ping                                   h6                              10.251.2.1              count=5
    BASH ping                                   h3                              10.252.1.1              count=5
    BASH ping                                   h4                              10.252.2.1              count=5
    ${value} =                                  BASH verify arp                 h5                      10.251.1.1
    Should Be True                              ${value}        
    ${value} =                                  BASH verify arp                 h6                      10.251.2.1
    Should Be True                              ${value}        
    ${value} =                                  BASH verify arp                 h3                      10.252.1.1
    Should Be True                              ${value}        
    ${value} =                                  BASH verify arp                 h4                      10.252.2.1
    Should Be True                              ${value}    
    ${mac1} =                                   BASH get intf mac               h5                      bond0
    ${result} =                                 REST show endpoints mac         ${mac1}
    Should Be True                              ${result}                       
    ${mac2} =                                   BASH get intf mac               h6                      bond0
    ${result} =                                 REST show endpoints mac         ${mac2}
    Should Be True                              ${result} 
    ${mac3} =                                   BASH get intf mac               h3                      bond0
    ${result} =                                 REST show endpoints mac         ${mac3}
    Should Be True                              ${result}                       
    ${mac4} =                                   BASH get intf mac               h4                      bond0
    ${result} =                                 REST show endpoints mac         ${mac4}
    Should Be True                              ${result} 
    REST show endpoints 
    ${loss} =                                   BASH ping                       h5                      10.251.2.11             count=10
    Should Be True                              ${loss} == 0    
    ${loss} =                                   BASH ping                       h5                      10.252.2.11             count=10
    Should Be True                              ${loss} == 100    
    ${loss} =                                   BASH ping                       h3                      10.251.1.11             count=10
    Should Be True                              ${loss} == 100    
    ${loss} =                                   BASH ping                       h6                      10.252.2.11             count=10
    Should Be True                              ${loss} == 0    
    BASH delete route                           h5                              10.252.0.0/16           10.251.1.1
    BASH delete route                           h5                              10.251.0.0/16           10.251.1.1
    BASH delete route                           h6                              10.251.0.0/16           10.251.2.1
    BASH delete route                           h6                              10.252.0.0/16           10.251.2.1
    BASH delete route                           h3                              10.251.0.0/16           10.252.1.1
    BASH delete route                           h3                              10.252.0.0/16           10.252.1.1
    BASH delete route                           h4                              10.251.0.0/16           10.252.2.1
    BASH delete route                           h4                              10.252.0.0/16           10.252.2.1

initialize host
	BASH delete tag								h1								bond0.1001				soft_error=${true}
	BASH delete tag								h2								bond0.1002				soft_error=${true}
	BASH delete tag								h3								bond0.1003				soft_error=${true}
	BASH delete tag								h4								bond0.1004				soft_error=${true}
	BASH delete tag								h5								bond0.1005				soft_error=${true}
	BASH delete tag								h6								bond0.1006				soft_error=${true}
    BASH init intf                              h1                              eth1
    BASH init intf                              h1                              eth2
	BASH init intf								h1								eth3
	BASH init intf                              h2                              eth1
	BASH init intf								h2								eth2
	BASH init intf								h2								eth3
    BASH init intf                              h3                              eth1
	BASH init intf								h3								eth2
	BASH init intf								h3								eth3
    BASH init intf                              h4                              eth1
	BASH init intf								h4								eth2
	BASH init intf								h4								eth3
    BASH init intf                              h5                              eth1
	BASH init intf								h5								eth2
	BASH init intf								h5								eth3
    BASH init intf                              h6                              em2
	BASH init intf								h6								p1p1
	BASH init intf								h6								p1p2
	BASH init intf								h1								bond0
	BASH init intf								h2								bond0
	BASH init intf								h3								bond0
	BASH init intf								h4								bond0
	BASH init intf								h5								bond0
	BASH init intf								h6								bond0
	BASH ifdown intf							h1 								bond0
	BASH ifdown intf							h2								bond0
	BASH ifdown intf							h3								bond0
	BASH ifdown intf							h4								bond0
	BASH ifdown intf							h5								bond0
	BASH ifdown intf							h6								bond0	
	BASH release dhcpv4 address					h1								bond0
	BASH release dhcpv4 address					h2								bond0
	BASH release dhcpv4 address					h3								bond0
	BASH release dhcpv4 address					h4								bond0
	BASH release dhcpv4 address					h5								bond0
	BASH release dhcpv4 address					h6								bond0
	BASH stop service                           h1                              isc-dhcp-server
	${result} =                                 BASH run command                h1                     ifconfig
    log                                         host1 ifconfig is ${result}
    ${result} =                                 BASH run command                h2                     ifconfig
    log                                         host2 ifconfig is ${result}
    ${result} =                                 BASH run command                h3                     ifconfig
    log                                         host3 ifconfig is ${result}
    ${result} =                                 BASH run command                h4                     ifconfig
    log                                         host4 ifconfig is ${result}
    ${result} =                                 BASH run command                h5                     ifconfig
    log                                         host5 ifconfig is ${result}
    ${result} =                                 BASH run command                h6                     ifconfig
    log                                         host6 ifconfig is ${result}
    BASH stop service                           h1                              isc-dhcp-server
    BASH stop service                           h2                              isc-dhcp-server
    BASH stop service                           h3                              isc-dhcp-server


test setup topology
	initialize host
	
	sleep 											1
	Start Floodlight Monitor 
	REST add tenant 								X
	REST add tenant									Y
	REST add tenant									Z
	REST add tenant									system
	REST add vns									X							X1
	REST add vns									X							X2
	REST add vns									X							X3
	REST add vns									Y							Y1
	REST add vns									Y							Y2
	REST add vns									Y							Y3
	REST add vns									Z							Z1
	REST add vns									Z							Z2
	REST add vns									Z							Z3
	REST add router intf							X							X1
	REST add router intf							X							X2
	REST add router intf							X							X3
	REST add router intf							Y							Y1
	REST add router intf							Y							Y2
	REST add router intf							Y							Y3
	REST add router intf							Z							Z1
	REST add router intf							Z							Z2
	REST add router intf							Z							Z3	
	REST add vns ip  								X							X1				10.251.1.1				24	
	REST add vns ip  								X							X2				10.251.2.1				24	
	REST add vns ip  								X							X3				10.251.3.1				24	
	REST add vns ip  								Y							Y1				10.252.1.1				24	
	REST add vns ip  								Y							Y2				10.252.2.1				24	
	REST add vns ip  								Y							Y3				10.252.3.1				24	
	REST add vns ip  								Z							Z1				10.253.1.1				24	
	REST add vns ip  								Z							Z2				10.253.2.1				24	
	REST add vns ip  								Z							Z3				10.253.3.1				24	
	REST add interface to portgroup					${leaf0_a}					${leaf0_pc1_intf1}					${leaf0_pc1}
	REST add interface to portgroup					${leaf0_b}					${leaf0_pc1_intf2}					${leaf0_pc1}
	REST add interface to portgroup					${leaf0_a}					${leaf0_pc2_intf1}					${leaf0_pc2}
	REST add interface to portgroup					${leaf0_b}					${leaf0_pc2_intf2}					${leaf0_pc2}
	REST add interface to portgroup					${leaf1_a}					${leaf1_pc1_intf1}					${leaf1_pc1}
	REST add interface to portgroup					${leaf1_b}					${leaf1_pc1_intf2}					${leaf1_pc1}
	REST add interface to portgroup					${leaf1_a}					${leaf1_pc2_intf1}					${leaf1_pc2}
	REST add interface to portgroup					${leaf1_b}					${leaf1_pc2_intf2}					${leaf1_pc2}
	REST add interface to portgroup					${leaf2_a}					${leaf2_pc1_intf1}					${leaf2_pc1}
	REST add interface to portgroup					${leaf2_b}					${leaf2_pc1_intf2}					${leaf2_pc1}
	REST add interface to portgroup					${leaf2_a}					${leaf2_pc2_intf1}					${leaf2_pc2}
	REST add interface to portgroup					${leaf2_b}					${leaf2_pc2_intf2}					${leaf2_pc2}	
	REST add tenant routers intf to system			X
	REST add tenant routers intf to system			Y
	REST add tenant routers intf to system			Z
	REST add system intf to tenant routers 			X
	REST add system intf to tenant routers 			Y
	REST add system intf to tenant routers 			Z
#	REST add policy									X							allow_all
#	REST add policy									Y							allow_all
#	${result} = 									REST add policy item		X					allow_all			10		permit 			{"tenant-name": "X"}, "dst": {"tenant-name": "system"}
#	Should Be True									${result}
#	${result} = 									REST add policy item		X					allow_all			20		permit			{"tenant-name": "system"}, "dst": {"tenant-name": "X"}
#	Should Be True									${result}
	REST add static routes							X							10.252.0.0/16		 {"tenant-name": "system"}
	REST add static routes							Y							10.251.0.0/16		 {"tenant-name": "system"}
		
	

test teardown topology
    delete traffic
	REST delete vns ip  							X							X1				10.251.1.1				24	
	REST delete vns ip  							X							X2				10.251.2.1				24	
	REST delete vns ip  							X							X3				10.251.3.1				24	
	REST delete vns ip  							Y							Y1				10.252.1.1				24	
	REST delete vns ip  							Y							Y2				10.252.2.1				24	
	REST delete vns ip  							Y							Y3				10.252.3.1				24	
	REST delete vns ip  							Z							Z1				10.253.1.1				24	
	REST delete vns ip  							Z							Z2				10.253.2.1				24	
	REST delete vns ip  							Z							Z3				10.253.3.1				24	
	REST delete vns									X							X1
	REST delete vns									X							X2
	REST delete vns									X							X3
	REST delete vns									Y							Y1
	REST delete vns									Y							Y2
	REST delete vns									Y							Y3
	REST delete vns									Z							Z1
	REST delete vns									Z							Z2
	REST delete vns									Z							Z3
	REST delete tenant								X
	REST delete tenant								Y
	REST delete tenant								Z
	REST delete tenant routers intf to system		X
	REST delete tenant routers intf to system		Y
	REST delete tenant routers intf to system		Z
	initialize host
	Stop Floodlight Monitor 	

T5 base suite setup
	base suite setup
	add fabric switch
	BASH network restart                            h1                                timeout=60
	BASH network restart                            h2                                timeout=60
    BASH network restart                            h3                                timeout=60
    BASH network restart                            h4                                timeout=60
    BASH network restart                            h5                                timeout=60
    BASH restart service                            h6                                networking              timeout=60
    
	sleep 											5
	${result} = 									CLI verify controller		s1							c1		
	Should Be True									${result}
	${result} = 									CLI verify controller   	s1							c2
	Should Be True									${result}
	${result} = 									CLI verify controller       s2							c1
	Should Be True									${result}
	${result} = 									CLI verify controller       s2							c2
	Should Be True									${result}
	${result} = 									CLI verify controller       s3							c1
	Should Be True									${result}
	${result} = 									CLI verify controller       s3							c2
	Should Be True									${result}
	${result} = 									CLI verify controller       s4							c1
	Should Be True									${result}
	${result} = 									CLI verify controller       s4							c2
	Should Be True									${result}
	${result} = 									CLI verify controller       s5							c1
	Should Be True									${result}
	${result} = 									CLI verify controller       s5							c2
	Should Be True									${result}
	${result} = 									CLI verify controller       s6							c1
	Should Be True									${result}
	${result} = 									CLI verify controller       s6							c2
	Should Be True									${result}		
	REST add portgroup								${leaf0_pc1}
	REST add portgroup								${leaf0_pc2}
	REST add portgroup								${leaf1_pc1}
	REST add portgroup								${leaf1_pc2}
	REST add portgroup								${leaf2_pc1}
	REST add portgroup								${leaf2_pc2}
	REST add portgroup lacp							${leaf0_pc1}
	REST add portgroup lacp							${leaf0_pc2}
	REST add portgroup lacp							${leaf1_pc1}
	REST add portgroup lacp							${leaf1_pc2}
	REST add portgroup lacp							${leaf2_pc1}
	REST add portgroup lacp							${leaf2_pc2}

  
T5 base suite teardown
	REST delete portgroup								${leaf0_pc1}
	REST delete portgroup								${leaf0_pc2}
	REST delete portgroup								${leaf1_pc1}
	REST delete portgroup								${leaf1_pc2}
	REST delete portgroup								${leaf2_pc1}
	REST delete portgroup								${leaf2_pc2}
    BASH network restart                            h1                                timeout=60
    BASH network restart                            h2                                timeout=60
    BASH network restart                            h3                                timeout=60
    BASH network restart                            h4                                timeout=60
    BASH network restart                            h5                                timeout=60
    BASH restart service                            h6                                networking              timeout=60
	delete fabric switch  



verify results   [Arguments]  ${transmitted_frames}  ${received_valid_frames}  ${stream}  ${stream_name}
    Sleep  5
    ${report}=  fetch port stats  stream=${stream}  
    ${tx_value}=  verify dict key  ${report}  ${stream_name}  ${transmitted_frames}
    ${rx_value}=  verify dict key  ${report}  ${stream_name}  ${received_valid_frames}
    ${in_range}=  ixia verify traffic rate  ${tx_value}  ${rx_value} 
 	Log 		${in_range}
    Should be true  ${in_range}	
  	
calculate loss	 [Arguments]  ${transmitted_frames}  ${received_valid_frames}  ${stream}  ${stream_name}
    Sleep  5
    ${report} =  	fetch port stats  	stream=${stream}  
    ${tx_value} =  	verify dict key  	${report}  ${stream_name}  ${transmitted_frames}
    ${rx_value} =  	verify dict key  	${report}  ${stream_name}  ${received_valid_frames}
	${loss} = 		evaluate 			${tx_value} - ${rx_value}
	Log 			${loss}
	
verify traffic rate   [Arguments]  ${tx_rate}  ${rx_rate}  ${tx_intf}  ${rx_intf}
    Sleep  5
    ${report}=  fetch port stats
    Log  	${report}
    ${tx_value}=  verify dict key  ${report}  ${tx_intf}  transmitted_frame_rate
    ${rx_value}=  verify dict key  ${report}  ${rx_intf}  received_valid_frame_rate
    ixia verify traffic rate  ${tx_value}  ${rx_value} 

log traffic rate   [Arguments]  ${tx_rate}  ${rx_rate}  ${tx_intf}  ${rx_intf}
    Sleep  5
    ${report}=  fetch port stats
    Log  	${report}
    ${tx_value}=  verify dict key  ${report}  ${tx_intf}  transmitted_frame_rate
    ${rx_value}=  verify dict key  ${report}  ${rx_intf}  received_valid_frame_rate
	Log		${tx_value}
	Log		${rx_value} 
 

      	
