== T5 Platform Visibility Test Suite - Physical Colo Test Bed ==

* Setting
Documentation    T5 Controller Platform Test Suite - SPAN Verification
Suite Setup      base suite setup
#Suite Teardown   base suite teardown
Test Setup       T5 Platform Test Setup
Test Teardown    T5 Platform Test Teardown
Force Tags       T5Platform  SPAN
Library          keywords/BsnCommon.py
Library          keywords/Mininet.py
Library	    	 keywords/Host.py
Library          keywords/T5.py
Library	         keywords/T5L3.py
Library	         keywords/T5Platform.py
Library	         keywords/T5Utilities.py

* Variables
@{spineList}  00:00:04:00:01:00:00:01  00:00:04:00:01:00:00:02
@{leafList}  00:00:04:00:02:00:00:01  00:00:04:00:02:00:00:02  00:00:04:00:02:00:00:03

${s1SrcSwitch}  leaf0-a
${s1SrcInt}		ethernet33
${s1DstSwitch}	leaf0-a
${s1DstInt}		ethernet35
${s1PingIP}		192.168.1.54
${s1VerifyHost}  h3
${s1VerifyInt}	eth1

${s2SrcSwitch}  leaf0-a
${s2SrcInt}		ethernet17
${s2DstSwitch}	leaf0-a
${s2DstInt}		ethernet35
${s2PingIP}		20.20.20.56
${s2VerifyHost}  h3
${s2VerifyInt}	eth1
${s2ShutSwitch}  leaf0-b
${s2ShutInt}  ethernet17

${s3SrcSwitch}  leaf0-a
${s3SrcInt}		ethernet21
${s3DstSwitch}	leaf0-a
${s3DstInt}		ethernet35
${s3VerifyHost}  h3
${s3VerifyInt}	eth2

${s4SrcSwitch}  spine0
${s4SrcInt}		ethernet1
${s4DstSwitch}	spine0
${s4DstInt}		ethernet30
${s4VerifyHost}  h4
${s4VerifyInt}	eth2




* Test Case 

T0 Setup
	[Tags]  feature
	bash network restart  h1
	bash add tag  h1  bond0  10 
	bash add ip address  h1  10.10.10.51/24  bond0.10
	bash ifup intf  h1  bond0.10
	bash add route  h1  20.20.20.0/24  10.10.10.100  bond0.10
	
	bash network restart  h2
	bash add tag  h2  bond0  10 
	bash add ip address  h2  10.10.10.52/24  bond0.10
	bash ifup intf  h2  bond0.10
	bash add route  h2  20.20.20.0/24  10.10.10.100  bond0.10
	
	bash network restart  h3
	bash add tag  h3  bond0  10 
	bash add ip address  h3  10.10.10.53/24  bond0.10
	bash ifup intf  h3  bond0.10
	bash add route  h3  20.20.20.0/24  10.10.10.100  bond0.10
	
	
	bash network restart  h4
	bash add tag  h4  bond0  20 
	bash add ip address  h4  20.20.20.54/24  bond0.20
	bash ifup intf  h4  bond0.20
	bash add route  h4  10.10.10.0/24  20.20.20.100  bond0.20
	
	bash network restart  h5
	bash add tag  h5  bond0  20 
	bash add ip address  h5  20.20.20.55/24  bond0.20
	bash ifup intf  h5  bond0.20
	bash add route  h5  10.10.10.0/24  20.20.20.100  bond0.20
	
	
    Configure 3-Rack/Dual-Leaf/2-Spine/2-Host Setup For Physical Topology 
	Configure 2 VNS with Different VLAN properties
	Verify Connectivity in 3-Rack/Dual-Leaf/2-Spine/2-Host Physical Topology 

	

T1 Configure SPAN session for Single interface - Direction Both
    [Tags]  feature   run2
    ${returnVal} =  rest add monitor session	1	${s1SrcSwitch}	${s1SrcInt}	${s1DstSwitch}	${s1DstInt}  direction=both
    Should be true  ${returnVal}
	${returnVal} =  rest verify monitor session		1  ${s1SrcSwitch}	${s1SrcInt}	${s1DstSwitch}	${s1DstInt}  direction=both
	Should be true  ${returnVal}
	rest activate monitor session	1
	${returnVal} =  verify ping with tcpdump  h1  ${s1PingIP}  ${s1VerifyHost}	${s1VerifyInt}	ICMP echo request  ICMP echo reply
	Should be true  ${returnVal}
	
	
T2 Delete SPAN session for Single interface - Direction Both
	[Tags]  feature
	${returnVal} =  rest delete monitor session  1
    Should be true  ${returnVal}
    ${returnVal} =  rest verify monitor session		1  ${s1SrcSwitch}	${s1SrcInt}	${s1DstSwitch}	${s1DstInt}  direction=both
	Should not be true  ${returnVal}
	${returnVal} =  verify ping with tcpdump  h1  ${s1PingIP}  ${s1VerifyHost}	${s1VerifyInt}	ICMP echo request  ICMP echo reply
	Should not be true  ${returnVal}


T3 Configure SPAN session for Single interface - Direction Ingress
    [Tags]  feature
    ${returnVal} =  rest add monitor session	1	${s1SrcSwitch}	${s1SrcInt}	${s1DstSwitch}	${s1DstInt}	 direction=ingress
    Should be true  ${returnVal}
	${returnVal} =  rest verify monitor session		1  ${s1SrcSwitch}	${s1SrcInt}	${s1DstSwitch}	${s1DstInt}  direction=ingress
	Should be true  ${returnVal}
	rest activate monitor session	1
	${returnVal} =  verify ping with tcpdump  h1  ${s1PingIP}  ${s1VerifyHost}	${s1VerifyInt}	ICMP echo request
	Should be true  ${returnVal}
	
	
T4 Delete SPAN session for Single interface - Direction Ingress
	[Tags]  feature
	${returnVal} =  rest delete monitor session  1
    Should be true  ${returnVal}
    ${returnVal} =  rest verify monitor session		1  ${s1SrcSwitch}	${s1SrcInt}	${s1DstSwitch}	${s1DstInt}  direction=ingress
	Should not be true  ${returnVal}
	${returnVal} =  verify ping with tcpdump  h1  ${s1PingIP}  ${s1VerifyHost}	${s1VerifyInt}	ICMP echo request
	Should not be true  ${returnVal}


T5 Configure SPAN session for Single interface - Direction Egress
    [Tags]  feature
    ${returnVal} =  rest add monitor session	1	${s1SrcSwitch}	${s1SrcInt}	${s1DstSwitch}	${s1DstInt}	 direction=egress
    Should be true  ${returnVal}
	${returnVal} =  rest verify monitor session		1  ${s1SrcSwitch}	${s1SrcInt}	${s1DstSwitch}	${s1DstInt}  direction=egress
	Should be true  ${returnVal}
	rest activate monitor session	1
	${returnVal} =  verify ping with tcpdump  h1  ${s1PingIP}  ${s1VerifyHost}	${s1VerifyInt}	ICMP echo reply
	Should be true  ${returnVal}
	
	
T6 Delete SPAN session for Single interface - Direction Egress
	[Tags]  feature
	${returnVal} =  rest delete monitor session  1
    Should be true  ${returnVal}
    ${returnVal} =  rest verify monitor session		1  ${s1SrcSwitch}	${s1SrcInt}	${s1DstSwitch}	${s1DstInt}  direction=egress
	Should not be true  ${returnVal}
	${returnVal} =  verify ping with tcpdump  h1  ${s1PingIP}  ${s1VerifyHost}	${s1VerifyInt}	ICMP echo reply
	Should not be true  ${returnVal}


T7 Activate-Deactivate-Activate-Delete SPAN session for Single interface - Direction Both
    [Tags]  feature  run
    ${returnVal} =  rest add monitor session	1	${s1SrcSwitch}	${s1SrcInt}	${s1DstSwitch}	${s1DstInt}  direction=both
    Should be true  ${returnVal}
	${returnVal} =  rest verify monitor session		1  ${s1SrcSwitch}	${s1SrcInt}	${s1DstSwitch}	${s1DstInt}  direction=both
	Should be true  ${returnVal}
	rest activate monitor session	1
	${returnVal} =  verify ping with tcpdump  h1  ${s1PingIP}  ${s1VerifyHost}	${s1VerifyInt}	ICMP echo reply  ICMP echo request
	Should be true  ${returnVal}
	${returnVal} =  rest deactivate monitor session	 1
    Should be true  ${returnVal}
    ${returnVal} =  verify ping with tcpdump  h1  ${s1PingIP}  ${s1VerifyHost}	${s1VerifyInt}	ICMP echo reply  ICMP echo request
	Should not be true  ${returnVal}
    ${returnVal} =  rest activate monitor session	 1
    Should be true  ${returnVal}
    ${returnVal} =  verify ping with tcpdump  h1  ${s1PingIP}  ${s1VerifyHost}	${s1VerifyInt}	ICMP echo reply  ICMP echo request
	Should be true  ${returnVal}
	${returnVal} =  rest delete monitor session  1
    Should be true  ${returnVal}
    ${returnVal} =  rest verify monitor session		1  ${s1SrcSwitch}	${s1SrcInt}	${s1DstSwitch}	${s1DstInt}  direction=both
	Should not be true  ${returnVal}
	${returnVal} =  verify ping with tcpdump  h1  ${s1PingIP}  ${s1VerifyHost}	${s1VerifyInt}	ICMP echo reply  ICMP echo request
	Should not be true  ${returnVal}
    
    
T8 Activate-Deactivate-Activate-Delete SPAN session for Single interface - Direction Ingress
    [Tags]  feature  run
    ${returnVal} =  rest add monitor session	1	${s1SrcSwitch}	${s1SrcInt}	${s1DstSwitch}	${s1DstInt}  direction=ingress
    Should be true  ${returnVal}
	${returnVal} =  rest verify monitor session		1  ${s1SrcSwitch}	${s1SrcInt}	${s1DstSwitch}	${s1DstInt}  direction=ingress
	Should be true  ${returnVal}
	rest activate monitor session	1
	${returnVal} =  verify ping with tcpdump  h1  ${s1PingIP}  ${s1VerifyHost}	${s1VerifyInt}	ICMP echo request
	Should be true  ${returnVal}
	${returnVal} =  rest deactivate monitor session	 1
    Should be true  ${returnVal}
    ${returnVal} =  verify ping with tcpdump  h1  ${s1PingIP}  ${s1VerifyHost}	${s1VerifyInt}	ICMP echo request
	Should not be true  ${returnVal}
    ${returnVal} =  rest activate monitor session	 1
    Should be true  ${returnVal}
    ${returnVal} =  verify ping with tcpdump  h1  ${s1PingIP}  ${s1VerifyHost}	${s1VerifyInt}	ICMP echo request
	Should be true  ${returnVal}
	${returnVal} =  rest delete monitor session  1
    Should be true  ${returnVal}
    ${returnVal} =  rest verify monitor session		1  ${s1SrcSwitch}	${s1SrcInt}	${s1DstSwitch}	${s1DstInt}  direction=ingress
	Should not be true  ${returnVal}
	${returnVal} =  verify ping with tcpdump  h1  ${s1PingIP}  ${s1VerifyHost}	${s1VerifyInt}	ICMP echo request
	Should not be true  ${returnVal}
	
	
T9 Activate-Deactivate-Activate-Delete SPAN session for Single interface - Direction Egress
    [Tags]  feature  run
    ${returnVal} =  rest add monitor session	1	${s1SrcSwitch}	${s1SrcInt}	${s1DstSwitch}	${s1DstInt}  direction=egress
    Should be true  ${returnVal}
	${returnVal} =  rest verify monitor session		1  ${s1SrcSwitch}	${s1SrcInt}	${s1DstSwitch}	${s1DstInt}  direction=egress
	Should be true  ${returnVal}
	rest activate monitor session	1
	${returnVal} =  verify ping with tcpdump  h1  ${s1PingIP}  ${s1VerifyHost}	${s1VerifyInt}	ICMP echo reply
	Should be true  ${returnVal}
	${returnVal} =  rest deactivate monitor session	 1
    Should be true  ${returnVal}
    ${returnVal} =  verify ping with tcpdump  h1  ${s1PingIP}  ${s1VerifyHost}	${s1VerifyInt}	ICMP echo reply
	Should not be true  ${returnVal}
    ${returnVal} =  rest activate monitor session	 1
    Should be true  ${returnVal}
    ${returnVal} =  verify ping with tcpdump  h1  ${s1PingIP}  ${s1VerifyHost}	${s1VerifyInt}	ICMP echo reply
	Should be true  ${returnVal}
	${returnVal} =  rest delete monitor session  1
    Should be true  ${returnVal}
    ${returnVal} =  rest verify monitor session		1  ${s1SrcSwitch}	${s1SrcInt}	${s1DstSwitch}	${s1DstInt}  direction=egress
	Should not be true  ${returnVal}
	${returnVal} =  verify ping with tcpdump  h1  ${s1PingIP}  ${s1VerifyHost}	${s1VerifyInt}	ICMP echo reply
	Should not be true  ${returnVal}


T10 Configure SPAN session for Port-Group interface - Direction Both
    [Tags]  feature
    ${returnVal} =  rest add monitor session	2	${s2SrcSwitch}	${s2SrcInt}	${s2DstSwitch}	${s2DstInt}  direction=both
    Should be true  ${returnVal}
	${returnVal} =  rest verify monitor session		2  ${s2SrcSwitch}	${s2SrcInt}	${s2DstSwitch}	${s2DstInt}  direction=both
	Should be true  ${returnVal}
	rest activate monitor session	2
	${returnVal} =  verify ping with tcpdump  h1  ${s2PingIP}  ${s2VerifyHost}	${s2VerifyInt}	ICMP echo
	Should be true  ${returnVal}
	rest switch int shut   ${s2ShutSwitch}  ${s2ShutInt}
	${returnVal} =  verify ping with tcpdump  h1  ${s2PingIP}  ${s2VerifyHost}	${s2VerifyInt}	ICMP echo request  ICMP echo reply
	Should be true  ${returnVal}
	rest switch int noshut   ${s2ShutSwitch}  ${s2ShutInt}


T11 Delete SPAN session for Port-Group interface - Direction Both
	[Tags]  feature
	${returnVal} =  rest delete monitor session  2
    Should be true  ${returnVal}
    ${returnVal} =  rest verify monitor session		2  ${s2SrcSwitch}	${s2SrcInt}	${s2DstSwitch}	${s2DstInt}  direction=both
	Should not be true  ${returnVal}
	${returnVal} =  verify ping with tcpdump  h1  ${s2PingIP}  ${s2VerifyHost}	${s2VerifyInt}	ICMP
	Should not be true  ${returnVal}


T12 Configure SPAN session for Port-Group interface - Direction Ingress
    [Tags]  feature
    ${returnVal} =  rest add monitor session	2	${s2SrcSwitch}	${s2SrcInt}	${s2DstSwitch}	${s2DstInt}  direction=ingress
    Should be true  ${returnVal}
	${returnVal} =  rest verify monitor session		2  ${s2SrcSwitch}	${s2SrcInt}	${s2DstSwitch}	${s2DstInt}  direction=ingress
	Should be true  ${returnVal}
	rest activate monitor session	2
	rest switch int shut   ${s2ShutSwitch}  ${s2ShutInt}
	${returnVal} =  verify ping with tcpdump  h1  ${s2PingIP}  ${s2VerifyHost}	${s2VerifyInt}	ICMP echo request
	Should be true  ${returnVal}
	rest switch int noshut   ${s2ShutSwitch}  ${s2ShutInt}
	
	
T13 Delete SPAN session for Port-Group interface - Direction Ingress
	[Tags]  feature
	${returnVal} =  rest delete monitor session  2
    Should be true  ${returnVal}
    ${returnVal} =  rest verify monitor session		2  ${s2SrcSwitch}	${s2SrcInt}	${s2DstSwitch}	${s2DstInt}  direction=ingress
	Should not be true  ${returnVal}
	rest switch int shut   ${s2ShutSwitch}  ${s2ShutInt}
	${returnVal} =  verify ping with tcpdump  h1  ${s2PingIP}  ${s2VerifyHost}	${s2VerifyInt}	ICMP echo request
	Should not be true  ${returnVal}
	rest switch int noshut   ${s2ShutSwitch}  ${s2ShutInt}


T14 Configure SPAN session for Port-Group interface - Direction Egress
    [Tags]  feature
    ${returnVal} =  rest add monitor session	2	${s2SrcSwitch}	${s2SrcInt}	${s2DstSwitch}	${s2DstInt}  direction=egress
    Should be true  ${returnVal}
	${returnVal} =  rest verify monitor session		2  ${s2SrcSwitch}	${s2SrcInt}	${s2DstSwitch}	${s2DstInt}  direction=egress
	Should be true  ${returnVal}
	rest activate monitor session	2
	rest switch int shut   ${s2ShutSwitch}  ${s2ShutInt}
	${returnVal} =  verify ping with tcpdump  h1  ${s2PingIP}  ${s2VerifyHost}	${s2VerifyInt}	ICMP echo reply
	Should be true  ${returnVal}
	rest switch int noshut   ${s2ShutSwitch}  ${s2ShutInt}
	
	
T15 Delete SPAN session for Port-Group interface - Direction Egress
	[Tags]  feature
	${returnVal} =  rest delete monitor session  2
    Should be true  ${returnVal}
    ${returnVal} =  rest verify monitor session		2  ${s2SrcSwitch}	${s2SrcInt}	${s2DstSwitch}	${s2DstInt}  direction=egress
	Should not be true  ${returnVal}
	rest switch int shut   ${s2ShutSwitch}  ${s2ShutInt}
	${returnVal} =  verify ping with tcpdump  h1  ${s2PingIP}  ${s2VerifyHost}	${s2VerifyInt}	ICMP echo reply
	Should not be true  ${returnVal}
	rest switch int noshut   ${s2ShutSwitch}  ${s2ShutInt}
	
	
	
Configure SPAN for a particular source MAC/Port/IP-CIDR
	[Tags] manual-untested
    manual untested

Configure SPAN for a particular destination MAC/Port/IP-CIDR
	[Tags] Span manual-untested
    manual untested

Configure SPAN for a particular ether-type/ip protocol/ip-dscp/ip-ecn
	[Tags] Span manual-untested
    manual untested

Configure SPAN for a particular tenant
	[Tags] Span manual-untested
    manual untested
    
####### Test Path
    
Verify test packet path with L2 traffic within a single leaf switch between 2 members from the same tenant
	[Tags] manual-untested
    manual untested
    
Verify test packet path with L2 traffic within peer leaf switches between 2 member from the same tenant
	[Tags] manual-untested
    manual untested
    
Verify test packet path with L2 traffic between different racks amongst 2 members from the same tenant  
	[Tags] manual-untested
    manual untested
    
Verify test packet path with L2 traffic to an unknown destination originating from a tenant which spans across multiple racks
	[Tags] manual-untested
    manual untested

Verify the updated paths in test packet path with L2 traffic within a single tenant while introducing path failures
	[Tags] manual-untested
    manual untested
    
Verify test packet path with L3 traffic within a single leaf switch between 2 members from different tenants
	[Tags] manual-untested
    manual untested

Verify test packet path with L3 traffic within peer leaf switches between 2 member from different tenants
	[Tags] manual-untested
    manual untested

Verify test packet path with L3 traffic between different racks amongst 2 members from the different tenants
	[Tags] manual-untested
    manual untested
    
Verify test packet path with L3 traffic to an unknown destination originating from a tenant which spans across multiple racks
	[Tags] manual-untested
    manual untested
    
Verify the updated paths in test packet path with L3 traffic between multiple tenants while introducing path failures
	[Tags] manual-untested
    manual untested

Verify all the CLI options for the test packet path command
	[Tags] manual-untested
    manual untested
    
Flow Trace on ARP, Ping, UDP & TCP
	[Tags] manual-untested
    manual untested
    
Flow Trace on MAC, VLAN, IP, L4-Port
	[Tags] manual-untested
    manual untested
    
Flow Trace on src-endpoint, dest-endpoint, src-l4-port, dst-l4-port
	[Tags] manual-untested
    manual untested
    
    
###### Visibility

Verify LED support:  “beacon switch”

OF packet capture details

Wireshark capabilities from the controller



########################################################################################################################################

* Keywords 

Configure 3-Rack/Dual-Leaf/2-Spine/2-Host Setup For Physical Topology 

   auto configure fabric switch  ${spineList}  ${leafList}  2
   sleep  30
   Set Test Variable  ${h1_intf0}  ethernet17
   Set Test Variable  ${h1_intf1}  ethernet17
   Set Test Variable  ${h2_intf0}  ethernet19
   Set Test Variable  ${h2_intf1}  ethernet19
   Set Test Variable  ${h3_intf0}  ethernet21
   Set Test Variable  ${h3_intf1}  ethernet21
   Set Test Variable  ${h4_intf0}  ethernet17
   Set Test Variable  ${h4_intf1}  ethernet18
   Set Test Variable  ${h5_intf0}  ethernet19
   Set Test Variable  ${h5_intf1}  ethernet20
   Set Test Variable  ${h6_intf0}  ethernet21
   Set Test Variable  ${h6_intf1}  ethernet22
   
   
   rest add portgroup  p1
   rest add interface to portgroup  leaf0-a  ${h1_intf0}  p1
   rest add interface to portgroup  leaf0-b  ${h1_intf1}  p1
   rest add portgroup lacp  p1
   rest add portgroup  p2
   rest add interface to portgroup  leaf0-a  ${h2_intf0}  p2
   rest add interface to portgroup  leaf0-b  ${h2_intf1}  p2
   rest add portgroup lacp  p2
   rest add portgroup  p3
   rest add interface to portgroup  leaf0-a  ${h3_intf0}  p3
   rest add interface to portgroup  leaf0-b  ${h3_intf1}  p3
   rest add portgroup lacp  p3
   rest add portgroup  p4
   rest add interface to portgroup  leaf1-a  ${h4_intf0}  p4
   rest add interface to portgroup  leaf1-a  ${h4_intf1}  p4
   rest add portgroup lacp  p4
   rest add portgroup  p5
   rest add interface to portgroup  leaf1-a  ${h5_intf0}  p5
   rest add interface to portgroup  leaf1-a  ${h5_intf1}  p5
   rest add portgroup lacp  p5
   rest add portgroup  p6
   rest add interface to portgroup  leaf1-a  ${h6_intf0}  p6
   rest add interface to portgroup  leaf1-a  ${h6_intf1}  p6
   rest add portgroup lacp  p6
   sleep  10


Configure 2 VNS with Different VLAN properties
   
   Set Test Variable  ${subMask}  24
   Set Test Variable  ${vns1ip}  10.10.10.100
   Set Test Variable  ${vns2ip}  20.20.20.100

   rest add tenant  autoT1
   rest add vns  autoT1  v1
   rest add portgroup to vns  autoT1  v1  p1  10
   rest add portgroup to vns  autoT1  v1  p2  10
   rest add portgroup to vns  autoT1  v1  p3  10
   rest add router intf  autoT1  v1
   rest add vns ip  autoT1  v1  ${vns1ip}  ${subMask}
   
   rest add vns  autoT1  v2
   rest add portgroup to vns  autoT1  v2  p4  20
   rest add portgroup to vns  autoT1  v2  p5  20
   rest add portgroup to vns  autoT1  v2  p6  20
   rest add router intf  autoT1  v2
   rest add vns ip  autoT1  v2  ${vns2ip}  ${subMask}
   
   rest add tenant  autoT2
   rest add vns  autoT2  v3
   rest add interface to vns  autoT2  v3  leaf0-a  ethernet33  -1
   rest add interface to vns  autoT2  v3  leaf0-a  ethernet34  -1
   rest add interface to vns  autoT2  v3  leaf1-a  ethernet33  -1
   rest add interface to vns  autoT2  v3  leaf1-a  ethernet34  -1
   
   sleep  30


Verify Connectivity in 3-Rack/Dual-Leaf/2-Spine/2-Host Physical Topology 

   Set Test Variable  ${subMask}  24
   Set Test Variable  ${h1bond10ip}  10.10.10.51
   Set Test Variable  ${h2bond10ip}	 10.10.10.52
   Set Test Variable  ${h3bond10ip}	 10.10.10.53
   Set Test Variable  ${vns1ip}  10.10.10.100
   
   Set Test Variable  ${h4bond20ip} 	20.20.20.54
   Set Test Variable  ${h5bond20ip}	20.20.20.55
   Set Test Variable  ${h6bond20ip}	20.20.20.56
   Set Test Variable  ${vns2ip}  20.20.20.100
   
   Set Test Variable  ${h1ip}	192.168.1.51
   Set Test Variable  ${h2ip}	192.168.1.52
   Set Test Variable  ${h3ip}	192.168.1.53
   Set Test Variable  ${h4ip}	192.168.1.54
   Set Test Variable  ${h5ip}	192.168.1.55
   Set Test Variable  ${h6ip}	192.168.1.56
   
   
   ###	Verify L2 ping between autoT1-v1   
   ${returnVal}=  platform bash ping  h1  ${h2bond10ip}
   Should Be True  ${returnVal}  
   ${returnVal}=  platform bash ping  h1  ${h3bond10ip}
   Should Be True  ${returnVal}  
   #${returnVal}=  platform bash ping  h2  ${h3bond10ip}
   #Should Be True  ${returnVal}  
   

   ###	Verify L2 ping between autoT1-v2
   ${returnVal}=  platform bash ping  h4  ${h5bond20ip}
   Should Be True  ${returnVal}  
   ${returnVal}=  platform bash ping  h4  ${h6bond20ip}
   Should Be True  ${returnVal}  
   ${returnVal}=  platform bash ping  h5  ${h6bond20ip}
   Should Be True  ${returnVal}   
   
   ###	Verify ping between autoT2
   ${returnVal}=  platform bash ping  h1  ${h2ip}
   Should Be True  ${returnVal}   
   ${returnVal}=  platform bash ping  h1  ${h4ip}
   Should Be True  ${returnVal}  
   ${returnVal}=  platform bash ping  h1  ${h5ip}
   Should Be True  ${returnVal}  
   ${returnVal}=  platform bash ping  h2  ${h4ip}
   Should Be True  ${returnVal}  
   ${returnVal}=  platform bash ping  h2  ${h5ip}
   Should Be True  ${returnVal}  


T5 Platform Test Setup
	start floodlight monitor
	
T5 Platform Test Teardown
	stop floodlight monitor

