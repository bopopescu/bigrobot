*** Variables ***
@{supported_installer_platforms}  powerpc-quanta-lb9-r0  powerpc-quanta-ly2-r0
	...  powerpc-dni-7448-r0  powerpc-as6700-32x-r0  powerpc-as5710-54x-r0a
	...  powerpc-as5710-54x-r0b
@{supported_swi_platforms}  powerpc-quanta-ly2-r0  powerpc-as6700-32x-r0
	...  powerpc-as5710-54x-r0a  powerpc-as5710-54x-r0b

*** Keywords ***
Suite Setup
	Base Suite Setup
	Run Keyword and Ignore Error  Power Cycle All Switches
	Cli Copy  running-config  snapshot://startup-config
	Cli Copy  running-config  snapshot://startup-config  node=slave
	${tmp}  params  node=s1  key=mac
	set suite variable  ${s1_mac}  ${tmp}
	${tmp}  params  node=s2  key=mac
	set suite variable  ${s2_mac}  ${tmp}
	${tmp}  params  node=s3  key=mac
	set suite variable  ${s3_mac}  ${tmp}
	${tmp}  params  node=s4  key=mac
	set suite variable  ${s4_mac}  ${tmp}
	${tmp}  params  node=s5  key=mac
	set suite variable  ${s5_mac}  ${tmp}

	${tmp}  params  node=s1  key=alias
	set suite variable  ${s1_alias}  ${tmp}
	${tmp}  params  node=s2  key=alias
	set suite variable  ${s2_alias}  ${tmp}
	${tmp}  params  node=s3  key=alias
	set suite variable  ${s3_alias}  ${tmp}
	${tmp}  params  node=s4  key=alias
	set suite variable  ${s4_alias}  ${tmp}
	${tmp}  params  node=s5  key=alias
	set suite variable  ${s5_alias}  ${tmp}

	set suite variable  ${s1_dpid}  00:00:${s1_mac}
	set suite variable  ${s2_dpid}  00:00:${s2_mac}
	set suite variable  ${s3_dpid}  00:00:${s3_mac}
	set suite variable  ${s4_dpid}  00:00:${s4_mac}
	set suite variable  ${s5_dpid}  00:00:${s5_mac}

	@{spineList}=  Create List  ${s1_dpid}  ${s5_dpid}
	@{leafList}=  Create List  ${s2_dpid}  ${s3_dpid}  ${s4_dpid}

	#Auto Configure Fabric Switch   ${spineList}   ${leafList}   2
	Sleep  150
	Cli Run  master  enable; config
	Randomize ZTN Configuration
	Cli Run  master  show switch

	${status}=  Rest Get Switch Fabric Connection State  master  ${s1_alias}
	Run Keyword If  '${status}'=='False'  Power Cycle Switch  s1
	${status}=  Rest Get Switch Fabric Connection State  master  ${s2_alias}
	Run Keyword If  '${status}'=='False'  Power Cycle Switch  s2
	${status}=  Rest Get Switch Fabric Connection State  master  ${s3_alias}
	Run Keyword If  '${status}'=='False'  Power Cycle Switch  s3
	${status}=  Rest Get Switch Fabric Connection State  master  ${s4_alias}
	Run Keyword If  '${status}'=='False'  Power Cycle Switch  s4
	${status}=  Rest Get Switch Fabric Connection State  master  ${s5_alias}
	Run Keyword If  '${status}'=='False'  Power Cycle Switch  s5
	Sleep  120

	${tmp}=  Rest Get Switch Ip Address  master  ${s1_alias}
	set suite variable  ${s1_ip}  ${tmp}
	${tmp}=  Rest Get Switch Ip Address  master  ${s2_alias}
	set suite variable  ${s2_ip}  ${tmp}
	${tmp}=  Rest Get Switch Ip Address  master  ${s3_alias}
	set suite variable  ${s3_ip}  ${tmp}
	${tmp}=  Rest Get Switch Ip Address  master  ${s4_alias}
	set suite variable  ${s4_ip}  ${tmp}
	${tmp}=  Rest Get Switch Ip Address  master  ${s5_alias}
	set suite variable  ${s5_ip}  ${tmp}

Suite Teardown
	Sleep  30
	Run Keyword and Ignore Error  Cli Copy  snapshot://startup-config  running-config
	Run Keyword and Ignore Error  Failover
	Run Keyword and Ignore Error  Base Suite Teardown

Test Setup
	Run Keyword and Ignore Error  Base Test Setup
	Run Keyword and Ignore Error  Cli  c1  ''
	Run Keyword and Ignore Error  Cli  c2  ''
	Run Keyword and Ignore Error  Cli  c1  reauth admin adminadmin
	Run Keyword and Ignore Error  Cli  c2  reauth admin adminadmin
	Run Keyword and Ignore Error  Cli Run  master  show run
	Run Keyword and Ignore Error  Cli Run  master  show switch
	Run Keyword and Ignore Error  Cli Run  slave  show switch
	Run Keyword and Ignore Error  Cli Run  master  show zerotouch devices
	Run Keyword and Ignore Error  Cli Copy  running-config  snapshot://test-config
	Run Keyword and Ignore Error  Cli Copy  running-config  snapshot://test-config  node=slave

Test Teardown
	Run Keyword and Ignore Error  Sleep  15
	Run Keyword and Ignore Error  Cli  c1  ''
	Run Keyword and Ignore Error  Cli  c2  ''
	Run Keyword and Ignore Error  Cli  c1  reauth admin adminadmin
	Run Keyword and Ignore Error  Cli  c2  reauth admin adminadmin
	Run Keyword and Ignore Error  Cli Copy  snapshot://test-config  running-config
	Run Keyword and Ignore Error  Telnet Set All MA1 State  up
	Run Keyword and Ignore Error  Sleep  30
	Run Keyword and Ignore Error  Base Test Teardown

Verify Switch Handshake State
	[Arguments]  ${switch_alias}
	${state}=  Rest Get Switch Handshake State  master  ${switch_alias}
	Should Be Equal As Strings  master-state  ${state}
	${state}=  Rest Get Switch Handshake State  slave  ${switch_alias}
	Should Be Equal As Strings  slave-state  ${state}

Verify Switch Connection State
	[Arguments]  ${expected_state}  ${switch_alias}
	${connection_state}=  Rest Get Switch Connection State  master  ${switch_alias}
	Should Be Equal As Strings  ${expected_state}  ${connection_state}
	${connection_state}=  Rest Get Switch Connection State  slave  ${switch_alias}
	Should Be Equal As Strings  ${expected_state}  ${connection_state}

Verify Switch Fabric Connection State
	[Arguments]  ${expected_state}  ${switch_alias}
	${fabric_connection_state}=  Rest Get Switch Fabric Connection State  master  ${switch_alias}
	Should Be Equal As Strings  ${expected_state}  ${fabric_connection_state}
	${fabric_connection_state}=  Rest Get Switch Fabric Connection State  slave  ${switch_alias}
	Should Be Equal As Strings  ${expected_state}  ${fabric_connection_state}

Verify Switch Suspended Reason
	[Arguments]  ${expected_reason}  ${switch_alias}
	${suspended_reason}=  Rest Get Switch Suspended reason  master  ${switch_alias}
	Should Be Equal As Strings  ${expected_reason}  ${suspended_reason}
	${suspended_reason}=  Rest Get Switch Suspended reason  slave  ${switch_alias}
	Should Be Equal As Strings  ${expected_reason}  ${suspended_reason}

Verify Switch In Standby Mode
	[Arguments]  ${switch_alias}
	Verify Switch Handshake State  ${switch_alias}
	Verify Switch Connection State  True  ${switch_alias}
	Verify Switch Fabric Connection State  suspended  ${switch_alias}
	Verify Switch Suspended Reason  No fabric role configured  ${switch_alias}

Verify Switch In Provisioned Mode
	[Arguments]  ${switch_alias}
	Verify Switch Handshake State  ${switch_alias}
	Verify Switch Connection State  True  ${switch_alias}
	Verify Switch Fabric Connection State  connected  ${switch_alias}

Verify All Switches Connected
	Verify Switch Connection State  True  ${s1_alias}
	Verify Switch Connection State  True  ${s2_alias}
	Verify Switch Connection State  True  ${s3_alias}
	Verify Switch Connection State  True  ${s4_alias}
	Verify Switch Connection State  True  ${s5_alias}

Verify All Switches Disconnected
	Verify Switch Connection State  False  ${s1_alias}
	Verify Switch Connection State  False  ${s2_alias}
	Verify Switch Connection State  False  ${s3_alias}
	Verify Switch Connection State  False  ${s4_alias}
	Verify Switch Connection State  False  ${s5_alias}

Verify All Switches In Provisioned Mode
	Verify Switch In Provisioned Mode  ${s1_alias}
	Verify Switch In Provisioned Mode  ${s2_alias}
	Verify Switch In Provisioned Mode  ${s3_alias}
	Verify Switch In Provisioned Mode  ${s4_alias}
	Verify Switch In Provisioned Mode  ${s5_alias}

Verify All Switches In Standby Mode
	Verify Switch In Standby Mode  ${s1_alias}
	Verify Switch In Standby Mode  ${s2_alias}
	Verify Switch In Standby Mode  ${s3_alias}
	Verify Switch In Standby Mode  ${s4_alias}
	Verify Switch In Standby Mode  ${s5_alias}

Telnet Set All MA1 State
	[Arguments]  ${state}
	Telnet Set MA1 State  s1  ${state}
	Telnet Set MA1 State  s2  ${state}
	Telnet Set MA1 State  s3  ${state}
	Telnet Set MA1 State  s4  ${state}
	Telnet Set MA1 State  s5  ${state}

Generate Random Name
	[Arguments]  ${prefix}  ${suffix_len}
	${regex}  Generate Random String  ${suffix_len}  [NUMBERS]
	${name}  Catenate  SEPARATOR=  ${prefix}  ${regex}
	[Return]  ${name}

Generate Random IP
	${oct1}  Generate Random String  2  [NUMBERS]
	${oct2}  Generate Random String  2  [NUMBERS]
	${oct3}  Generate Random String  2  [NUMBERS]
	${oct4}  Generate Random String  2  [NUMBERS]
	${ip}  Catenate  SEPARATOR=.  1${oct1}  1${oct2}  1${oct3}  1${oct4}
	[Return]  ${ip}

Generate Random GMT Timezone
	${digit}  Generate Random String  1  [NUMBERS]
	${timezone}  Catenate  SEPARATOR=  Etc/GMT+${digit}
	[Return]  ${timezone}

Generate Random Threshold
	${threshold}  Generate Random String  2  [NUMBERS]
	[Return]  ${threshold}

Randomize ZTN Configuration
	Cli Run  master  enable; config
	${contact_random}  Generate Random Name  contact  5
	Cli Run  master  snmp-server contact "the ${contact_random}"
	${location_random}  Generate Random Name  location  5
	Cli Run  master  snmp-server location "the ${location_random}"
	${community_random}  Generate Random Name  community  5
	Cli Run  master  snmp-server community ro ${community_random}
	${host_random}  Generate Random IP
	Cli Run  master  snmp-server host ${host_random}
	Cli Run  master  snmp-server enable traps
	Cli Run  master  snmp-server switch trap cpu-load 80
	Cli Run  master  snmp-server switch trap fm-flow-table-util 80
	Cli Run  master  snmp-server switch trap l2-flow-table-util 80
	Cli Run  master  snmp-server switch trap mem-free 8080
	${threshold_random}  Generate Random Threshold
	Cli Run  master  snmp-server switch trap cpu-load ${threshold_random}
	Cli Run  master  snmp-server switch trap fm-flow-table-util ${threshold_random}
	Cli Run  master  snmp-server switch trap l2-flow-table-util ${threshold_random}
	Cli Run  master  snmp-server switch trap mem-free ${threshold_random}${threshold_random}
	${host_random}  Generate Random IP
	Cli Run  master  ntp server ${host_random}
	${timezone_random}  Generate Random GMT Timezone
	#Cli Run  master  ntp time-zone ${timezone_random}
	${host_random}  Generate Random IP
	${hostname_random}  Generate Random Name  hostname.tmk.  5
	Cli Run  master  logging remote
	Cli Run  master  logging remote 10.192.66.100
	Cli Run  master  logging remote ${hostname_random}

Reboot Provisioned Switch
	[Arguments]  ${switch_id}  ${switch_mac}  ${switch_alias}
	Telnet Reboot Switch  ${switch_id}
	Sleep  30
	Verify Switch Connection State  False  ${switch_alias}
	Verify Switch Fabric Connection State  not_connected  ${switch_alias}
	Telnet Wait For Switch To Reload  ${switch_id}
	Sleep  30
	Verify Switch In Provisioned Mode  ${switch_alias}
	Cli Run  master  show run
	Verify Switch Startup Config  ${switch_mac}  ${switch_alias}
	Verify Switch Running Config  ${switch_mac}  ${switch_alias}

Reboot Standby Switch
	[Arguments]  ${switch_id}  ${switch_mac}  ${switch_alias}
	Telnet Reboot Switch  ${switch_id}
	Sleep  30
	Verify Switch Connection State  False  ${switch_alias}
	Verify Switch Fabric Connection State  not_connected  ${switch_alias}
	Telnet Wait For Switch To Reload  ${switch_id}
	Sleep  30
	Verify Switch In Standby Mode  ${switch_alias}
	Cli Run  master  show run
	Verify Switch Startup Config  ${switch_mac}  ${switch_alias}
	Verify Switch Running Config  ${switch_mac}  ${switch_alias}

Verify All Switches Startup Config
	Verify Switch Startup Config  ${s1_mac}  ${s1_alias}
	Verify Switch Startup Config  ${s2_mac}  ${s2_alias}
	Verify Switch Startup Config  ${s3_mac}  ${s3_alias}
	Verify Switch Startup Config  ${s4_mac}  ${s4_alias}
	Verify Switch Startup Config  ${s5_mac}  ${s5_alias}

Verify All Switches Running Config
	Cli Run  master  show run
	Verify Switch Running Config  ${s1_mac}  ${s1_alias}
	Verify Switch Running Config  ${s2_mac}  ${s2_alias}
	Verify Switch Running Config  ${s3_mac}  ${s3_alias}
	Verify Switch Running Config  ${s4_mac}  ${s4_alias}
	Verify Switch Running Config  ${s5_mac}  ${s5_alias}

Set All Switches Mode Standby
	Cli Run  master  enable;config
	Cli Run  master  switch spine0; no fabric-role spine
	Cli Run  master  switch leaf0-a; no leaf-group rack0; no fabric-role leaf
	Cli Run  master  switch leaf0-b; no leaf-group rack0; no fabric-role leaf
	Cli Run  master  switch leaf1-a; no leaf-group rack1; no fabric-role leaf
	Cli Run  master  switch spine1; no fabric-role spine

Verify Switch SWI Version
	[Arguments]  ${switch_alias}
	${swi_version_bundle}=  Bash Get Switchlight Version  swi
	${swi_version_switch}=  Telnet Get Switch Switchlight Version  swi  ${switch_alias}
	Should Be Equal As Strings  ${swi_version_bundle}  ${swi_version_switch}

Verify Switch Installer Version
	[Arguments]  ${switch_alias}
	${installer_version_bundle}=  Bash Get Switchlight Version  installer
	${installer_version_switch}=  Telnet Get Switch Switchlight Version  installer  ${switch_alias}
	Should Be Equal As Strings  ${installer_version_bundle}  ${installer_version_switch}

Failover
	${status}=  Rest Verify Cluster Election Take Leader
#	Should Be True  ${status}


Trigger All Switches Reboot
	Telnet Reboot Switch  s1
	Telnet Reboot Switch  s2
	Telnet Reboot Switch  s3
	Telnet Reboot Switch  s4
	Telnet Reboot Switch  s5

Reboot Switches
	Telnet Reboot Switch  s1
	Telnet Reboot Switch  s2
	Telnet Reboot Switch  s3
	Telnet Reboot Switch  s4
	Telnet Reboot Switch  s5
	Telnet Wait For Switch To Reload  s1
	Telnet Wait For Switch To Reload  s2
	Telnet Wait For Switch To Reload  s3
	Telnet Wait For Switch To Reload  s4
	Telnet Wait For Switch To Reload  s5
	Sleep  100

	Cli Run  master  show run
	Verify Switch Running Config  ${s1_mac}  ${s1_alias}
	Verify Switch Running Config  ${s2_mac}  ${s2_alias}
	Verify Switch Running Config  ${s3_mac}  ${s3_alias}
	Verify Switch Running Config  ${s4_mac}  ${s4_alias}
	Verify Switch Running Config  ${s5_mac}  ${s5_alias}

	Verify Switch Handshake State  ${s1_alias}
	Verify Switch Handshake State  ${s2_alias}
	Verify Switch Handshake State  ${s3_alias}
	Verify Switch Handshake State  ${s4_alias}
	Verify Switch Handshake State  ${s5_alias}

Reboot Switches From CLI
	${status}=  Cli Reboot Switch  master  ${s1_ip}
	Run Keyword If  '${status}'=='False'  Power Cycle Switch  s1
	${status}=  Cli Reboot Switch  master  ${s2_ip}
	Run Keyword If  '${status}'=='False'  Power Cycle Switch  s2
	${status}=  Cli Reboot Switch  master  ${s3_ip}
	Run Keyword If  '${status}'=='False'  Power Cycle Switch  s3
	${status}=  Cli Reboot Switch  master  ${s4_ip}
	Run Keyword If  '${status}'=='False'  Power Cycle Switch  s4
	${status}=  Cli Reboot Switch  master  ${s5_ip}
	Run Keyword If  '${status}'=='False'  Power Cycle Switch  s5
	Sleep  100

	Cli Run  master  show run

	Verify All Switches Running Config
	Verify All Switches Startup Config
	Verify All Switches In Provisioned Mode

Cli Reset Connection Switch All
	Cli Reset Connection Switch  master  ${s1_alias}
    Cli Reset Connection Switch  master  ${s2_alias}
    Cli Reset Connection Switch  master  ${s3_alias}
    Cli Reset Connection Switch  master  ${s4_alias}
    Cli Reset Connection Switch  master  ${s5_alias}

Power Cycle All Switches
	Power Down All Switches
	Power Up All Switches

Power Down All Switches
	Power Down Switch  s1
	Sleep  5
	Power Down Switch  s2
	Sleep  5
	Power Down Switch  s3
	Sleep  5
	Power Down Switch  s4
	Sleep  5
	Power Down Switch  s5
	Sleep  5

Power Up All Switches
	Power Up Switch  s1
	Sleep  5
	Power Up Switch  s2
	Sleep  5
	Power Up Switch  s3
	Sleep  5
	Power Up Switch  s4
	Sleep  5
	Power Up Switch  s5
	Sleep  5
