*** Settings ***
Documentation  		Testing Virtual IP assignment to Cluster
Suite Setup  		Setup
Suite Teardown   	Base Suite Teardown
Test Setup   		Base Test Setup
Test Teardown  		Teardown
Force Tags   		Full  Feature  Virtual IP  Platform  T5  IronHorse
Library  			keywords/BsnCommon.py
Library  			keywords/T5Platform.py


*** Variables ***
${vip}  		10.192.103.181
${vip bis} 		10.192.103.182
${vip invalid}  	10.192.103.333
${vip string}	  	test-ip-address
${vip zeros}		0.0.0.0
${vip broadcast}	255.255.255.255
${sleep}		30 sec

*** Test Cases ***
### REST FUNCTIONS
T1.1 REST Configure and verify virtual IP address
	Rest Configure Virtual IP  ${vip}
	Sleep  ${sleep}
	Verify VIP only on Master Bash  ${vip}
	${configured} =  Rest Show Virtual IP
	Should Be Equal as Strings  ${configured}  ${vip}
	${mac1} =  Rest Get MAC Using Virtual IP   ${vip}
	${mac2} =  Rest Get MAC Using Virtual IP   master
	Should Be Equal as Strings  ${mac1}  ${mac2}
	[Tags]  REST  Smoke

T1.2 REST Delete and verify virtual IP address
	Rest Configure Virtual IP  ${vip}
	Sleep  ${sleep}
	Rest Delete Virtual IP
	Sleep  ${sleep}
	${configured} =  Rest Show Virtual IP
	Should Be Equal as Strings  ${configured}  None
	Run Keyword and Expect Error  *Node * is unreachable*  Rest Get MAC Using Virtual IP  ${vip}
	Verify VIP neither on Master nor Slave Bash  ${vip}
	[Tags]  REST

T1.3 REST Virtual IP after failover in cluster
### add validation for ssh keys when implemented
	Rest Configure Virtual IP  ${vip}
	Sleep  ${sleep}
	Verify VIP only on Master Bash  ${vip}
	${mac1} =  Rest Get MAC Using Virtual IP  ${vip}
	Rest Verify Cluster Election Take Leader
	Verify VIP only on Master Bash  ${vip}
	${mac2} =  Rest Get MAC Using Virtual IP  ${vip}
	Should Not Be Equal as Strings  ${mac1}  ${mac2}
	[Tags]  REST

T1.4 REST Verify validation for incorrect virtual IP address
	${state} =  Rest Configure Virtual IP  ${vip invalid}
	Should Not Be True  ${state}
	Verify VIP neither on Master nor Slave Bash  ${vip invalid}
	${state} =  Rest Configure Virtual IP  ${vip string}
	Should Not Be True  ${state}
	Verify VIP neither on Master nor Slave Bash  ${vip string}
	[Tags]  REST

T1.5 REST Verify it is impossible to have virtual equal to physical IP address
	${state} =  Rest Configure Virtual IP  ${c1_ip}
	Should Not Be True  ${state}
	${state} =  Rest Configure Virtual IP  ${c2_ip}
	Should Not Be True  ${state}
	[Tags]  Skipped  Manual  REST

T1.6 REST Verify it is impossible to have 0.0.0.0 or 255.255.255.255 virtual IP address
	${state} =  Rest Configure Virtual IP  ${vip zeros}
	Should Not Be True  ${state}
	Verify VIP neither on Master nor Slave Bash  ${vip zeros}
	${state} =  Rest Configure Virtual IP  ${vip broadcast}
	Should Not Be True  ${state}
	Verify VIP neither on Master nor Slave Bash  ${vip broadcast}
	[Tags]  REST

T1.7 REST Change Virtual IP address
	Rest Configure Virtual IP  ${vip}
	Sleep  ${sleep}
	${configured} =  Rest Show Virtual IP
	Should Be Equal as Strings  ${configured}  ${vip}
	${mac1} =  Rest Get MAC Using Virtual IP   ${vip}
	Rest Configure Virtual IP  ${vip bis}
	Sleep  ${sleep}
	Sleep  ${sleep}
	Verify VIP neither on Master nor Slave Bash  ${vip}
	Verify VIP only on Master Bash  ${vip bis}
	${configured} =  Rest Show Virtual IP
	Should Be Equal as Strings  ${configured}  ${vip bis}
	${mac2} =  Rest Get MAC Using Virtual IP   ${vip bis}
	Should Be Equal as Strings  ${mac1}  ${mac2}
	[Tags]  REST


### CLI FUNCTIONS
T2.1 CLI Configure and verify virtual IP address
	Cli Configure Virtual IP  ${vip}
	Sleep  ${sleep}
	Verify VIP only on Master Bash  ${vip}
	${configured} =  Cli Show Virtual IP
	Should Be Equal As Strings  ${configured}  ${vip}
	${mac1} =  Rest Get MAC Using Virtual IP   ${vip}
	${mac2} =  Rest Get MAC Using Virtual IP   master
	Should Be Equal as Strings  ${mac1}  ${mac2}
	${state} =  Bash Verify Virtual IP  ${vip}
	Should Be True  ${state}
	[Tags]  CLI  Smoke

T2.2 CLI Delete and verify virtual IP address
	Cli Configure Virtual IP  ${vip}
	Sleep  ${sleep}
	Cli Delete Virtual IP
	Sleep  ${sleep}
	${configured} =  Cli Show Virtual IP
	Should Be Equal As Strings  ${configured}  None
	Run Keyword and Expect Error  *Node * is unreachable*  Rest Get MAC Using Virtual IP  ${vip}
	Verify VIP neither on Master nor Slave Bash  ${vip}
	[Tags]  CLI

T2.3 CLI Virtual IP after failover in cluster
### add validation for ssh keys when implemented
	Cli Configure Virtual IP  ${vip}
	Sleep  ${sleep}
	Verify VIP only on Master Bash  ${vip}
	${mac1} =  Rest Get MAC Using Virtual IP  ${vip}
	${failover} =  Cli Cluster Take Leader
	Sleep  ${sleep}
	Should Be True  ${failover}
	Verify VIP only on Master Bash  ${vip}
	${mac2} =  Rest Get MAC Using Virtual IP  ${vip}
	Should Not Be Equal as Strings  ${mac1}  ${mac2}
	[Tags]  CLI

T2.4 CLI Verify validation for incorrect virtual IP address
	${state} =  Cli Configure Virtual IP  ${vip invalid}
	Should Not Be True  ${state}
	Verify VIP neither on Master nor Slave Bash  ${vip invalid}
	${state} =  Cli Configure Virtual IP  ${vip string}
	Should Not Be True  ${state}
	Verify VIP neither on Master nor Slave Bash  ${vip string}
	[Tags]  CLI

T2.5 CLI Verify it is impossible to have virtual equal to physical IP address
	${state} =  Cli Configure Virtual IP  ${c1_ip}
	Should Not Be True  ${state}
	${state} =  Cli Configure Virtual IP  ${c2_ip}
	Should Not Be True  ${state}
	[Tags]  Skipped  Manual  CLI

T2.6 CLI Verify it is impossible to have 0.0.0.0 or 255.255.255.255 virtual IP address
	${state} =  Cli Configure Virtual IP  ${vip zeros}
	Should Not Be True  ${state}
	Verify VIP neither on Master nor Slave Bash  ${vip zeros}
	${state} =  Cli Configure Virtual IP  ${vip broadcast}
	Should Not Be True  ${state}
	Verify VIP neither on Master nor Slave Bash  ${vip broadcast}
	[Tags]  CLI

T2.7 CLI Change Virtual IP address
	Cli Configure Virtual IP  ${vip}
	Sleep  ${sleep}
	${configured} =  Cli Show Virtual IP
	Should Be Equal As Strings  ${configured}  ${vip}
	${mac1} =  Rest Get MAC Using Virtual IP   ${vip}
	Cli Configure Virtual IP  ${vip bis}
	Sleep  ${sleep}
	Sleep  ${sleep}
	Verify VIP neither on Master nor Slave Bash  ${vip}
	Verify VIP only on Master Bash  ${vip bis}
	${configured} =  Cli Show Virtual IP
	Should Be Equal as Strings  ${configured}  ${vip bis}
	${mac2} =  Rest Get MAC Using Virtual IP   ${vip bis}
	Should Be Equal as Strings  ${mac1}  ${mac2}
	[Tags]  CLI


#(BSC-4925) Virtual IP not functional after chaning the time-zone(?) right after first boot
#Check if switch can connect to controller via Virtual IP
#Change virtual IP right after failover and verify


*** Keywords ***
Setup
	Base Suite Setup
	${c1_ip_temp}    params  node=c1  key=ip
	${c2_ip_temp}    params  node=c2  key=ip
	Set Suite Variable  ${c1_ip}  ${c1_ip_temp}
	Set Suite Variable  ${c2_ip}  ${c2_ip_temp}

Verify VIP only on Master Bash
	[Arguments]  ${vip-to-check}
	${state} =  Bash Verify Virtual IP  ${vip-to-check}  node=master
	Should Be True  ${state}
	${state} =  Bash Verify Virtual IP  ${vip-to-check}  node=slave
	Should Not Be True  ${state}

Verify VIP neither on Master nor Slave Bash
	[Arguments]  ${vip-to-check}
	${state} =  Bash Verify Virtual IP  ${vip-to-check}
	Should Not Be True  ${state}
	${state} =  Bash Verify Virtual IP  ${vip-to-check}  node=slave
	Should Not Be True  ${state}

Teardown
	Rest Delete Virtual IP
	Base Test Teardown
