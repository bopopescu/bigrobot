*Settings
Documentation  T5 Tacacs Test Suite Release:Iron Horse
Suite Setup  tacacs suite setup
Suite Teardown   tacacs suite teardown
Test Setup   tacacs test setup
Test Teardown   tacacs test teardown
Force Tags   IronHorse  T5  Platform
Library  OperatingSystem
Library  keywords/T5.py
Library  keywords/T5Platform.py
Library  keywords/T5Utilities.py
Library  keywords/AppController.py
Library  keywords/BsnCommon.py
Library  keywords/BigTap.py
Library  Collections.py

* Variable
${projectname}  Big Cloud Fabric Appliance
    
* Test Case
TC000: Warmup
    Verify Tacacs Configuration  0  10.2.3.201  5
    Verify AAA Authentication Configuration
    Run Keyword and Ignore Error
    ...  Cli Run  master  show tacacs  user=remote  password=remote
    Run Keyword and Ignore Error
    ...  Cli Run  slave  show tacacs  user=remote  password=remote
    Sleep  60
    # workaround for BSC-6771
    [Tags]  feature  BSC-6771

TC001: Verify Running-Configuration
    Verify Tacacs Configuration  0  10.2.3.201  5
    Verify AAA Authentication Configuration 
    config  master  show tacacs
    cli  master  show tacacs                  
    [Tags]  feature

TC002: Verify tacacs server key is not shown in clear text 
    ${myDictionary}=  rest return dictionary from get  /api/v1/data/controller/core/aaa/tacacs?config=true
    ${value}=  Get from dictionary  ${myDictionary[0]}  server
    ${secret}=  Get from dictionary  ${value[0]}  secret
    Should not be equal as strings  ${secret}  secret
    [Tags]  feature
        
TC003: Add user tacacsadmin to group admin and verify access
    verify version  tacacsadmin  adminadmin  ${true}
    [Tags]  feature

TC004: Verify remote authentication with open source tacacs
    ${result}=  rest delete tacacs server  10.2.3.201
    Should be true  ${result}
    ${result}=  rest add tacacs server  10.9.18.3  secret  5
    Should be true  ${result}
    verify version  tacacsadmin  adminadmin  ${true}
    ${result}=  rest delete tacacs server  10.9.18.3    
    Should be true  ${result}
    [Tags]  feature  runthis 

TC005: Verify multiple tacacs servers can be configured 
    ${result}=  rest add tacacs server  10.9.18.3  secret  5
    Should be true  ${result}
    Verify Tacacs Configuration  0  10.2.3.201  5
    Verify Tacacs Configuration  1  10.9.18.3  5
    ${result}=  rest delete tacacs server  10.9.18.3        
    Should be true  ${result}
    [Tags]  feature

TC006: Verify second tacacs server is used when the first is unreachable   
    ${result}=  rest delete tacacs server  10.2.3.201
    Should be true  ${result}
    ${result}=  rest add tacacs server  10.1.18.2  secret  5
    Should be true  ${result}
    ${result}=  rest add tacacs server  10.2.3.201   secret  5
    Should be true  ${result}
    Verify Tacacs Configuration  0  10.1.18.2  5
    Verify Tacacs Configuration  1  10.2.3.201   5
    verify version  tacacsadmin  adminadmin  ${true}
    ${result}=  rest delete tacacs server  10.1.18.2
    Should be true  ${result}
    ${result}=  rest delete tacacs server  10.2.3.201 
    Should be true  ${result}
    [Tags]  feature    
            
TC007: Configure mismatched tacacs secret and verify tacacs user cannot login
    ${result}=  rest delete tacacs server  10.2.3.201
    Should be true  ${result}
    ${result}=  rest add tacacs server  10.2.3.201  bsnbsn  5
    Should be true  ${result}
    ${content}=  rest show version  string=version  user=tacacsadmin  password=adminadmin
    Should not be true  ${content}
    [Tags]  feature  

TC008: Verify that when AAA is configured for tacacs only, local AAA should not work even though local user-accounts are configured
    ${result}=  rest add tacacs authentication  tacacs=${true}  tacacs_priority=1  local=${false}  local_priority=2  username=tacacsadmin  password=adminadmin
    verify version  tacacsadmin  adminadmin   ${false}
    ${content}=  rest show version  string=version  user=admin  password=adminadmin   local=${false}
    Should not be true  ${content}            
    rest add tacacs authentication  tacacs=${true}  tacacs_priority=1  local=${true}  local_priority=2  username=tacacsadmin  password=adminadmin
    [Tags]  feature  
                
TC009: Delete tacacs server from configuration and verify tacacs user has no access
    ${result}=  rest delete tacacs server  10.2.3.201
    Should be true  ${result}
    ${content}=  rest show version  string=version  user=tacacsadmin  password=adminadmin
    Should not be true  ${content}
    [Tags]  feature  

TC010: Delete user tacacsadmin from group admin and verify access
    ${result}=  cli delete user from group  tacacsadmin  admin
    Should be true  ${result}
    ${content}=  rest show version  string=version  user=tacacsadmin  password=adminadmin
    Should not be true  ${content}
    ${result}=  rest add user to group  tacacsadmin  admin
    Should be true  ${result}
    [Tags]  feature 
        
TC011. Verify that admin account can be created and deleted locally
	Cli Run  master  user admin
	Cli Run  master  password adminadmin
	Run Keyword and Expect Error  *  Cli Run  master  no user admin

TC012. Verify that admin account can not be disassociated from admin group
	Cli Run  master  user admin
	Cli Run  master  group admin
	Cli Run  master  associate user admin
	Cli Run and Verify Output  master
	...  show group admin
	...  admin \ \ \ \ \ admin
	Run Keyword and Expect Error  *  Cli Run  master  no associate user admin
	Run Keyword and Expect Error  *  Cli Run and Verify Output  master
	...  show group admin
	...  admin \ \ \ \ \ admin
	...  flag=False

TC013. Verify that creation of non-admin groups is not allowed
	Run Keyword and Expect Error  *  Cli Run  master  group non-admin

TC014. Verify that remote-admin account can be created and deleted locally
	Cli Run  master  user remote-admin
	Cli Run  master  password adminadmin
	Cli Run  master  no user remote-admin

TC015. Verify that remote-admin account can be associated and disassociated from admin group
	Cli Run  master  group admin
	Cli Run  master  associate user remote-admin
	Cli Run and Verify Output  master
	...  show group admin
	...  admin \ \ \ \ \ admin, remote-admin
	Cli Run  master  no associate user remote-admin
	Cli Run and Verify Output  master
	...  show group admin
	...  admin \ \ \ \ \ admin, remote-admin
	...  flag=False

TC016. Verify that local-user account can be associated and disassociated from admin group
	Cli Run  master  user local-user
	Cli Run  master  group admin
	Cli Run  master  associate user local-user
	Cli Run and Verify Output  master
	...  show group admin
	...  admin \ \ \ \ \ admin, local-user
	Cli Run  master  no associate user local-user
	Cli Run and Verify Output  master
	...  show group admin
	...  admin \ \ \ \ \ admin, local-user
	...  flag=False

TC017. Verify that admin configured locally and associated with admin group can do actions
	Cli Run  master  user admin
	Cli Run  master  password adminadmin
	Cli Run  master  group admin
	Cli Run  master  associate user admin
	Cli Run  master  enable  user=admin  reauth=True
	Cli Run  slave  enable  user=admin  reauth=True
	Cli Run  master  show running-config  user=admin  reauth=True
	Cli Run  master  enable; config; no user test1234  user=admin  reauth=True
	Cli Run  master  show controller  user=admin  reauth=True
	Cli Run  master  show file  user=admin  reauth=True
	Cli Run  master  enable; config; copy running-config file://test-file  user=admin  reauth=True
	Cli Run  master  enable; config; delete file test-file  user=admin  reauth=True

TC018. Verify that remote admin, associated with admin group can do actions
	Cli Run  master  group admin
	Cli Run  master  associate user remote-admin
	Cli Run  master  enable  user=remote-admin  reauth=True
	Cli Run  slave  enable  user=remote-admin  reauth=True
	Cli Run  master  show running-config  user=remote-admin  reauth=True
	Cli Run  master  enable; config; no user test1234  user=remote-admin  reauth=True
	Cli Run  master  enable; config; tenant test4321  user=remote-admin  reauth=True
	Cli Run and Verify Output
	...  master
	...  show running-config tenant
	...  tenant test4321
	Cli Run  master  show controller  user=remote-admin  reauth=True
	Sleep  5
	Cli Run  master  show file  user=remote-admin  reauth=True
	Sleep  5
	Cli Run  master  enable; config; copy running-config file://test-file  user=remote-admin  reauth=True
	Sleep  5
	Cli Run  master  enable; config; delete file test-file  user=remote-admin  reauth=True

TC019. Verify that remote admin provisioned locally, associated with admin group can do actions
	Cli Run  master  user remote-admin
	Cli Run  master  group admin
	Cli Run  master  associate user remote-admin
	Cli Run  master  enable  user=remote-admin  reauth=True
	Cli Run  slave  enable  user=remote-admin  reauth=True
	Cli Run  master  show running-config  user=remote-admin  reauth=True
	Cli Run  master  enable; config; no user test1234  user=remote-admin  reauth=True
	Cli Run  master  enable; config; tenant test4321  user=remote-admin  reauth=True
	Cli Run and Verify Output
	...  master
	...  show running-config tenant
	...  tenant test4321
	Cli Run  master  show controller  user=remote-admin  reauth=True
	Sleep  5
	Cli Run  master  show file  user=remote-admin  reauth=True
	Sleep  5
	Cli Run  master  enable; config; copy running-config file://test-file  user=remote-admin
	Sleep  5
	Cli Run  master  enable; config; delete file test-file  user=remote-admin  reauth=True
    Cli Run and Verify Output
    ...  master
    ...  show file
    ...  None.
    ...  user=remote-admin

TC020. Verify that user configured locally and associated with admin group can do actions
	Cli Run  master  user user
	Cli Run  master  password adminadmin
	Cli Run  master  group admin
	Cli Run  master  associate user user
	Cli Run  master  enable  user=user  reauth=True
	Cli Run  slave  enable  user=user  reauth=True
	Cli Run  master  show running-config  user=user  reauth=True
	Cli Run  master  enable; config; no user test1234  user=user  reauth=True
	Cli Run  master  enable; config; tenant test4321  user=user  reauth=True
	Cli Run and Verify Output
	...  master
	...  show running-config tenant
	...  tenant test4321
	Cli Run  master  show controller  user=user  reauth=True
	Sleep  5
	Cli Run  master  show file  user=user  reauth=True
	Sleep  5
	Cli Run  master  enable; config; copy running-config file://test-file  user=user  reauth=True
	Sleep  5
	Cli Run  master  enable; config; delete file test-file  user=user  reauth=True
    Cli Run and Verify Output
    ...  master
    ...  show file
    ...  None.
    ...  user=user

TC021. Verify that remote-admin not associated with admin group can not do actions
	Cli Run  master  group admin
	Sleep  5
	Run Keyword and Expect Error  *
	...  Cli Run  master  enable  user=remote  password=remote  reauth=True
	Sleep  5
	Run Keyword and Expect Error  *
	...  Cli Run  slave  enable  user=remote  password=remote  reauth=True
	Sleep  5
	Run Keyword and Expect Error  *
	...  Cli Run  master  show run  user=remote  password=remote  reauth=True
	Sleep  5
* Keywords

tacacs test setup
    ${result}=  rest add tacacs server  10.2.3.201  secret  5
    Should be true  ${result}
    ${result}=  rest add tacacs authentication
    Should be true  ${result}
    ${result}=  rest add user to group  tacacsadmin  admin
    Should be true  ${result}
	Cli Copy  running-config  snapshot://test-config
    
Verify Tacacs Configuration  [Arguments]  ${index}  ${tacacs-server}  ${timeout}
    ${myDictionary}=  rest return dictionary from get  /api/v1/data/controller/core/aaa/tacacs?config=true
    ${value}=  Get from dictionary  ${myDictionary[0]}  server
    ${server-address}=  Get from dictionary  ${value[${index}]}  server-address
    ${timeout}=  Get from dictionary  ${value[${index}]}  timeout
    ${tacacs-timeout}=  Convert to Integer  ${timeout}  
    Should be equal as strings  ${server-address}  ${tacacs-server}
    Should be equal as integers  ${tacacs-timeout}  ${timeout}

Verify AAA Authentication Configuration    
    ${myDictionary}=  rest return dictionary from get  /api/v1/data/controller/core/aaa/authenticator
    ${value}=  Get from dictionary  ${myDictionary[0]}  name
    Should be equal as strings  ${value}  tacacs
    ${priority}=  Get from dictionary  ${myDictionary[0]}  priority
    ${tacacs-priority}=  Convert to Integer  ${priority}
    Should be equal as integers  ${tacacs-priority}  1
    ${value}=  Get from dictionary  ${myDictionary[1]}  name
    Should be equal as strings  ${value}  local
    ${priority}=  Get from dictionary  ${myDictionary[1]}  priority
    ${tacacs-priority}=  Convert to Integer  ${priority}
    Should be equal as integers  ${tacacs-priority}  2

verify version  [Arguments]  ${username}  ${new_password}  ${local}
	${version}=	 Get Environment Variable  BCF_VERSION
    ${content}=  rest show version  string=version  user=${username}  password=${new_password}  local=${local}
    Should Contain  ${content}  ${version}
    ${content}=  rest show version  string=name  user=${username}  password=${new_password}  local=${local}
    Should Contain  ${content}  ${projectname}

tacacs test teardown
	Cli Copy  snapshot://test-config  running-config
    ${result}=  cli delete user from group  tacacsadmin  admin
    Should be true  ${result}
    ${result}=  rest delete tacacs server  10.2.3.201
    Should be true  ${result}
    ${result}=  rest delete tacacs authentication      
    Should be true  ${result}

Tacacs Suite Setup
	Base Suite Setup
	Cli Copy  running-config  snapshot://startup-config  node=master
	Cli Copy  running-config  snapshot://startup-config  node=slave

Tacacs Suite Teardown
	Run Keyword and Ignore Error  Cli Copy  snapshot://startup-config  running-config
	Base Suite Teardown
