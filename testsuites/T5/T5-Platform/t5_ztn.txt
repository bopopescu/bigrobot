*** Settings ***
Documentation       Testing ZTN
...              The purpose of this test suite is to check managing switches with ZTN. Small testbed will be used.
...
...              *Test topology*: pair of controllers, one spine switch, two leaf switches (Accton).
...
...              For tests which check correct installation of flows on the switches, simple forwarding configuration
...              and small traffic rate will be used.
...              Larger testbeds will be tested inherently in other testsuites.
...
...              In this Test Suite the following terms will be used:
...
...              * stand-by switch - switch configured on the controller (with MAC address) with no fabric-role specified
...
...              * provisioned switch - switch configured on the controller (with MAC address) with fabric role, forwarding traffic
...
...              * suspended switch - switch connected to fabric but not configured on the controller,
...                or running wrong version of Swith Light, or with incorrect running-config
...
...              * ztn-discovery mode - switch in the phase of booting/searching for ZTN servers with relevant manifest file
...
...              * ZTN configuration, which includes:
...
...                - configuration mirrored from controller's configuration to switches (NTP, Logging, SNMP)
...
...                - controllers' IP addresses
...
...                  - per-switch hostname (as switch name on the controller)
...
...                  - per-switch interface configuration (as assigned by DHCP server when switch booted)
...
...              * ZTN configuration change:
...
...                - any controller Cli change that affects the switch startup-config
...
...              * Switch mode change:
...
...                - any controller Cli change that affects the switch provisioning (fabric role, MAC)

Suite Setup		Suite Setup
Suite Teardown		Suite Teardown
Test Setup		Test Setup
Test Teardown	Test Teardown
Force Tags		T5  ZTN  Feature  IronHorse
Library  		keywords/BsnCommon.py
Library		keywords/T5Platform.py
Library		keywords/T5Utilities.py
Library		keywords/T5ZTN.py
Library		String



*** Variables ***
@{supported_installer_platforms}  powerpc-quanta-lb9-r0  powerpc-quanta-ly2-r0
	...  powerpc-dni-7448-r0  powerpc-as6700-32x-r0  powerpc-as5710-54x-r0a
	...  powerpc-as5710-54x-r0b
@{supported_swi_platforms}  powerpc-quanta-ly2-r0  powerpc-as6700-32x-r0
	...  powerpc-as5710-54x-r0a  powerpc-as5710-54x-r0b


*** Test Cases ***
### Basic image check
T1.1. Verify that release images are present on all controllers
	Bash Verify Switchlight Images  node=master
	Bash Verify Switchlight Images  node=slave

T1.2. Verify that manifest files are included in Switchlight image bundles
	Bash Verify Switchlight Manifests  node=master
	Bash Verify Switchlight Manifests  node=slave

T1.3. Check supported platforms of SWI and installer
	@{installer_platforms}=  Bash Get Supported Platforms  installer
	@{swi_platforms}=  Bash Get Supported Platforms  swi
	Should Contain  ${installer_platforms}  @{supported_installer_platforms}[0]
	Should Contain  ${installer_platforms}  @{supported_installer_platforms}[1]
	Should Contain  ${installer_platforms}  @{supported_installer_platforms}[2]
	Should Contain  ${installer_platforms}  @{supported_installer_platforms}[3]
	Should Contain  ${installer_platforms}  @{supported_installer_platforms}[4]
	Should Contain  ${installer_platforms}  @{supported_installer_platforms}[5]
	Should Contain  ${swi_platforms}  @{supported_swi_platforms}[0]
	Should Contain  ${swi_platforms}  @{supported_swi_platforms}[1]
	Should Contain  ${swi_platforms}  @{supported_swi_platforms}[2]
	Should Contain  ${swi_platforms}  @{supported_swi_platforms}[3]

T1.4. Check Running config for a switch
	Cli Run  master  show run
	#Verify Switch Running Config  ${s1_mac}  ${s1_alias}
	Verify Switch Running Config  ${s2_mac}  ${s2_alias}
	Verify Switch Running Config  ${s3_mac}  ${s3_alias}


T1.5. Check Startup config for a switch
	Cli Run  master  show run
	#Verify Switch Startup Config  ${s1_mac}  ${s1_alias}
	Verify Switch Startup Config  ${s2_mac}  ${s2_alias}
	Verify Switch Startup Config  ${s3_mac}  ${s3_alias}

T1.6. Test switch reboot
	#Telnet Reboot Switch  s1
	Telnet Reboot Switch  s2
	Telnet Reboot Switch  s3
	Telnet Reboot Switch  s4

	#Telnet Wait For Switch To Reload s1
	Telnet Wait For Switch To Reload  s2
	Telnet Wait For Switch To Reload  s3
	Telnet Wait For Switch To Reload  s4

T1.7. Reboot and stop at loader shell
	Telnet Reboot Switch  s1
	Telnet Stop Autoboot  s1
	Telnet Reboot Switch  s1
	[Tags]  skipped

T1.8. Reboot switches from CLI
	#Cli Reboot Switch  master  ${s1_alias}
	Cli Reboot Switch  master  ${s2_mac}
	Cli Reboot Switch  master  ${s3_ip}
	Cli Reboot Switch  master  ${s4_alias}

	#Telnet Wait For Switch To Reload  s1
	Telnet Wait For Switch To Reload  s2
	Telnet Wait For Switch To Reload  s3
	Telnet Wait For Switch To Reload  s4

	Sleep  20

	#Verify Switch Handshake State  ${s1_alias}
	Verify Switch Handshake State  ${s2_alias}
	Verify Switch Handshake State  ${s3_alias}
	Verify Switch Handshake State  ${s4_alias}

	Cli Run  master  show run
	#Verify Switch Running Config  ${s1_mac}  ${s1_alias}
	Verify Switch Running Config  ${s2_mac}  ${s2_alias}
	Verify Switch Running Config  ${s3_mac}  ${s3_alias}
	Verify Switch Running Config  ${s4_mac}  ${s4_alias}

T1.9. Verify startup config after failvoer
	Cli Run  master  show run
	Verify Switch Startup Config  ${s1_mac}  ${s1_alias}
	Verify Switch Startup Config  ${s2_mac}  ${s2_alias}
	Verify Switch Startup Config  ${s3_mac}  ${s3_alias}
	Verify Switch Startup Config  ${s4_mac}  ${s4_alias}
	Failover
	Verify Switch Startup Config  ${s1_mac}  ${s1_alias}
	Verify Switch Startup Config  ${s2_mac}  ${s2_alias}
	Verify Switch Startup Config  ${s3_mac}  ${s3_alias}
	Verify Switch Startup Config  ${s4_mac}  ${s4_alias}

T1.10. Verify switches Switchlight version
	Verify Switch SWI Version  ${s4_alias}
T1.11. Verify switches Switchlight version
	Verify Switch Installer Version  ${s4_alias}
T1.12. Reset switch to factory default
	Telnet Reset Switch to Factory Default  ${s4_alias}

T0.1. BSC-5430
	${mac1}=  Set Variable  12:22:33:44:55:66
	${mac2}=  Set Variable  66:55:44:33:22:11
	${name}=  Set Variable  test1
	Cli Run  master  enable; config
	Cli Run  master  switch ${name}
	Cli Run  master  mac ${mac1}
	Cli Run  master  show run
	Verify Switch Startup Config  ${mac1}  ${name}
	Cli Run  master  enable; config
	Cli Run  master  switch ${name}
	Cli Run  master  mac ${mac2}
	Verify Switch Startup Config  ${mac2}  ${name}
	Cli Run  master  enable; config
	Cli Run  master  switch ${name}
	Cli Run  master  mac ${mac1}
	Verify Switch Startup Config  ${mac1}  ${name}
	[Tags]  BSC-5430

T0.2. BSC-5550
	${mac1}=  Set Variable  12:22:33:44:55:66
	${name}=  Set Variable  test
	Cli Run  master  enable; config
	Cli Run  master  switch ${name}
	Cli Run  master  mac ${mac1}
	Cli Run and Verify Output  master
	...  system reboot switch ?
	...  <core/action
	...  flag=False
	[Tags]  BSC-5550

T0.3. BSC-5568
	${mac1}=  Set Variable  12:22:33:44:55:66
	${name}=  Set Variable  test
	Cli Run  master  enable; config
	Cli Run  master  switch ${name}
	Cli Run  master  mac ${mac1}
	Run Keyword and Expect error
	...  *Error: Unable to determine IP address of specified switch name*
	...  Cli Run and Verify Output  master
	...  system reboot switch test ?
	...  Shutdown Controller
	...  flag=False
	Cli Run and Verify Output  master
	...  system reboot switch ?
	...  Shutdown Controller
	...  flag=False
	Run Keyword and Expect Error
	...  *Error: Unable to determine IP address of specified switch name*
	...  Cli Run and Verify Output  master
	...  system reboot switch test ?
	...  Reboot indicated switches
	[Tags]  BSC-5568

T0.4. Show remote
	#Cli Run  master  show switch ${s1_alias} remote environment
	#Cli Run  master  show switch ${s1_alias} remote version
	#Cli Run  master  show switch ${s1_alias} remote controller
	#Cli Run  master  show switch ${s1_alias} remote inventory

	Cli Run  master  show switch ${s2_alias} remote environment
	Cli Run  master  show switch ${s2_alias} remote version
	Cli Run  master  show switch ${s2_alias} remote controller
	Cli Run  master  show switch ${s2_alias} remote inventory

	Cli Run  master  show switch ${s3_alias} remote environment
	Cli Run  master  show switch ${s3_alias} remote version
	Cli Run  master  show switch ${s3_alias} remote controller
	Cli Run  master  show switch ${s3_alias} remote inventory

	Cli Run  master  show switch ${s4_alias} remote environment
	Cli Run  master  show switch ${s4_alias} remote version
	Cli Run  master  show switch ${s4_alias} remote controller
	Cli Run  master  show switch ${s4_alias} remote inventory

# Switch in provisioned mode
T5.3.1. Disconnect, change config, reconnect, reload
	Reboot Switches
	Verify Switch In Provisioned Mode  ${s2_alias}
	Telnet Set MA1 State  s2  down
	Randomize ZTN Configuration
	Cli Run  master  show run
	Verify Switch Startup Config  ${s2_mac}  ${s2_alias}
	Telnet Set MA1 State  s2  up
	Reboot Provisioned Switch  s2  ${s2_mac}  ${s2_alias}

T5.3.2. Disconnect, delete, reconnect, reload (reboot?)
	Reboot Switches
	Verify Switch In Provisioned Mode  ${s2_alias}
	Telnet Set MA1 State  s2  down
	Cli Run  master  enable;config
	Cli Run  master  no switch ${s2_alias}
	Randomize ZTN Configuration
	Telnet Set MA1 State  s2  up
	Telnet Reboot Switch  s2
	Telnet Verify ZTN Discovery Failed  s2
	[Tags]  skipped

T5.3.3. Disconnect, change config, reboot
	Reboot Switches
	Verify Switch In Provisioned Mode  ${s2_alias}
	Telnet Set MA1 State  s2  down
	Randomize ZTN Configuration
	Cli Run  master  show run
	Verify Switch Startup Config  ${s2_mac}  ${s2_alias}
	Reboot Provisioned Switch  s2  ${s2_mac}  ${s2_alias}

T5.3.4. Disconnect, delete, reboot
	Reboot Switches
	Verify Switch In Provisioned Mode  ${s2_alias}
	Telnet Set MA1 State  s2  down
	Cli Run  master  enable;config
	Cli Run  master  no switch ${s2_alias}
	Randomize ZTN Configuration
	Telnet Reboot Switch  s2
	Telnet Verify ZTN Discovery Failed  s2
	[Tags]  skipped

T5.3.5. Disconnect, change config, failover, reconnect, reload
	Reboot Switches
	Verify Switch In Provisioned Mode  ${s2_alias}
	Telnet Set MA1 State  s2  down
	Randomize ZTN Configuration
	Failover
	Cli Run  master  show run
	Verify Switch Startup Config  ${s2_mac}  ${s2_alias}
	Telnet Set MA1 State  s2  up
	Reboot Provisioned Switch  s2  ${s2_mac}  ${s2_alias}

T5.3.6. Disconnect, delete, failover, reconnect, reload (reboot?)
	Reboot Switches
	Verify Switch In Provisioned Mode  ${s2_alias}
	Telnet Set MA1 State  s2  down
	Cli Run  master  enable;config
	Cli Run  master  no switch ${s2_alias}
	Randomize ZTN Configuration
	Failover
	Telnet Set MA1 State  s2  up
	Telnet Reboot Switch  s2
	Telnet Verify ZTN Discovery Failed  s2
	[Tags]  skipped

T5.3.7. Disconnect, change config, failover, reboot
	Reboot Switches
	Verify Switch In Provisioned Mode  ${s2_alias}
	Telnet Set MA1 State  s2  down
	Randomize ZTN Configuration
	Failover
	Cli Run  master  show run
	Verify Switch Startup Config  ${s2_mac}  ${s2_alias}
	Reboot Provisioned Switch  s2  ${s2_mac}  ${s2_alias}

T5.3.8. Disconnect, delete, failover, reboot
	Reboot Switches
	Verify Switch In Provisioned Mode  ${s2_alias}
	Telnet Set MA1 State  s2  down
	Cli Run  master  enable;config
	Cli Run  master  no switch ${s2_alias}
	Randomize ZTN Configuration
	Failover
	Telnet Reboot Switch  s2
	Telnet Verify ZTN Discovery Failed  s2
	[Tags]  skipped

T5.3.9. Disconnect, change config, double failover, reconnect, reload
	Reboot Switches
	Verify Switch In Provisioned Mode  ${s2_alias}
	Telnet Set MA1 State  s2  down
	Randomize ZTN Configuration
	Failover
	Sleep  30
	Failover
	Cli Run  master  show run
	Verify Switch Startup Config  ${s2_mac}  ${s2_alias}
	Telnet Set MA1 State  s2  up
	Reboot Provisioned Switch  s2  ${s2_mac}  ${s2_alias}

T5.3.10. Disconnect, delete, double failover, reconnect, reload (reboot?)
	Reboot Switches
	Verify Switch In Provisioned Mode  ${s2_alias}
	Telnet Set MA1 State  s2  down
	Cli Run  master  enable;config
	Cli Run  master  no switch ${s2_alias}
	Randomize ZTN Configuration
	Failover
	Failover
	Telnet Set MA1 State  s2  up
	Telnet Reboot Switch  s2
	Telnet Verify ZTN Discovery Failed  s2
	[Tags]  skipped

T5.3.11. Disconnect, change config, double failover, reboot
	Reboot Switches
	Verify Switch In Provisioned Mode  ${s2_alias}
	Telnet Set MA1 State  s2  down
	Randomize ZTN Configuration
	Failover
	Failover
	Cli Run  master  show run
	Verify Switch Startup Config  ${s2_mac}  ${s2_alias}
	Reboot Provisioned Switch  s2  ${s2_mac}  ${s2_alias}

T5.3.12. Disconnect, delete, double failover, reboot
	Reboot Switches
	Verify Switch In Provisioned Mode  ${s2_alias}
	Telnet Set MA1 State  s2  down
	Cli Run  master  enable;config
	Cli Run  master  no switch ${s2_alias}
	Randomize ZTN Configuration
	Failover
	Failover
	Telnet Reboot Switch  s2
	Telnet Verify ZTN Discovery Failed  s2
	[Tags]  skipped

### Switch bring-up
# Bring up out-of-the-box switch
T2.1.1. Verify that switch is successfully provisioned when no fabric role for the switch is specified (stand-by switch)
	Manual Untested
	[Tags]  manual-untested
T2.1.2. Verify that switch is successfully provisioned when no fabric role for the switch is specified (stand-by switch) when switch config says "shutdown"
	Manual Untested
	[Tags]  manual-untested
T2.1.3. Verify that switch is successfully provisioned and flows installed for given spine switch
	Manual Untested
	[Tags]  manual-untested
T2.1.4. Verify that switch is successfully provisioned and no flows for given spine switch when switch config says "shutdown"
	Manual Untested
	[Tags]  manual-untested
T2.1.5. Verify that switch is successfully provisioned and flows installed for given leaf switch
	Manual Untested
	[Tags]  manual-untested
T2.1.6. Verify that switch is successfully provisioned and no flows for given leaf switch when switch config says "shutdown"
	Manual Untested
	[Tags]  manual-untested
T2.1.7. Verify that unconfigured switch does not receive image
	Manual Untested
	[Tags]  manual-untested

# Reboot active switch
T2.2.1. Verify that switch is successfully provisioned when no fabric role for the switch is specified (stand-by switch)
	Reboot Switches
	Cli Run  master  enable; config
	Cli Run  master  no switch ${s2_alias}
	Cli Run  master  switch ${s2_alias}
	Cli Run  master  mac ${s2_mac}
	Telnet Reboot Switch  s2
	Sleep  30
	Verify Switch Connection State  False  ${s2_alias}
	Verify Switch Fabric Connection State  not_connected  ${s2_alias}
	Telnet Wait For Switch To Reload  s2
	Sleep  30
	Verify Switch Connection State  True  ${s2_alias}
	Cli Run  master  show run
	Verify Switch Startup Config  ${s2_mac}  ${s2_alias}
	Cli Run  master  show run
	Verify Switch Running Config  ${s2_mac}  ${s2_alias}
	Verify Switch Fabric Connection State  suspended  ${s2_alias}
	Verify Switch Suspended Reason  No fabric role configured  ${s2_alias}


T2.2.2. Verify that switch is successfully provisioned when no fabric role for the switch is specified (stand-by switch) when switch config says "shutdown"
	Reboot Switches
	Cli Run  master  enable; config
	Cli Run  master  no switch ${s2_alias}
	Cli Run  master  switch ${s2_alias}
	Cli Run  master  mac ${s2_mac}
	Cli Run  master  shutdown
	Telnet Reboot Switch  s2
	Sleep  30
	Verify Switch Connection State  False  ${s2_alias}
	Verify Switch Fabric Connection State  not_connected  ${s2_alias}
	Telnet Wait For Switch To Reload  s2
	Sleep  30
	Verify Switch Connection State  True  ${s2_alias}
	Cli Run  master  show run
	Verify Switch Startup Config  ${s2_mac}  ${s2_alias}
	Cli Run  master  show run
	Verify Switch Running Config  ${s2_mac}  ${s2_alias}
	Verify Switch Fabric Connection State  suspended  ${s2_alias}
	Verify Switch Suspended Reason  No fabric role configured  ${s2_alias}


T2.2.3. Verify that switch is successfully provisioned and flows installed for given spine switch
	Reboot Switches
	Cli Run  master  enable; config
	Cli Run  master  no switch ${s1_alias}
	Cli Run  master  switch ${s1_alias}
	Cli Run  master  mac ${s1_mac}
	Cli Run  master  fabric-role spine
	Telnet Reboot Switch  s1
	Sleep  30
	Verify Switch Connection State  False  ${s1_alias}
	Verify Switch Fabric Connection State  not_connected  ${s1_alias}
	Telnet Wait For Switch To Reload  s1
	Sleep  30
	Verify Switch Connection State  True  ${s1_alias}
	Cli Run  master  show run
	Verify Switch Startup Config  ${s1_mac}  ${s1_alias}
	Cli Run  master  show run
	Verify Switch Running Config  ${s1_mac}  ${s1_alias}
	Verify Switch Fabric Connection State  connected  ${s1_alias}
	[Tags]  skipped

T2.2.4. Verify that switch is successfully provisioned and no flows for given spine switch when switch config says "shutdown"
	Reboot Switches
	Cli Run  master  enable; config
	Cli Run  master  no switch ${s1_alias}
	Cli Run  master  switch ${s1_alias}
	Cli Run  master  mac ${s1_mac}
	Cli Run  master  fabric-role spine
	Cli Run  master  shutdown
	Telnet Reboot Switch  s1
	Sleep  30
	Verify Switch Connection State  False  ${s1_alias}
	Verify Switch Fabric Connection State  not_connected  ${s1_alias}
	Telnet Wait For Switch To Reload  s1
	Sleep  30
	Verify Switch Connection State  True  ${s1_alias}
	Cli Run  master  show run
	Verify Switch Startup Config  ${s1_mac}  ${s1_alias}
	Cli Run  master  show run
	Verify Switch Running Config  ${s1_mac}  ${s1_alias}
	Verify Switch Fabric Connection State  suspended  ${s1_alias}
	Verify Switch Suspended Reason  Admin shutdown  ${s1_alias}
	[Tags]  skipped


T2.2.5. Verify that switch is successfully provisioned and flows installed for given leaf switch
	Reboot Switches
	Cli Run  master  enable; config
	Cli Run  master  no switch ${s2_alias}
	Cli Run  master  switch ${s2_alias}
	Cli Run  master  mac ${s2_mac}
	Cli Run  master  fabric-role leaf
	Telnet Reboot Switch  s2
	Sleep  30
	Verify Switch Connection State  False  ${s2_alias}
	Verify Switch Fabric Connection State  not_connected  ${s2_alias}
	Telnet Wait For Switch To Reload  s2
	Sleep  30
	Verify Switch Connection State  True  ${s2_alias}
	Cli Run  master  show run
	Verify Switch Startup Config  ${s2_mac}  ${s2_alias}
	Cli Run  master  show run
	Verify Switch Running Config  ${s2_mac}  ${s2_alias}
	Verify Switch Fabric Connection State  connected  ${s2_alias}


T2.2.6. Verify that switch is successfully provisioned and no flows for given leaf switch when switch config says "shutdown"
	Reboot Switches
	Cli Run  master  enable; config
	Cli Run  master  no switch ${s2_alias}
	Cli Run  master  switch ${s2_alias}
	Cli Run  master  mac ${s2_mac}
	Cli Run  master  fabric-role leaf
	Cli Run  master  shutdown
	Telnet Reboot Switch  s2
	Sleep  30
	Verify Switch Connection State  False  ${s2_alias}
	Verify Switch Fabric Connection State  not_connected  ${s2_alias}
	Telnet Wait For Switch To Reload  s2
	Sleep  30
	Verify Switch Connection State  True  ${s2_alias}
	Cli Run  master  show run
	Verify Switch Startup Config  ${s2_mac}  ${s2_alias}
	Cli Run  master  show run
	Verify Switch Running Config  ${s2_mac}  ${s2_alias}
	Verify Switch Fabric Connection State  suspended  ${s2_alias}
	Verify Switch Suspended Reason  Admin shutdown  ${s2_alias}


T2.2.7. Verify that after deleting and rebooting, unconfigured switch does not receive SWI image
	Reboot Switches
	Cli Run  master  enable; config
	Cli Run  master  switch ${s2_alias}
	Cli Run  master  no mac ${s2_mac}
	Telnet Reboot Switch  s2
	Sleep  30
	Verify Switch Connection State  False  ${s2_alias}
	Verify Switch Fabric Connection State  not_connected  ${s2_alias}
	Telnet Verify ZTN Discovery Failed  s2
	Verify Switch Connection State  False  ${s2_alias}
	Verify Switch Fabric Connection State  not_connected  ${s2_alias}
	#Telnet Verify ZTN Discovery Failed  s2
	#Verify Switch Connection State  False  ${s2_alias}
	#Verify Switch Fabric Connection State  not_connected  ${s2_alias}
	#Telnet Verify ZTN Discovery Failed  s2
	#Verify Switch Connection State  False  ${s2_alias}
	#Verify Switch Fabric Connection State  not_connected  ${s2_alias}
	[Tags]  skipped

T2.2.8. Verify that after deleting and rebooting, unconfigured switch does not receive Installer image
	Reboot Switches
	Cli Run  master  enable; config
	Cli Run  master  switch ${s2_alias}
	Cli Run  master  no mac ${s2_mac}
	Request Switchlight Installer Reinstall
	Telnet Reboot Switch  s2
	Sleep  30
	Verify Switch Connection State  False  ${s2_alias}
	Verify Switch Fabric Connection State  not_connected  ${s2_alias}
	Telnet Verify ONIE Discovery Failed  s2
	Verify Switch Connection State  False  ${s2_alias}
	Verify Switch Fabric Connection State  not_connected  ${s2_alias}
	#Telnet Verify ONIE Discovery Failed  s2
	#Verify Switch Connection State  False  ${s2_alias}
	#Verify Switch Fabric Connection State  not_connected  ${s2_alias}
	#Telnet Verify ONIE Discovery Failed  s2
	#Verify Switch Connection State  False  ${s2_alias}
	#Verify Switch Fabric Connection State  not_connected  ${s2_alias}
	Manual Untested
	[Tags]  manual-untested  skipped

### Regular operations
T3.1. Verify that after ZTN configuration change (CLI, GUI, REST), new startup-config is available in manifest / ZTN url for each switch
	${mac1}=  Set Variable  12:22:33:44:55:66
	${mac2}=  Set Variable  66:55:44:33:22:11
	${name1}=  Set Variable  test1
	${name2}=  Set Variable  test2
	Cli Run  master  enable; config
	Cli Run  master  switch ${name1}
	Cli Run  master  mac ${mac1}
	Cli Run  master  switch ${name2}
	Cli Run  master  mac ${mac2}
	Cli Run  master  show run
	Verify Switch Startup Config  ${mac1}  ${name1}
	Verify Switch Startup Config  ${mac2}  ${name2}
	Randomize ZTN Configuration
	Cli Run  master  show run
	Verify Switch Startup Config  ${mac1}  ${name1}
	Verify Switch Startup Config  ${mac2}  ${name2}


T3.2. Verify that after ZTN configuration change (CLI, GUI, REST), admin is notified to trigger reload of configuration on the switch, and that after reload configuration on switch gets updated
	Manual Untested
	[Tags]  manual-untested
#we eventually expect to do this automatically, but this does not happen currently
T3.3. Change ZTN configuration, do not reload the switch, restore old config (check if reload command on UI is still requested), reload switch - verify that config on switch is correct
	Reboot Switches
	Cli Copy  running-config  config://temp-config
	Randomize ZTN Configuration
	Cli Run  master  show run
	Verify Switch Startup Config  ${s2_mac}  ${s2_alias}
	Cli Copy  config://temp-config  running-config
	Cli Run  master  show run
	Verify Switch Startup Config  ${s2_mac}  ${s2_alias}
	Telnet Reboot Switch  s2
	Sleep  30
	Verify Switch Connection State  False  ${s2_alias}
	Verify Switch Fabric Connection State  not_connected  ${s2_alias}
	Telnet Wait For Switch To Reload  s2
	Sleep  30
	Verify Switch Connection State  True  ${s2_alias}
	Cli Run  master  show run
	Verify Switch Startup Config  ${s2_mac}  ${s2_alias}
	Cli Run  master  show run
	Verify Switch Running Config  ${s2_mac}  ${s2_alias}
	Verify Switch Fabric Connection State  connected  ${s2_alias}

T3.4. Change ZTN configuration, do not reload the switch, change config again (check if reload command on UI is still requested), reload switch - verify that config on switch is correct
	Reboot Switches
	Randomize ZTN Configuration
	Cli Run  master  show run
	Verify Switch Startup Config  ${s2_mac}  ${s2_alias}
	Randomize ZTN Configuration
	Cli Run  master  show run
	Verify Switch Startup Config  ${s2_mac}  ${s2_alias}
	Telnet Reboot Switch  s2
	Sleep  30
	Verify Switch Connection State  False  ${s2_alias}
	Verify Switch Fabric Connection State  not_connected  ${s2_alias}
	Telnet Wait For Switch To Reload  s2
	Sleep  30
	Verify Switch Connection State  True  ${s2_alias}
	Cli Run  master  show run
	Verify Switch Startup Config  ${s2_mac}  ${s2_alias}
	Cli Run  master  show run
	Verify Switch Running Config  ${s2_mac}  ${s2_alias}
	Verify Switch Fabric Connection State  connected  ${s2_alias}

T3.5. Change ZTN configuration, reload half of switches, restore old config - verify that all switches need to be reloaded
	Reboot Switches
	Cli Copy  running-config  config://temp-config
	Randomize ZTN Configuration
	Cli Run  master  show run
	Verify Switch Startup Config  ${s3_mac}  ${s3_alias}
	Verify Switch Startup Config  ${s2_mac}  ${s2_alias}
	Reboot Provisioned Switch  s2  ${s2_mac}  ${s2_alias}
	Cli Copy  config://temp-config  running-config
	Cli Run  master  show run
	Verify Switch Startup Config  ${s3_mac}  ${s3_alias}
	Verify Switch Startup Config  ${s2_mac}  ${s2_alias}
	Reboot Provisioned Switch  s3  ${s3_mac}  ${s3_alias}
	Reboot Provisioned Switch  s2  ${s2_mac}  ${s2_alias}
	Cli Run  master  show run
	Verify Switch Startup Config  ${s3_mac}  ${s3_alias}
	Cli Run  master  show run
	Verify Switch Running Config  ${s3_mac}  ${s3_alias}
	Verify Switch Startup Config  ${s2_mac}  ${s2_alias}
	Cli Run  master  show run
	Verify Switch Running Config  ${s2_mac}  ${s2_alias}

T3.6. Change ZTN configuration, reload half of switches, change config again - verify that all switches need to be reloaded
	Reboot Switches
	Randomize ZTN Configuration
	Cli Run  master  show run
	Verify Switch Startup Config  ${s3_mac}  ${s3_alias}
	Verify Switch Startup Config  ${s2_mac}  ${s2_alias}
	Reboot Provisioned Switch  s2  ${s2_mac}  ${s2_alias}
	Randomize ZTN Configuration
	Cli Run  master  show run
	Verify Switch Startup Config  ${s3_mac}  ${s3_alias}
	Verify Switch Startup Config  ${s2_mac}  ${s2_alias}
	Reboot Provisioned Switch  s3  ${s3_mac}  ${s3_alias}
	Reboot Provisioned Switch  s2  ${s2_mac}  ${s2_alias}
	Verify Switch Startup Config  ${s3_mac}  ${s3_alias}
	Cli Run  master  show run
	Verify Switch Running Config  ${s3_mac}  ${s3_alias}
	Verify Switch Startup Config  ${s2_mac}  ${s2_alias}
	Cli Run  master  show run
	Verify Switch Running Config  ${s2_mac}  ${s2_alias}

# reload notification in GUI/Cli not (yet) supported
T3.7. Disconnect all switches from the fabric (ma1 down) then do significant changes in fabric configuration (startup-config template, switch roles) - error should be presented, reconnect the switch - incorrect running config should be noticed by the controller and admin should be notified to take action (reload config on switch)
	Reboot Switches
	Telnet Set MA1 State  s3  down
	Telnet Set MA1 State  s2  down
	Sleep  30
	Randomize ZTN Configuration
	Cli Run  master  show run
	Verify Switch Startup Config  ${s3_mac}  ${s3_alias}
	Verify Switch Startup Config  ${s2_mac}  ${s2_alias}
	Reboot Provisioned Switch  s3  ${s3_mac}  ${s3_alias}
	Reboot Provisioned Switch  s2  ${s2_mac}  ${s2_alias}
	Verify Switch Startup Config  ${s3_mac}  ${s3_alias}
	Cli Run  master  show run
	Verify Switch Running Config  ${s3_mac}  ${s3_alias}
	Verify Switch Startup Config  ${s2_mac}  ${s2_alias}
	Cli Run  master  show run
	Verify Switch Running Config  ${s2_mac}  ${s2_alias}

T3.8. Delete all switches from the controller, reboot all switches (they should keep looking for ZTN server). Copy RC from external source (config://, scp://, file) to running config, watch the fabric come up.
	Manual Untested
	[Tags]  manual-untested

# MAC Replacement
T4.1. Replace provisioned switch's MAC with MAC of powered-down switch, verify correct boot of new switch
	Manual Untested
	[Tags]  manual-untested
T4.2. Replace provisioned switch's MAC with MAC of switch when connectivity with switch is down, reconnect, verify correct commissioning
	Manual Untested
	[Tags]  manual-untested
T4.3. Replace provisioned switch's MAC with MAC of suspended switch, verify correct commissioned
	Manual Untested
	[Tags]  manual-untested
T4.4. Replace stand-by switch's MAC with MAC of powered-down switch, verify correct boot of new switch
	Manual Untested
	[Tags]  manual-untested
T4.5. Replace stand-by switch's MAC with MAC of switch when connectivity with switch is down, reconnect, verify correct commissioning
	Manual Untested
	[Tags]  manual-untested
T4.6. Replace stand-by switch's MAC with MAC of suspended switch, verify correct commissioned
	Manual Untested
	[Tags]  manual-untested
T4.7. Swap MAC addresses of two stand-by switches
	Manual Untested
	[Tags]  manual-untested
T4.8. Swap MAC addresses of two provisioned switches
	Manual Untested
	[Tags]  manual-untested
# potential race conditions
T4.9 Provision two switches, power them both off, swap MACs, power them both on
	Manual Untested
	[Tags]  manual-untested


### ZTN handling config changes
## *after config change controller should should present error message that switch is not connected

# Switch in provisioned mode
T5.1.1. Power down, change config
	Reboot Switches
	Cli Run  master  show run
	Verify Switch Running Config  ${s3_mac}  ${s3_alias}
	Telnet Reboot Switch  s3
	Randomize ZTN Configuration
	Sleep  30
	Cli Run  master  show run
	Verify Switch Startup Config  ${s3_mac}  ${s3_alias}
	Verify Switch Connection State  False  ${s3_alias}
	Verify Switch Fabric Connection State  not_connected  ${s3_alias}
	Telnet Wait For Switch To Reload  s3
	Sleep  30
	Verify Switch Connection State  True  ${s3_alias}
	Cli Run  master  show run
	Verify Switch Startup Config  ${s3_mac}  ${s3_alias}
	Cli Run  master  show run
	Verify Switch Running Config  ${s3_mac}  ${s3_alias}
	Verify Switch Fabric Connection State  connected  ${s3_alias}

T5.1.2. Power down, delete
	Reboot Switches
	Cli Run  master  show run
	Verify Switch Running Config  ${s3_mac}  ${s3_alias}
	Telnet Reboot Switch  s3
	Sleep  30
	Cli Run  master  enable;config
	Cli Run  master  no switch ${s3_alias}
	Telnet Verify ZTN Discovery Failed  s3
	[Tags]  skipped

T5.1.3. Power down, change config, failover
	Reboot Switches
	Cli Run  master  show run
	Verify Switch Running Config  ${s3_mac}  ${s3_alias}
	Telnet Reboot Switch  s3
	Telnet Stop Autoboot  s3
	Randomize ZTN Configuration
	Failover
	Cli Run  master  show run
	Verify Switch Startup Config  ${s3_mac}  ${s3_alias}
	Verify Switch Connection State  False  ${s3_alias}
	Verify Switch Fabric Connection State  not_connected  ${s3_alias}
	Telnet Reboot Switch  s3
	Telnet Wait For Switch To Reload  s3
	Sleep  30
	Verify Switch Connection State  True  ${s3_alias}
	Cli Run  master  show run
	Verify Switch Startup Config  ${s3_mac}  ${s3_alias}
	Cli Run  master  show run
	Verify Switch Running Config  ${s3_mac}  ${s3_alias}
	Verify Switch Fabric Connection State  connected  ${s3_alias}

T5.1.4. Power down, delete, failover
	Reboot Switches
	Telnet Reboot Switch  s3
	Telnet Stop Autoboot  s3
	Sleep  30
	Cli Run  master  enable;config
	Cli Run  master  no switch ${s3_alias}
	Failover
	Telnet Reboot Switch  s3
	Telnet Verify ZTN Discovery Failed  s3
	[Tags]  skipped

# Switch in stand-by mode
T5.2.1. Power down, change config
	Reboot Switches
	Cli Run  master  enable;config
	Cli Run  master  switch ${s2_alias}
	Cli Run  master  no leaf-group rack0
	Cli Run  master  no fabric-role leaf
	Telnet Set MA1 State  s2  down
	Telnet Reboot Switch  s2
	Randomize ZTN Configuration
	Sleep  30
	Cli Run  master  show run
	Verify Switch Startup Config  ${s2_mac}  ${s2_alias}
	Verify Switch Connection State  False  ${s2_alias}
	Telnet Wait For Switch To Reload  s2
	Sleep  30
	Verify Switch Connection State  True  ${s2_alias}
	Cli Run  master  show run
	Verify Switch Startup Config  ${s2_mac}  ${s2_alias}
	Cli Run  master  show run
	Verify Switch Running Config  ${s2_mac}  ${s2_alias}
	Verify Switch Fabric Connection State  suspended  ${s2_alias}
	Verify Switch Suspended Reason  No fabric role configured  ${s2_alias}

T5.2.2. Power down, delete
	Reboot Switches
	Cli Run  master  enable;config
	Cli Run  master  no switch ${s3_alias}
	Telnet Set MA1 State  s3  down
	Telnet Reboot Switch  s3
	Sleep  30
	Telnet Verify ZTN Discovery Failed  s3
	[Tags]  skipped

T5.2.3. Power down, change config, failover
	Reboot Switches
	Cli Run  master  enable;config
	Cli Run  master  switch ${s2_alias}
	Cli Run  master  no leaf-group rack0
	Cli Run  master  no fabric-role leaf
	Telnet Set MA1 State  s2  down
	Telnet Reboot Switch  s2
	Telnet Stop Autoboot  s2
	Randomize ZTN Configuration
	Failover
	Cli Run  master  show run
	Verify Switch Startup Config  ${s2_mac}  ${s2_alias}
	Verify Switch Connection State  False  ${s2_alias}
	Telnet Reboot Switch  s2
	Telnet Wait For Switch To Reload  s2
	Sleep  30
	Verify Switch Connection State  True  ${s2_alias}
	Cli Run  master  show run
	Verify Switch Startup Config  ${s2_mac}  ${s2_alias}
	Cli Run  master  show run
	Verify Switch Running Config  ${s2_mac}  ${s2_alias}
	Verify Switch Fabric Connection State  suspended  ${s2_alias}
	Verify Switch Suspended Reason  No fabric role configured  ${s2_alias}

T5.2.4. Power down, delete, failover
	Reboot Switches
	Cli Run  master  enable;config
	Cli Run  master  no switch ${s3_alias}
	Telnet Set MA1 State  s3  down
	Telnet Reboot Switch  s3
	Telnet Stop Autoboot  s3
	Failover
	Telnet Reboot Switch  s3
	Sleep  30
	Telnet Verify ZTN Discovery Failed  s3
	[Tags]  skipped


# Switch in stand-by mode
T5.4.1. Disconnect, change config, reconnect, reload
	Reboot Switches
	Cli Run  master  enable;config
	Cli Run  master  switch ${s3_alias}
	Cli Run  master  no leaf-group rack1
	Cli Run  master  no fabric-role leaf
	Verify Switch In Standby  Mode  ${s3_alias}
	Telnet Set MA1 State  s3  down
	Randomize ZTN Configuration
	Cli Run  master  show run
	Verify Switch Startup Config  ${s3_mac}  ${s3_alias}
	Telnet Set MA1 State  s3  up
	# add validation of state here
	Reboot Standby Switch  s3  ${s3_mac}  ${s3_alias}

T5.4.2. Disconnect, delete, reconnect, reload (reboot?)
	Reboot Switches
	Cli Run  master  enable;config
	Cli Run  master  switch ${s3_alias}
	Cli Run  master  no leaf-group rack1
	Cli Run  master  no fabric-role leaf
	Sleep  10
	Telnet Set MA1 State  s3  down
	Cli Run  master  no switch ${s3_alias}
	Randomize ZTN Configuration
	Cli Run  master  show run
	Telnet Set MA1 State  s3  up
	# add validation of state here
	Reboot Standby Switch  s3  ${s3_mac}  ${s3_alias}
	Telnet Verify ZTN Discovery Failed  s3
	[Tags]  skipped

T5.4.3. Disconnect, change config, reboot
	Reboot Switches
	Cli Run  master  enable;config
	Cli Run  master  switch ${s3_alias}
	Cli Run  master  no leaf-group rack1
	Cli Run  master  no fabric-role leaf
	Verify Switch In Standby  Mode  ${s3_alias}
	Telnet Set MA1 State  s3  down
	Randomize ZTN Configuration
	Cli Run  master  show run
	Verify Switch Startup Config  ${s3_mac}  ${s3_alias}
	# add validation of state here
	Reboot Standby Switch  s3  ${s3_mac}  ${s3_alias}

T5.4.4. Disconnect, delete, reboot
	Reboot Switches
	Cli Run  master  enable;config
	Cli Run  master  switch ${s3_alias}
	Cli Run  master  no leaf-group rack1
	Cli Run  master  no fabric-role leaf
	Sleep  10
	Telnet Set MA1 State  s3  down
	Cli Run  master  no switch ${s3_alias}
	Randomize ZTN Configuration
	Cli Run  master  show run
	# add validation of state here
	Reboot Standby Switch  s3  ${s3_mac}  ${s3_alias}
	Telnet Verify ZTN Discovery Failed  s3
	[Tags]  skipped

T5.4.5. Disconnect, change config, failover, reconnect, reload
	Reboot Switches
	Cli Run  master  enable;config
	Cli Run  master  switch ${s3_alias}
	Cli Run  master  no leaf-group rack1
	Cli Run  master  no fabric-role leaf
	Verify Switch In Standby  Mode  ${s3_alias}
	Telnet Set MA1 State  s3  down
	Randomize ZTN Configuration
	Failover
	Cli Run  master  show run
	Verify Switch Startup Config  ${s3_mac}  ${s3_alias}
	Telnet Set MA1 State  s3  up
	# add validation of state here
	Reboot Standby Switch  s3  ${s3_mac}  ${s3_alias}

T5.4.6. Disconnect, delete, failover, reconnect, reload (reboot?)
	Reboot Switches
	Cli Run  master  enable;config
	Cli Run  master  switch ${s3_alias}
	Cli Run  master  no leaf-group rack1
	Cli Run  master  no fabric-role leaf
	Sleep  10
	Telnet Set MA1 State  s3  down
	Cli Run  master  no switch ${s3_alias}
	Randomize ZTN Configuration
	Failover
	Cli Run  master  show run
	Telnet Set MA1 State  s3  up
	# add validation of state here
	Reboot Standby Switch  s3  ${s3_mac}  ${s3_alias}
	Telnet Verify ZTN Discovery Failed  s3
	[Tags]  skipped

T5.4.7. Disconnect, change config, failover, reboot
	Reboot Switches
	Cli Run  master  enable;config
	Cli Run  master  switch ${s3_alias}
	Cli Run  master  no leaf-group rack1
	Cli Run  master  no fabric-role leaf
	Verify Switch In Standby  Mode  ${s3_alias}
	Telnet Set MA1 State  s3  down
	Randomize ZTN Configuration
	Failover
	Cli Run  master  show run
	Verify Switch Startup Config  ${s3_mac}  ${s3_alias}
	# add validation of state here
	Reboot Standby Switch  s3  ${s3_mac}  ${s3_alias}

T5.4.8. Disconnect, delete, failover, reboot
	Reboot Switches
	Cli Run  master  enable;config
	Cli Run  master  switch ${s3_alias}
	Cli Run  master  no leaf-group rack1
	Cli Run  master  no fabric-role leaf
	Sleep  10
	Telnet Set MA1 State  s3  down
	Cli Run  master  no switch ${s3_alias}
	Randomize ZTN Configuration
	Failover
	Cli Run  master  show run
	# add validation of state here
	Reboot Standby Switch  s3  ${s3_mac}  ${s3_alias}
	Telnet Verify ZTN Discovery Failed  s3
	[Tags]  skipped

T5.4.9. Disconnect, change config, double failover, reconnect, reload
	Reboot Switches
	Cli Run  master  enable;config
	Cli Run  master  switch ${s3_alias}
	Cli Run  master  no leaf-group rack1
	Cli Run  master  no fabric-role leaf
	Verify Switch In Standby  Mode  ${s3_alias}
	Telnet Set MA1 State  s3  down
	Randomize ZTN Configuration
	Failover
	Failover
	Cli Run  master  show run
	Telnet Set MA1 State  s3  up
	Verify Switch Startup Config  ${s3_mac}  ${s3_alias}
	# add validation of state here
	Reboot Standby Switch  s3  ${s3_mac}  ${s3_alias}

T5.4.10. Disconnect, delete, double failover, reconnect, reload (reboot?)
	Reboot Switches
	Cli Run  master  enable;config
	Cli Run  master  switch ${s3_alias}
	Cli Run  master  no leaf-group rack1
	Cli Run  master  no fabric-role leaf
	Sleep  10
	Telnet Set MA1 State  s3  down
	Cli Run  master  no switch ${s3_alias}
	Randomize ZTN Configuration
	Failover
	Failover
	Telnet Set MA1 State  s3  up
	Cli Run  master  show run
	# add validation of state here
	Reboot Standby Switch  s3  ${s3_mac}  ${s3_alias}
	Telnet Verify ZTN Discovery Failed  s3
	[Tags]  skipped

T5.4.11. Disconnect, change config, double failover, reboot
	Reboot Switches
	Cli Run  master  enable;config
	Cli Run  master  switch ${s3_alias}
	Cli Run  master  no leaf-group rack1
	Cli Run  master  no fabric-role leaf
	Verify Switch In Standby  Mode  ${s3_alias}
	Telnet Set MA1 State  s3  down
	Randomize ZTN Configuration
	Failover
	Failover
	Cli Run  master  show run
	Verify Switch Startup Config  ${s3_mac}  ${s3_alias}
	# add validation of state here
	Reboot Standby Switch  s3  ${s3_mac}  ${s3_alias}

T5.4.12. Disconnect, delete, double failover, reboot
	Reboot Switches
	Cli Run  master  enable;config
	Cli Run  master  switch ${s3_alias}
	Cli Run  master  no leaf-group rack1
	Cli Run  master  no fabric-role leaf
	Sleep  10
	Telnet Set MA1 State  s3  down
	Cli Run  master  no switch ${s3_alias}
	Randomize ZTN Configuration
	Failover
	Failover
	Cli Run  master  show run
	# add validation of state here
	Reboot Standby Switch  s3  ${s3_mac}  ${s3_alias}
	Telnet Verify ZTN Discovery Failed  s3
	[Tags]  skipped

# Switch in provisioned mode
T5.5.1. Connected, change config, flap interface, reload
	Reboot Switches
	Cli Run  master  show run
	Verify Switch Running Config  ${s3_mac}  ${s3_alias}
	Randomize ZTN Configuration
	Telnet Set MA1 State  s3  down
	Telnet Set MA1 State  s3  up
	Sleep  30
	#Add state validation here
	Cli Run  master  show run
	Verify Switch Startup Config  ${s3_mac}  ${s3_alias}
	Reboot Provisioned Switch  ${s3_alias}

T5.5.2. Connected, delete, flap interface, reload (reboot?)
	Manual Untested
	[Tags]  manual-untested
T5.5.3. Connected, change config, reboot
	Manual Untested
	[Tags]  manual-untested
T5.5.4. Connected, delete, reboot
	Manual Untested
	[Tags]  manual-untested
T5.5.5. Connected, change config, failover, reconnect, reload
	Manual Untested
	[Tags]  manual-untested
T5.5.6. Connected, delete, failover, reconnect, reload (reboot?)
	Manual Untested
	[Tags]  manual-untested
T5.5.7. Connected, change config, failover, reboot
	Manual Untested
	[Tags]  manual-untested
T5.5.8. Connected, delete, failover, reboot
	Manual Untested
	[Tags]  manual-untested
T5.5.9. Connected, change config, double failover, reconnect, reload
	Manual Untested
	[Tags]  manual-untested
T5.5.10. Connected, delete, double failover, reconnect, reload (reboot?)
	Manual Untested
	[Tags]  manual-untested
T5.5.11. Connected, change config, double failover, reboot
	Manual Untested
	[Tags]  manual-untested
T5.5.12. Connected, delete, double failover, reboot
	Manual Untested
	[Tags]  manual-untested

# Switch in stand-by mode
T5.6.1. Connected, change config, flap interface, reload
	Manual Untested
	[Tags]  manual-untested
T5.6.2. Connected, delete, flap interface, reload (reboot?)
	Manual Untested
	[Tags]  manual-untested
T5.6.3. Connected, change config, reboot
	Manual Untested
	[Tags]  manual-untested
T5.6.4. Connected, delete, reboot
	Manual Untested
	[Tags]  manual-untested
T5.6.5. Connected, change config, failover, reconnect, reload
	Manual Untested
	[Tags]  manual-untested
T5.6.6. Connected, delete, failover, reconnect, reload (reboot?)
	Manual Untested
	[Tags]  manual-untested
T5.6.7. Connected, change config, failover, reboot
	Manual Untested
	[Tags]  manual-untested
T5.6.8. Connected, delete, failover, reboot
	Manual Untested
	[Tags]  manual-untested
T5.6.9. Connected, change config, double failover, reconnect, reload
	Manual Untested
	[Tags]  manual-untested
T5.6.10. Connected, delete, double failover, reconnect, reload (reboot?)
	Manual Untested
	[Tags]  manual-untested
T5.6.11. Connected, change config, double failover, reboot
	Manual Untested
	[Tags]  manual-untested
T5.6.12. Connected, delete, double failover, reboot
	Manual Untested
	[Tags]  manual-untested


### Miscellaneous
T6.1. Change startup-config on switch manually, verify that startup-config on switch is synced to the one at the controller after reload
	Manual Untested
	[Tags]  manual-untested
T6.2. Manually change running-config on the switch while switch is connected. Verify that controller is able to notice change and ask the switch to update its configuration and switch is disallowed from the network until config gets updated
	Manual Untested
	[Tags]  manual-untested
T6.3. Manually change running-config on the switch while switch is disconnected. Verify that after reconnecting switch, controller is able to recognize change and ask the switch to update its configuration and switch is disallowed from the network until config gets updated
	Manual Untested
	[Tags]  manual-untested
#T6.4. Verify that switch stays in stand-by mode when all controllers go down (until rebooted)
	Manual Untested
	[Tags]  manual-untested
#T6.5. Verify that switch stays in provisioned mode when all controllers go down (until rebooted)
	Manual Untested
	[Tags]  manual-untested
T6.6. Verify that controller does platform check for switches, after configuring their MAC address, to see whether they are on the supported platform list
	Manual Untested
	[Tags]  manual-untested
T6.7. Switch running wrong version of switch light, issue reboot, verify new image installed, and switch ok.
	Manual Untested
	[Tags]  manual-untested
T6.8. Issue reboot command for a switch that is not connected - error should be presented
	Manual Untested
	[Tags]  manual-untested
T6.9. Issue reload command for a switch that is not connected - error should be presented
	Manual Untested
	[Tags]  manual-untested
T6.10. Verify that controller caches information about switch from its manifest, and it is available after failover
	Manual Untested
	[Tags]  manual-untested
T6.11. Verify that controller can get list of images stored at switch's flash, and after a failover the (new) master can gather the information using cached switch IP addresses
	Manual Untested
	[Tags]  manual-untested
T6.12. Verify what happens when switch's running-config changes while fabric is operating in headless mode
	Manual Untested
	[Tags]  manual-untested
T6.13. Verify that there is no way to introduce *any* switch config changes from the stand-by controller
	Manual Untested
	[Tags]  manual-untested
T6.14. Verify that switch caches last known good ZTN manifest from the active ZTN server
	Manual Untested
	[Tags]  manual-untested
T6.15. Verify that switch uses cached image after reboot and does not download it again (if no image change)
	Manual Untested
	[Tags]  manual-untested
T6.16. Verify that switch uses cached config after reboot and does not download it again (if no config change)
	Manual Untested
	[Tags]  manual-untested
T6.17. Verify that discovery process succeeds when no NTP servers are available in the network
	Manual Untested
	[Tags]  manual-untested
T6.18. Verify that discovery process succeeds when no DNS servers are available in the network
	Manual Untested
	[Tags]  manual-untested
T6.19. Verify that manifest for given switch is no more accessible just after switch is deleted from fabric
	Manual Untested
	[Tags]  manual-untested
T6.20. Upgrade network/SL images on controller while switch is disconnected. Check behavior
	Manual Untested
	[Tags]  manual-untested
T6.21. Downgrade process
	Manual Untested
	[Tags]  manual-untested
T6.22. Verify behaviors when CLI-triggered failvoer is/is not graceful (two flavors of failover command will be eventually implemented)
	Manual Untested
	[Tags]  manual-untested
T6.23. Check behavior with bandwidt-limited pipe (many switches downloading images?)
	Manual Untested
	[Tags]  manual-untested
T6.24. Check that switch and controllers can configure and use separate remote syslog servers
	Manual Untested
	[Tags]  manual-untested
T6.25. Check if ZTN logs are implemented on switch/controller
	Manual Untested
	[Tags]  manual-untested
T6.26. Check behavior when controller keeps more than one set of SL images
	Manual Untested
	[Tags]  manual-untested
T6.27. Verify that there are no limits on the number of pre-provisioned switches in controller's CLI
	Manual Untested
	[Tags]  manual-untested
T6.28. Check what happens when switch boots when controllers in split-brain mode
	Manual Untested
	[Tags]  manual-untested
T6.29. Verify that servers (SNMP, NTP, Logging) can be specified as hostnames, not IP addresses
	Manual Untested
	[Tags]  manual-untested
T6.30. Have DNS servers configured differently on two controllers in cluster - check what happens after failover...
	Manual Untested
	[Tags]  manual-untested
T6.31. Check REST API call to get inventory of images at switch
	Manual Untested
	[Tags]  manual-untested
T6.32. Confirm that switch in stand-by mode sends NO packet-ins to the controller (before t5_pipeline_mode message is sent)
	Manual Untested
	[Tags]  manual-untested
T6.33. Verify pre-staging of both SL installer and SWI before upgrade
	Manual Untested
	[Tags]  manual-untested
T6.34. Check what happens when Switch is assigned new IP address (new DHCP lease) while being connected to controller
	Manual Untested
	[Tags]  manual-untested
T6.35. Check what happens when Switch is assigned new IP address (new DHCP lease) while being disconnected from controller
	Manual Untested
	[Tags]  manual-untested

# Negative
### Verify that discovery process continues indefinitely when:
T7.1. no DHCP servers are available in the network - before Switch Light Install
	Manual Untested
	[Tags]  manual-untested
T7.2. no DHCP servers are available in the network - after Switch Light Install
	Manual Untested
	[Tags]  manual-untested
#we don't guarantee switch behavior if DHCP is down. It may be the case that the switch gives up after a while.
T7.3. no ZTN servers are available - before Switch Light Install
	Manual Untested
	[Tags]  manual-untested
T7.4. no ZTN servers are available - after Switch Light Install
	Manual Untested
	[Tags]  manual-untested
T7.5. management port of the switch is down - before Switch Light Install
	Manual Untested
	[Tags]  manual-untested
T7.6. management port of the switch is down - after Switch Light Install
	Manual Untested
	[Tags]  manual-untested
T7.7. switch's MAC address is not configured on the controller - before Switch Light Install
	Manual Untested
	[Tags]  manual-untested
T7.8. switch's MAC address is not configured on the controller - after Switch Light Install
	Manual Untested
	[Tags]  manual-untested
T7.9. switch finds manifest for its MAC address, but platform type of the switch is not supported
	Manual Untested
	[Tags]  manual-untested
T7.10. Verify that Switch Light Image download is resumed after connectivity flap
	Manual Untested
	[Tags]  manual-untested
T7.11. Verify that SWI image download is resumed after connectivity flap
	Manual Untested
	[Tags]  manual-untested
T7.12. Verify that ZTN manifest search is resumed after connectivity flap
	Manual Untested
	[Tags]  manual-untested
T7.13. Verify that discovery process times out and restarts when all controllers go down during Switch Light Installer image download
	Manual Untested
	[Tags]  manual-untested
T7.14. Verify that discovery process times out and restarts when all controllers go down during SWI image download
	Manual Untested
	[Tags]  manual-untested
T7.15. Verify that discovery process times out and restarts when all controllers go down during ZTN manifest search
	Manual Untested
	[Tags]  manual-untested
T7.16. Verify that discovery process times out and restarts when connectivity goes down while Switch Light Installer download
	Manual Untested
	[Tags]  manual-untested
T7.17. Verify that discovery process times out and restarts when connectivity goes down while SWI Image download
	Manual Untested
	[Tags]  manual-untested
T7.18. Verify that discovery process times out and restarts when connectivity goes down while searching for ZTN manifests
	Manual Untested
	[Tags]  manual-untested
T7.19. Verify that discovery process restarts when downloaded Switch Light Installer image is corrupted
	Manual Untested
	[Tags]  manual-untested
T7.20. Verify that discovery process restarts when downloaded SWI image is corrupted
	Manual Untested
	[Tags]  manual-untested
T7.21. Verify that discovery process restarts when downloaded manifest file is corrupted
	Manual Untested
	[Tags]  manual-untested
T7.22. Verify that discovery process restarts when switch reboots during Switch Light Installer image download
	Manual Untested
	[Tags]  manual-untested
T7.23. Verify that discovery process restarts when switch reboots during SWI image download
	Manual Untested
	[Tags]  manual-untested
T7.24. Verify that discovery process restarts when switch reboots while searching for ZTN manifests
	Manual Untested
	[Tags]  manual-untested
T7.25. Verify that discovery process restarts when specified image path is invalid
	Manual Untested
	[Tags]  manual-untested
#7.26. Verify following behaviors when switch's MAC gets deleted during switch boot up
	Manual Untested
	[Tags]  manual-untested
T7.27.1 - while Installer download - no SWI download
	Manual Untested
	[Tags]  manual-untested
T7.27.2 - while SWI download - switch undefined (suspended)
	Manual Untested
	[Tags]  manual-untested
T7.27.3 - while image startup - switch undefined (suspended)
	Manual Untested
	[Tags]  manual-untested
#7.28. Verify following behaviors when switch's name is changed during switch boot up
	Manual Untested
	[Tags]  manual-untested
T7.28.1 - while Installer download - correct SWI download and fabric join
	Manual Untested
	[Tags]  manual-untested
T7.28.2 - while SWI download - switch undefined (suspended)
	Manual Untested
	[Tags]  manual-untested
T7.28.3 - while image startup - switch undefined (suspended)
	Manual Untested
	[Tags]  manual-untested
#7.29. Verify following behaviors when ZTN config is changed during switch boot up
	Manual Untested
	[Tags]  manual-untested
T7.29.1 - while Installer download - correct SWI download and fabric join
	Manual Untested
	[Tags]  manual-untested
T7.29.2 - while SWI download - switch undefined (suspended)
	Manual Untested
	[Tags]  manual-untested
T7.29.3 - while image startup - switch undefined (suspended)
	Manual Untested
	[Tags]  manual-untested
# 7.26-28: behavior is undefined, it is timing dependent; in all cases the switch should be visible from the controller Cli and should be rebootable to stabilize the fabric
	Manual Untested
	[Tags]  manual-untested
#7.30. Verify following behaviors when switch mode (stand-by <-> provisioned) is changed during switch boot up
	Manual Untested
	[Tags]  manual-untested
T7.30.1 - while Installer download - correct SWI download and fabric join
	Manual Untested
	[Tags]  manual-untested
T7.30.2 - while SWI download - switch undefined (suspended)
	Manual Untested
	[Tags]  manual-untested
T7.30.3 - while image startup - switch undefined (suspended)
	Manual Untested
	[Tags]  manual-untested
T7.31. Check what happens when switch's flash is full and it is supposed to download new SL image
	Manual Untested
	[Tags]  manual-untested

# Single node cluster
T7.32.1. Verify that executing "failover" command while a switch is downloading an image does not interrupt the download process
	Manual Untested
	[Tags]  manual-untested
T7.32.2. Verify that rebooting controller while a switch is downloading Installer image is restarted after controller is up again
	Manual Untested
	[Tags]  manual-untested
T7.32.3. Verify that rebooting controller while a switch is downloading SWI image is restarted after controller is up again
	Manual Untested
	[Tags]  manual-untested
T7.32.3. Verify that rebooting controller while a switch is searching for manifest is restarted after controller is up again
	Manual Untested
	[Tags]  manual-untested

# Two-nodes cluster
T7.33.1. Verify that download process continues when controller failover (graceful) happens during Installer image download
	Manual Untested
	[Tags]  manual-untested
T7.33.2. Verify that download process continues when controller failover (graceful) happens during SWI image download
	Manual Untested
	[Tags]  manual-untested
T7.33.3. Verify that discovery process is restarted when controller failover (reboot) happens during Installer image download
	Manual Untested
	[Tags]  manual-untested
T7.33.4. Verify that discovery process is restarted when controller failover (reboot) happens during SWI image download
	Manual Untested
	[Tags]  manual-untested
# Switch bootup may or may not succeed, since switch boot downloads two pieces (they need to both come from the same controller)
T7.33.5. Verify that decommissioning a standby node from the cluster does not interrupt ZTN server activity (switch downloading an image finishes the process successfully)
	Manual Untested
	[Tags]  manual-untested
T7.33.6. Verify that decommissioning the active node from the cluster does not interrupt ZTN server activity in other way than failing over (switch downloading an image restarts the process and downloads from new active controller)
	Manual Untested
	[Tags]  manual-untested

### Upgrade - only a few general test cases
# There is a separate test plan for upgrade process
T8.1. Pre-staging - verify that works
	Manual Untested
	[Tags]  manual-untested
T8.2. Pre-staging - check behavior when downloading image for pre-staging fails
	Manual Untested
	[Tags]  manual-untested
T8.3. Pre-staging - verify that pre-staging result (success/fail) is visible from controller
	Manual Untested
	[Tags]  manual-untested
T8.4. Pre-staging - verify that pre-staging works if switches connected to controller A, and there was a failover to controller B
	Manual Untested
	[Tags]  manual-untested
T8.5. Upgrade Switch Light Installer
	Manual Untested
	[Tags]  manual-untested
T8.6. Check if upgrade is possible when not all switches are in provisioned mode
	Manual Untested
	[Tags]  manual-untested

### Show
T9.1. Verify that switch configured state can be viewed on the switch
	Manual Untested
	[Tags]  manual-untested
T9.2. Verify that switch operational state can be viewed on the switch
	Manual Untested
	[Tags]  manual-untested
T9.3. Verify that switch configured state can be viewed on the controller
	Manual Untested
	[Tags]  manual-untested
T9.4. Verify that switch operational state can be viewed on the controller
	Manual Untested
	[Tags]  manual-untested
T9.5. Verify that all switch-related 'show' commands are accessible from the controller
	Manual Untested
	[Tags]  manual-untested
T9.6. Verify that there is appropriate command to show ztn status of each switch
	Manual Untested
	[Tags]  manual-untested
T9.7. Verify that admin can view version of SL running on each switch
	Manual Untested
	[Tags]  manual-untested
T9.8. ? Verify that admin can view all images stored on flash at given switch
	Manual Untested
	[Tags]  manual-untested

### Questions to ask
# Separate ZTN log
# Configuring MAC on two clusters (first-come first-serve?)
# Split brain will behave as configuring MAC on two clusters?
# Will changing fabric roles be supported / validated against switch model
# Will it be required to "shutdown" switch before introducing fabric-related changes? Deleting, changing fabric roles, MAC?
# Will we see what SL images are in upgrade package?
# Will we see at which stage of provisioning is given switch? e.g. downloading SL image, booting, ... ?
# Limit on switches that can be handled by ZTN?
# Validation of MAC addresses in CLI before making any changes? Invalid, broadcast, special MAC?


*** Keywords ***
Suite Setup
	Base Suite Setup
	Cli Copy  running-config  config://startup-config
	Cli Copy  running-config  config://startup-config  node=slave
	${tmp}  params  node=s1  key=mac
	set suite variable  ${s1_mac}  ${tmp}
	${tmp}  params  node=s2  key=mac
	set suite variable  ${s2_mac}  ${tmp}
	${tmp}  params  node=s3  key=mac
	set suite variable  ${s3_mac}  ${tmp}
	${tmp}  params  node=s4  key=mac
	set suite variable  ${s4_mac}  ${tmp}

	${tmp}  params  node=s1  key=alias
	set suite variable  ${s1_alias}  ${tmp}
	${tmp}  params  node=s2  key=alias
	set suite variable  ${s2_alias}  ${tmp}
	${tmp}  params  node=s3  key=alias
	set suite variable  ${s3_alias}  ${tmp}
	${tmp}  params  node=s4  key=alias
	set suite variable  ${s4_alias}  ${tmp}

	set suite variable  ${s1_dpid}  00:00:${s1_mac}
	set suite variable  ${s2_dpid}  00:00:${s2_mac}
	set suite variable  ${s3_dpid}  00:00:${s3_mac}
	set suite variable  ${s4_dpid}  00:00:${s4_mac}

	@{spineList}=  Create List  ${s1_dpid}
	@{leafList}=  Create List  ${s2_dpid}  ${s3_dpid}  ${s4_dpid}

	Auto Configure Fabric Switch   ${spineList}   ${leafList}   2
	Cli Run  master  enable; config
	Randomize ZTN Configuration
	#Cli Run  master  snmp-server enable traps
	Cli Run  master  ntp time-zone UTC
	Reboot Switches

	#${tmp}=  Rest Get Switch Ip Address  master  ${s1_alias}
	#set suite variable  ${s1_ip}  ${tmp}
	${tmp}=  Rest Get Switch Ip Address  master  ${s2_alias}
	set suite variable  ${s2_ip}  ${tmp}
	${tmp}=  Rest Get Switch Ip Address  master  ${s3_alias}
	set suite variable  ${s3_ip}  ${tmp}
	${tmp}=  Rest Get Switch Ip Address  master  ${s4_alias}
	set suite variable  ${s4_ip}  ${tmp}

Suite Teardown
	Cli Copy  config://startup-config  running-config
	Base Suite Teardown

Test Setup
	Base Test Setup
	Cli Run  master  show run
	Cli Run  master  show switch
	Cli Run  slave  show switch
	Cli Copy  running-config  config://test-config
	Cli Copy  running-config  config://test-config  node=slave

Test Teardown
	Cli Copy  config://test-config  running-config
	Base Test Teardown

Verify Switch Handshake State
	[Arguments]  ${switch_alias}
	${state}=  Rest Get Switch Handshake State  master  ${switch_alias}
	Should Be Equal As Strings  master-state  ${state}
	${state}=  Rest Get Switch Handshake State  slave  ${switch_alias}
	Should Be Equal As Strings  slave-state  ${state}

Verify Switch Connection State
	[Arguments]  ${expected_state}  ${switch_alias}
	${connection_state}=  Rest Get Switch Connection State  master  ${switch_alias}
	Should Be Equal As Strings  ${expected_state}  ${connection_state}
	${connection_state}=  Rest Get Switch Connection State  slave  ${switch_alias}
	Should Be Equal As Strings  ${expected_state}  ${connection_state}

Verify Switch Fabric Connection State
	[Arguments]  ${expected_state}  ${switch_alias}
	${fabric_connection_state}=  Rest Get Switch Fabric Connection State  master  ${switch_alias}
	Should Be Equal As Strings  ${expected_state}  ${fabric_connection_state}
	${fabric_connection_state}=  Rest Get Switch Fabric Connection State  slave  ${switch_alias}
	Should Be Equal As Strings  ${expected_state}  ${fabric_connection_state}

Verify Switch Suspended Reason
	[Arguments]  ${expected_reason}  ${switch_alias}
	${suspended_reason}=  Rest Get Switch Suspended reason  master  ${switch_alias}
	Should Be Equal As Strings  ${expected_reason}  ${suspended_reason}
	${suspended_reason}=  Rest Get Switch Suspended reason  slave  ${switch_alias}
	Should Be Equal As Strings  ${expected_reason}  ${suspended_reason}

Verify Switch In Standby Mode
	[Arguments]  ${switch_alias}
	Verify Switch Handshake State  ${switch_alias}
	Verify Switch Connection State  True  ${switch_alias}
	Verify Switch Fabric Connection State  suspended  ${switch_alias}
	Verify Switch Suspended Reason  No fabric role configured  ${switch_alias}

Verify Switch In Provisioned Mode
	[Arguments]  ${switch_alias}
	Verify Switch Handshake State  ${switch_alias}
	Verify Switch Connection State  True  ${switch_alias}
	Verify Switch Fabric Connection State  connected  ${switch_alias}

Generate Random Name
	[Arguments]  ${prefix}  ${suffix_len}
	${regex}  Generate Random String  ${suffix_len}  [NUMBERS]
	${name}  Catenate  SEPARATOR=  ${prefix}  ${regex}
	[Return]  ${name}

Generate Random IP
	${oct1}  Generate Random String  2  [NUMBERS]
	${oct2}  Generate Random String  2  [NUMBERS]
	${oct3}  Generate Random String  2  [NUMBERS]
	${oct4}  Generate Random String  2  [NUMBERS]
	${ip}  Catenate  SEPARATOR=.  1${oct1}  1${oct2}  1${oct3}  1${oct4}
	[Return]  ${ip}

Generate Random GMT Timezone
	${digit}  Generate Random String  1  [NUMBERS]
	${timezone}  Catenate  SEPARATOR=  Etc/GMT+${digit}
	[Return]  ${timezone}

Randomize ZTN Configuration
	Cli Run  master  enable; config
	${contact_random}  Generate Random Name  contact  5
	Cli Run  master  snmp-server contact ${contact_random}
	${location_random}  Generate Random Name  location  5
	Cli Run  master  snmp-server location ${location_random}
	${community_random}  Generate Random Name  community  5
	Cli Run  master  snmp-server community ro ${community_random}
	${host_random}  Generate Random IP
	Cli Run  master  snmp-server host ${host_random}
	${host_random}  Generate Random IP
	Cli Run  master  ntp server ${host_random}
	#${timezone_random}  Generate Random GMT Timezone
	#Cli Run  master  ntp time-zone ${timezone_random}
	#${host_random}  Generate Random IP
	#${hostname_random}  Generate Random Name  hostname.tmk.  5
	Cli Run  master  logging enable remote
	Cli Run  master  logging remote 10.192.66.100

Reboot Provisioned Switch
	[Arguments]  ${switch_id}  ${switch_mac}  ${switch_alias}
	Telnet Reboot Switch  ${switch_id}
	Sleep  30
	Verify Switch Connection State  False  ${switch_alias}
	Verify Switch Fabric Connection State  not_connected  ${switch_alias}
	Telnet Wait For Switch To Reload  ${switch_id}
	Sleep  30
	Verify Switch In Provisioned Mode  ${switch_alias}
	Cli Run  master  show run
	Verify Switch Startup Config  ${switch_mac}  ${switch_alias}
	Verify Switch Running Config  ${switch_mac}  ${switch_alias}

Reboot Standby Switch
	[Arguments]  ${switch_id}  ${switch_mac}  ${switch_alias}
	Telnet Reboot Switch  ${switch_id}
	Sleep  30
	Verify Switch Connection State  False  ${switch_alias}
	Verify Switch Fabric Connection State  not_connected  ${switch_alias}
	Telnet Wait For Switch To Reload  ${switch_id}
	Sleep  30
	Verify Switch In Standby Mode  ${switch_alias}
	Cli Run  master  show run
	Verify Switch Startup Config  ${switch_mac}  ${switch_alias}
	Verify Switch Running Config  ${switch_mac}  ${switch_alias}


Verify Switch SWI Version
	[Arguments]  ${switch_alias}
	${swi_version_bundle}=  Bash Get Switchlight Version  swi
	${swi_version_switch}=  Telnet Get Switch Switchlight Version  swi  ${switch_alias}
	Should Be Equal As Strings  ${swi_version_bundle}  ${swi_version_switch}

Verify Switch Installer Version
	[Arguments]  ${switch_alias}
	${installer_version_bundle}=  Bash Get Switchlight Version  installer
	${installer_version_switch}=  Telnet Get Switch Switchlight Version  installer  ${switch_alias}
	Should Be Equal As Strings  ${installer_version_bundle}  ${installer_version_switch}

Failover
	${status}=  Rest Verify Cluster Election Take Leader
	Sleep  30
	Should Be True  ${status}

Reboot Switches
	#Telnet Reboot Switch  s1
	#Telnet Wait For Switch To Reload  s1

	Telnet Reboot Switch  s2
	Telnet Wait For Switch To Reload  s2

	Telnet Reboot Switch  s3
	Telnet Wait For Switch To Reload  s3

	Telnet Reboot Switch  s4
	Telnet Wait For Switch To Reload  s4

	Sleep  100

	Cli Run  master  show run
	#Verify Switch Running Config  ${s1_mac}  ${s1_alias}
	Verify Switch Running Config  ${s2_mac}  ${s2_alias}
	Verify Switch Running Config  ${s3_mac}  ${s3_alias}
	Verify Switch Running Config  ${s4_mac}  ${s4_alias}

	#Verify Switch Handshake State  ${s1_alias}
	Verify Switch Handshake State  ${s2_alias}
	Verify Switch Handshake State  ${s3_alias}
	Verify Switch Handshake State  ${s4_alias}
