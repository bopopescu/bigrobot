* Settings
Documentation   This suite is my sandbox for experimentation.
...              The purpose of this test suite is to check managing switches with ZTN. Small testbed will be used.
...
...              *Test topology*: pair of controllers, one spine switch, two leaf switches (Accton).
...
...              For tests which check correct installation of flows on the switches, simple forwarding configuration
...              and small traffic rate will be used.
...              Larger testbeds will be tested inherently in other testsuites.
...
...              In this Test Suite the following terms will be used:
...
...              * stand-by switch - switch configured on the controller (with MAC address) with no fabric-role specified
...
...              * provisioned switch - switch configured on the controller (with MAC address) with fabric role, forwarding traffic
...
...              * suspended switch - switch connected to fabric but not configured on the controller,
...                or running wrong version of Swith Light, or with incorrect running-config
...
...              * ztn-discovery mode - switch in the phase of booting/searching for ZTN servers with relevant manifest file
...
...              * ZTN configuration, which includes:
...
...                - configuration mirrored from controller's configuration to switches (NTP, Logging, SNMP)
...
...                - controllers' IP addresses
...
...                - per-switch hostname (as switch name on the controller)
...
...                - per-switch interface configuration (as assigned by DHCP server when switch booted)
...
...              * ZTN configuration change:
...
...                - any controller Cli change that affects the switch startup-config
...
...              * Switch mode change:
...
...                - any controller Cli change that affects the switch provisioning (fabric role, MAC)
Force Tags      Vui
Suite Setup     my base suite setup
Suite Teardown  base suite teardown
Test Setup      base test setup
Test Teardown   base test teardown
#Library         Reserve
Library         keywords/BsnCommon.py
Library         keywords_dev/vui/MyTest.py
Library         OperatingSystem
Library         Collections
Library         Dialogs
Resource        variables.txt

* Variables
${NAME}         "Vui Le"
${COUNTER}      100
#@{MYLIST}       [ a, b, c, d, e ]
@{MYLIST}       [ 1, 2, 3, 4, 5, 6, 7, "abc", xyz ]
${POLICY_BM0_IP}   None

* Test Cases
Test var assignment
    [Tags]           skipped
    variable assignment  ${123}

Test run keyword if
    [Tags]           skipped
    ${temp}=         set variable  ${123}
    ${result}=       run keyword if   ${temp} == 1234  mock_passed  ELSE  manual_passed
    log              temp=${temp}, result=${result}


Test process python dictionary
    [Tags]           skipped
    ${result}=       get a dictionary
    log              result=${result}
    process a dictionary  ${result}

Robot loop test
    [Tags]           skipped
    : for  ${index}  in range  1  3
    \  log  ${index}
    
Openstack user id
    [Tags]           skipped
    : for  ${index}  in range  1  5
    \  ${user}=  Set Variable  user${index}
    \  log  ${index}:${user}

Test dynamic string
    [Tags]           skipped
    json_to_pydict    {a:true, b:${123}, name:${NAME}}
    
Test expression
    [Tags]           skipped
    #[Tags]            smoke
    ${result1}=       expr  1 + 1 + ${COUNTER}
    ${result2}=       expr  10 / 2
    ${result3}=       expr  ${result1} + ${result2}
    log               Expression evaluated to result1=${result1}, result2=${result2}, result3=${result3}

Test evaluation
    [Tags]           skipped
    [Tags]            smoke
    ${result1}=       evaluate  1 + 1 + ${COUNTER}
    ${result2}=       evaluate  10 / 2
    ${result3}=       evaluate  ${result1} + ${result2}
    log               Expression evaluated to result1=${result1}, result2=${result2}, result3=${result3}

Test array variable
    [Tags]           skipped
    @{alist}=         create list  1  2  3  4  abc  yzx
    #log many          @{alist}
    #log               first entry = @{alist}[0]
    print value       @{alist}
    Log               ${NAME}=This is the input

Test write file
    [Tags]           skipped
    Append to File    /tmp/myoutput.txt  My name is ${NAME}.\n
    Append to File    /tmp/myoutput.txt  I work at BigSwitch.\n
    Append to File    /tmp/myoutput.txt  I'm also a woodworker.\n

Test special character passing
    [Tags]           skipped
    print value       abc|123
    print value       abc/123
    print value       abc\\123

Test boolean value
    [Tags]           skipped
    ${status}=        return boolean  ${true}
    log               Status=${status}
    Should be true    ${status}
    #Should be true    ${status} == ${false}

Test get time
    [Tags]           skipped
    ${time}=          get time
    log               Time is ${time}
    #log               LOGIN_URL = ${LOGIN_URL}

Test dict
    [Tags]           skipped
    ${value}=        return dict
    log              value=${value}
    log              value['abc']=${value['abc']}

Test create dict
    [Tags]           skipped
    ${value}=        create dictionary  abc  9999  xyz  1001
    log              value=${value}
    log              value['abc']=${value['abc']}

Test list
    [Tags]           skipped
    ${value}=        return list
    log              value=${value}
    log              value[3]=${value[3]}

Test create list
    [Tags]           skipped
    ${value}=        create list  abc  9999  xyz  1001
    summary log      value=${value}
    summary log      value[4]=${value[3]}

Test check list empty
    [Tags]           skipped
    ${value}=        return a list
    log              value=${value}
    Should not be true   ${value}

Test resource file
    [Tags]           skipped
    log              VALUE=${VALUE}

Test pause execution (GUI)
    [Tags]           skipped
    #pause execution  A brief moment of silence. Please press OK to continue.
    ${value}=         get value from user  Press OK to continue  OK
    log               value=${value}

Test pause execution (SHELL)
    [Tags]           skipped
    pause            Freeze!!!

Test Control-C
    [Tags]           skipped
    :for              ${count}    in    1    2    1   2   1
    \                 log         Sleep ${count}
    \                 sleep       ${count}
    log               Done with loop

Test return false
    [Tags]           skipped
    return false

Test empty string
    [Tags]           skipped
    #${value}=         set variable    ''
    ${value}=         set empty string
    Log               value=${value}
    should be true    '${value}' == ''

Test should contain x times
    [Tags]           skipped
    ${result}=        ping result
    Log               Result = ${result}
    Should contain X times    ${result}    bytes from 10.192.4.11    12    It's not a match!
    #Should contain X times    ${result}    bytes From 10.192.4.11    10
   
Test get a dict
    [Tags]           skipped
    ${result}=        return dict
    Log               Result = ${result['def']}
    Log               Result = ${result['def'][0]}
    Log               Result = ${result['def'][0]['second']}

Initialize policy vars
    [Tags]           skipped
    [Documentation]   T1.1
    ${temp}=                 create dictionary  cidr  10.10.11.11/32
    Set global variable      ${POLICY_BM0_IP}  ${temp}
    Should be true    ${true}

Display policy vars
    [Tags]           skipped
    [Tags]            sanity  feature
    [Documentation]   T1.2
    log               ${POLICY_BM0_IP}

Test run commands
    [Tags]            smoke  Sanity  FEATURE
    #[Tags]           skipped
    #manual-untested
    test run cmd
    [setup]           log  I am in my custom test case setup
    [teardown]        log  I am in my custom test case teardown


* Keywords
my base suite setup
    base suite setup
    #${c1_ip}            params  node=c1  key=ip
    #set suite variable  ${LOGIN_URL}  http://${c1_ip}:8086/api/login

variable assignment
    [Arguments]     ${input}
    Should be true  ${input} == 123
    ${temp}=        Set Variable  123${input}
    Should be true  ${temp} == 123123


