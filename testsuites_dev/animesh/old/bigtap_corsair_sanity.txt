*Settings
Documentation  Corsair Tunnelling Test Suite
Suite Setup  corsair suite setup
Suite Teardown   corsair suite teardown
Test Setup   base test setup
Test Teardown  base test teardown 
Force Tags   Corsair  BigTap  Sanity
Library  keywords/BsnCommon.py
Library  keywords/AppController.py
Library  keywords/BigTap.py
Library  keywords/SwitchLight.py
Library  keywords/Ixia.py

* Variable
${switch1_alias}                        scale-ac5710-1  #Alias for switch 1
${switch2_alias}                        scale-ac5710-2  #Alias for switch 2
${switch3_alias}                        scale-ac5710-3  #Alias for switch 2

### Ixia Based Filter/Delivery interfaces
${switch1_filter_intf}                  ethernet1       #filter interface on switch 1
${switch1_filter_alias}                 ixia-4-21       #Alias for filter interface on switch 1
${switch1_delivery_intf}                ethernet2       #Delivery interface on switch 1
${switch1_delivery_alias}               ixia-4-22       #Alias for delivery interface on switch 1

${switch2_delivery_intf}                ethernet1       #Delivery interface on switch 2
${switch2_delivery_alias}               ixia-4-24       #Alias for delivery interface on switch 2

${switch3_delivery_intf}                ethernet1       #Delivery interface on switch 2
${switch3_delivery_alias}               ixia-4-18       #Alias for delivery interface on switch 2


### Tunnel as a filter interface
${tunnel_sw1_name_filter}               tunnel1         #Tunnel Name
${tunnel_sw1_parent_intf_filter}        ethernet16      #Tunnel Parent Interface
${tunnel_sw1_sip_filter}                192.168.42.1    #Tunnel Source IP
${tunnel_sw1_dip_filter}                192.168.42.2    #Tunnel Destination IP
${tunnel_sw1_gip_filter}                192.168.42.2    #Tunnel Gateway IP
${tunnel_sw1_mask_filter}               255.255.255.0   #Tunnel Subnet Mask
${tunnel_sw1_filter_name}               tunnel_filter   #Tunnel Name when used as filter interface


### Tunnel as a core interface
${tunnel_sw1_name}                      tunnel2         #Tunnel Name
${tunnel_sw1_parent_intf}               ethernet18      #Tunnel Parent Interface
${tunnel_sw1_sip}                       192.168.29.1    #Tunnel Source IP
${tunnel_sw1_dip}                       192.168.22.1    #Tunnel Destination IP
${tunnel_sw1_gip}                       192.168.29.2    #Tunnel Gateway IP
${tunnel_sw1_mask}                      255.255.255.0   #Tunnel Subnet Mask
${extreme1_tunnel1_name}                tunnel2-1
${extreme1_tunnel1_intf1}               18
${extreme1_tunnel1_ip}                  192.168.29.2  
${extreme1_tunnel1_gw}                  255.255.255.0
${tunnel_loopback_1}                    ethernet41

${tunnel_sw2_name}                      tunnel2         #Tunnel Name
${tunnel_sw2_parent_intf}               ethernet19      #Tunnel Parent Interface
${tunnel_sw2_sip}                       192.168.22.1    #Tunnel Source IP
${tunnel_sw2_dip}                       192.168.29.1    #Tunnel Destination IP
${tunnel_sw2_gip}                       192.168.22.2    #Tunnel Gateway IP
${tunnel_sw2_mask}                      255.255.255.0   #Tunnel Subnet Mask
${extreme1_tunnel2_name}                tunnel2-2
${extreme1_tunnel2_intf1}               19
${extreme1_tunnel2_ip}                  192.168.22.2  
${extreme1_tunnel2_gw}                  255.255.255.0
${tunnel_loopback_2}                    ethernet41

### Tunnel as a delivery interface
${tunnel_sw3_name_delivery}             tunnel3         #Tunnel Name
${tunnel_sw3_parent_intf_delivery}      ethernet1       #Tunnel Parent Interface
${tunnel_sw3_sip_delivery}              192.168.30.1    #Tunnel Source IP
${tunnel_sw3_dip_delivery}              192.168.23.1    #Tunnel Destination IP
${tunnel_sw3_gip_delivery}              192.168.30.2    #Tunnel Gateway IP
${tunnel_sw3_mask_delivery}             255.255.255.0   #Tunnel Subnet Mask
${tunnel_sw3_delivery_name}             tunnel_delivery   #Tunnel Name when used as filter interface
${tunnel_loopback_3}                    ethernet41
### BigTap Policy Configuration
${policy_name}                          policy_tunnel_core      #Policy Name that will use the tunnel interface
${policy_name_filter}                   policy_tunnel_filter    #Policy Name that will use the tunnel interface
${policy_name_delivery}                 policy_tunnel_delivery  #Policy Name that will use the tunnel interface


${interswitch_link_1}                   port-channel1   #Link between Switch 2 and Switch 3
${interswitch_link_2}                   port-channel3   #Link between Switch 1 and Switch 3


*Test Case
Verify tunnel as a filter interface
    ## Verify tunnel is up
    ${verify_tun_sw1}=  rest verify tunnel status  s1  ${tunnel_sw1_name_filter}  tunnel_number=200  runtime_state=up  parent_interface=${tunnel_sw1_parent_intf_filter}  tunnel_direction=rx  sip=${tunnel_sw1_sip_filter}  dip=${tunnel_sw1_dip_filter}  mask=${tunnel_sw1_mask_filter}  gip=${tunnel_sw1_gip_filter}      
    Should be true  ${verify_tun_sw1}  
    sleep  10
    ## Verify BigTap policy is up
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_filter}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    [Tags]  feature  sanity

Verify tunnel as a core interface
    ## Verify tunnel is up
    ${verify_tun_sw1}=  rest verify tunnel status  s1  ${tunnel_sw1_name}  tunnel_number=201  runtime_state=up  parent_interface=${tunnel_sw1_parent_intf}  tunnel_direction=bidir  sip=${tunnel_sw1_sip}  dip=${tunnel_sw1_dip}  mask=${tunnel_sw1_mask}  gip=${tunnel_sw1_gip}      
    Should be true  ${verify_tun_sw1}  
    ${verify_tun_sw2}=  rest verify tunnel status  s2  ${tunnel_sw2_name}  tunnel_number=200  runtime_state=up  parent_interface=${tunnel_sw2_parent_intf}  tunnel_direction=bidir  sip=${tunnel_sw2_sip}  dip=${tunnel_sw2_dip}  mask=${tunnel_sw2_mask}  gip=${tunnel_sw2_gip}      
    Should be true  ${verify_tun_sw2}  
    sleep  10
    ## Verify BigTap policy is up
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    [Tags]    feature  sanity

Verify tunnel as a delivery interface
    ## Verify tunnel is up
    ${verify_tun_sw1}=  rest verify tunnel status  s3  ${tunnel_sw3_delivery_name}  tunnel_number=200  runtime_state=up  parent_interface=${tunnel_sw3_parent_intf_delivery}  tunnel_direction=tx  sip=${tunnel_sw3_sip_delivery}  dip=${tunnel_sw3_dip_delivery}  mask=${tunnel_sw3_mask_delivery}  gip=${tunnel_sw3_gip_delivery}      
    Should be true  ${verify_tun_sw1}  
    sleep  10
    ## Verify BigTap policy is up
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_delivery}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    [Tags]    feature  sanity

Verify L2 traffic across tunnel as a core interface
    ## Verify BigTap policy is up
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    ${stream}=  L2 add  flow=a->c  frame_rate=50000  frame_size=64  name=a_c_flow
    clear stats    
    start traffic  ${stream}
    sleep  10
    verify results  a  c  transmitted_frame_rate  received_valid_frame_rate    
    stop traffic  ${stream} 
    tunnel traffic teardown
    [Tags]  feature  sanity  L2  traffic  
    
Verify L2 VLAN tagged traffic across tunnel as a core interface
    ## Verify BigTap policy is up
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    #ixia initialize  tg1  init=true
    ${stream}=  L2 add  flow=a->c  frame_rate=50000  frame_size=1518  ethertype=8100  vlan_id=2048  name=a_c_flow
    clear stats    
    start traffic  ${stream}
    sleep  10
    verify results  a  c  transmitted_frame_rate  received_frame_rate    
    stop traffic  ${stream}
    tunnel traffic teardown
    [Tags]  feature  sanity  L2  traffic  
    
Verify L2 traffic (jumbo frames) across tunnel as a core interface
    ## Verify BigTap policy is up
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    #ixia initialize  tg1  init=true
    ${stream}=  L2 add  flow=a->c  frame_rate=10000  frame_size=9000  name=a_c_flow
    clear stats    
    start traffic  ${stream}
    sleep  40
    verify results  a  c  transmitted_frame_rate  received_frame_rate    
    stop traffic  ${stream}
    tunnel traffic teardown
    [Tags]  feature  sanity  L2  traffic    
    
Verify L3 traffic across tunnel as a core interface
    ## Verify BigTap policy is up
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    #ixia initialize  tg1  init=true
    ${stream}=  L3 add  flow=a->c  frame_rate=50000  frame_size=1518  
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=100.1.1.1  dst_ip=100.1.1.2  name=a_c_flow
    clear stats    
    start traffic  ${stream}
    sleep  10
    verify results  a  c  transmitted_frame_rate  received_frame_rate    
    stop traffic  ${stream}
    tunnel traffic teardown
    [Tags]  feature  sanity  L3  traffic   
 
Verify a rewrite vlan can be done on a tunnel interface
    ## Verify tunnel is up
    ${verify_tun_sw1}=  rest verify tunnel status  s1  ${tunnel_sw1_name_filter}  tunnel_number=200  runtime_state=up  parent_interface=${tunnel_sw1_parent_intf_filter}  tunnel_direction=rx  sip=${tunnel_sw1_sip_filter}  dip=${tunnel_sw1_dip_filter}  mask=${tunnel_sw1_mask_filter}  gip=${tunnel_sw1_gip_filter}      
    Should be true  ${verify_tun_sw1}  
    sleep  10
    rest add interface role  s1  ${tunnel_sw1_name_filter}  filter    intf_nickname=${tunnel_sw1_filter_name}  rewrite_vlan=1001
    sleep  20
    ${verify_tun_sw1}=  rest verify tunnel status  s1  ${tunnel_sw1_name_filter}  tunnel_number=200  runtime_state=up  parent_interface=${tunnel_sw1_parent_intf_filter}  tunnel_direction=rx  sip=${tunnel_sw1_sip_filter}  dip=${tunnel_sw1_dip_filter}  mask=${tunnel_sw1_mask_filter}  gip=${tunnel_sw1_gip_filter}      
    Should be true  ${verify_tun_sw1}            
    ## Verify BigTap policy is up
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name_filter}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    [Tags]  feature  sanity  run
    
Verify a rewrite vlan can be done on a filter interface, with core interface as tunnel interface
    ## Verify tunnel is up
    ${verify_tun_sw1}=  rest verify tunnel status  s1  ${tunnel_sw1_name}  tunnel_number=201  runtime_state=up  parent_interface=${tunnel_sw1_parent_intf}  tunnel_direction=bidir  sip=${tunnel_sw1_sip}  dip=${tunnel_sw1_dip}  mask=${tunnel_sw1_mask}  gip=${tunnel_sw1_gip}      
    Should be true  ${verify_tun_sw1}  
    ${verify_tun_sw2}=  rest verify tunnel status  s2  ${tunnel_sw2_name}  tunnel_number=200  runtime_state=up  parent_interface=${tunnel_sw2_parent_intf}  tunnel_direction=bidir  sip=${tunnel_sw2_sip}  dip=${tunnel_sw2_dip}  mask=${tunnel_sw2_mask}  gip=${tunnel_sw2_gip}      
    Should be true  ${verify_tun_sw2}  
    rest add interface role  s1  ${switch1_filter_intf}    filter    intf_nickname=${switch1_filter_alias}  rewrite_vlan=1002
    sleep  20
    ## Verify tunnel is up
    ${verify_tun_sw1}=  rest verify tunnel status  s1  ${tunnel_sw1_name}  tunnel_number=201  runtime_state=up  parent_interface=${tunnel_sw1_parent_intf}  tunnel_direction=bidir  sip=${tunnel_sw1_sip}  dip=${tunnel_sw1_dip}  mask=${tunnel_sw1_mask}  gip=${tunnel_sw1_gip}      
    Should be true  ${verify_tun_sw1}  
    ${verify_tun_sw2}=  rest verify tunnel status  s2  ${tunnel_sw2_name}  tunnel_number=200  runtime_state=up  parent_interface=${tunnel_sw2_parent_intf}  tunnel_direction=bidir  sip=${tunnel_sw2_sip}  dip=${tunnel_sw2_dip}  mask=${tunnel_sw2_mask}  gip=${tunnel_sw2_gip}      
    Should be true  ${verify_tun_sw2}  
    sleep  10
    ## Verify BigTap policy is up
    ${verify_policy1}=  rest verify bigtap policy  ${policy_name}  num_filter_intf=1  num_delivery_intf=1
    Should be true  ${verify_policy1}
    #ixia initialize  tg1  init=true
    ${stream}=  L3 add  flow=a->c  frame_rate=50000  frame_size=1518  
    ...     src_mac=00:02:03:04:05:06  dst_mac=00:02:03:04:05:07  no_arp=True
    ...     src_ip=100.1.1.1  dst_ip=100.1.1.2  name=a_c_flow
    clear stats    
    start traffic  ${stream}
    sleep  10
    verify results  a  c  transmitted_frame_rate  received_frame_rate    
    stop traffic  ${stream}
    tunnel traffic teardown                          
    [Tags]  feature  sanity  run

    
* Keyword

corsair suite setup
    base suite setup
    rest add switch alias  s1  ${switch1_alias}
    rest add switch alias  s2  ${switch2_alias}
    rest add switch alias  s3  ${switch3_alias}    
    #Disable interswitch links
    cli disable interface  s2  ${interswitch_link_1}
    #cli disable interface  s2  ${interswitch_link_2}
    #CRC packets to be dropped
    bash  s1  ofad-ctl crc enable
    bash  s2  ofad-ctl crc enable
    bash  s3  ofad-ctl crc enable    
    Sleep  10
    #### Tunnel as a filter interface
    ########Configure BigTap Controller with tunnel as filter interface
    ${verify_add_tun_sw1filter}=  rest add tunnel interface  s1  ${tunnel_sw1_name_filter}  pinterface=${tunnel_sw1_parent_intf_filter}  tdirection=rx  sip=${tunnel_sw1_sip_filter}  dip=${tunnel_sw1_dip_filter}  mask=${tunnel_sw1_mask_filter}  gip=${tunnel_sw1_gip_filter}
    Should be true  ${verify_add_tun_sw1filter}
    Sleep  5
    ########Configure BigTap Policy that will use Tunnel as a Filter interface
    rest add interface role  s1  ${tunnel_sw1_name_filter}  filter    intf_nickname=${tunnel_sw1_filter_name}
    rest add interface role  s1  ${switch1_delivery_intf}   delivery  intf_nickname=${switch1_delivery_alias}
    sleep  30
    rest add policy  admin-view  ${policy_name_filter}  forward
    rest add policy match  admin-view  ${policy_name_filter}  1  {"any-traffic": true, "sequence": 1}
    rest add policy interface  admin-view  ${policy_name_filter}  ${tunnel_sw1_filter_name}  filter
    rest add policy interface  admin-view  ${policy_name_filter}  ${switch1_delivery_alias}  delivery
    sleep  10
    #### Tunnel as a Core interface
    #########Configure the extreme switch here
    extreme tunnel setup  s4  ${extreme1_tunnel1_name}  ${extreme1_tunnel1_intf1}  ${extreme1_tunnel1_ip}  ${extreme1_tunnel1_gw}
    extreme tunnel setup  s4  ${extreme1_tunnel2_name}  ${extreme1_tunnel2_intf1}  ${extreme1_tunnel2_ip}  ${extreme1_tunnel2_gw}          
    Sleep  20
    ########Configure BigTap Controller with tunnel as core interface
    ${verify_add_tun_sw1}=  rest add tunnel interface  s1  ${tunnel_sw1_name}  loopback=${tunnel_loopback_1}  pinterface=${tunnel_sw1_parent_intf}  tdirection=bidir  sip=${tunnel_sw1_sip}  dip=${tunnel_sw1_dip}  mask=${tunnel_sw1_mask}  gip=${tunnel_sw1_gip}
    Should be true  ${verify_add_tun_sw1}        
    ${verify_add_tun_sw2}=  rest add tunnel interface  s2  ${tunnel_sw2_name}  loopback=${tunnel_loopback_2}  pinterface=${tunnel_sw2_parent_intf}  tdirection=bidir  sip=${tunnel_sw2_sip}  dip=${tunnel_sw2_dip}  mask=${tunnel_sw2_mask}  gip=${tunnel_sw2_gip}   
    Should be true  ${verify_add_tun_sw2}  
    Sleep  20
    ########Configure BigTap Policy that will use Tunnel as a core interface
    rest add interface role  s1  ${switch1_filter_intf}    filter    intf_nickname=${switch1_filter_alias}
    rest add interface role  s2  ${switch2_delivery_intf}  delivery  intf_nickname=${switch2_delivery_alias}          
    Sleep  2
    rest add policy  admin-view  ${policy_name}  forward
    rest add policy match  admin-view  ${policy_name}  1  {"any-traffic": true, "sequence": 1}
    rest add policy interface  admin-view  ${policy_name}  ${switch1_filter_alias}  filter
    rest add policy interface  admin-view  ${policy_name}  ${switch2_delivery_alias}  delivery
    Sleep  10
    #### Tunnel as a delivery interface        
    ########Configure BigTap Controller with tunnel as delivery interface
    ${verify_add_tun_sw1delivery}=  rest add tunnel interface  s3  ${tunnel_sw3_name_delivery}  loopback=${tunnel_loopback_3}  pinterface=${tunnel_sw3_parent_intf_delivery}  tdirection=tx  sip=${tunnel_sw3_sip_delivery}  dip=${tunnel_sw3_dip_delivery}  mask=${tunnel_sw3_mask_delivery}  gip=${tunnel_sw3_gip_delivery}
    Should be true  ${verify_add_tun_sw1delivery}
    Sleep  5
    ${H1}=  L3 add host  src_ip=${tunnel_sw3_gip_delivery}  gw_ip=${tunnel_sw3_sip_delivery}  port_name=d
    L3 start hosts  port_name=d
    ${result}=  L3 chk gw arp
    should be true  ${result}
    sleep  30    
    ########Configure BigTap Policy that will use Tunnel as a delivery interface
    rest add interface role  s1  ${switch1_filter_intf}        filter    intf_nickname=${switch1_filter_alias}
    rest add interface role  s3  ${tunnel_sw3_name_delivery}  delivery  intf_nickname=${tunnel_sw3_delivery_name}
    sleep  10
    rest add policy  admin-view  ${policy_name_delivery}  forward
    rest add policy match  admin-view  ${policy_name_delivery}  1  {"any-traffic": true, "sequence": 1}
    rest add policy interface  admin-view  ${policy_name_delivery}  ${switch1_filter_alias}  filter
    rest add policy interface  admin-view  ${policy_name_delivery}  ${tunnel_sw3_delivery_name}  delivery
    sleep  10

extreme tunnel setup   [Arguments]  ${node}  ${tunnel_name}  ${tunnel_port}  ${tunnel_address}  ${tunnel_mask}
    config  ${node}  create vlan ${tunnel_name}
    config  ${node}  configure vlan ${tunnel_name} add ports ${tunnel_port} untagged
    config  ${node}  configure vlan ${tunnel_name} ipaddress ${tunnel_address} ${tunnel_mask}
    config  ${node}  enable ipforwarding vlan ${tunnel_name}
    config  ${node}  configure ip-mtu 9194 vlan ${tunnel_name} 
    extreme save config  ${node}

tunnel traffic teardown
    delete traffic
    sleep  2

tunnel teardown
    ${verify_del_tun_sw1}=  rest delete tunnel interface  node=s1  tunnel_name=${tunnel_sw1_name}  
    Should be true  ${verify_del_tun_sw1}    
    ${verify_del_tun_sw2}=  rest delete tunnel interface  node=s2  tunnel_name=${tunnel_sw2_name}  
    Should be true  ${verify_del_tun_sw2}
    ${verify_del_tun_sw1}=  rest delete tunnel interface  node=s1  tunnel_name=${tunnel_sw1_name_filter}  
    Should be true  ${verify_del_tun_sw1}    
    ${verify_del_tun_sw3}=  rest delete tunnel interface  node=s3  tunnel_name=${tunnel_sw3_name_delivery}  
    Should be true  ${verify_del_tun_sw3}          
    Sleep  2

verify results   [Arguments]  ${send_port}  ${recv_port}  ${transmitted_frames}  ${received_valid_frames}
    Sleep  5
    ${report}=  fetch port stats
    ${tx_value}=  verify dict key  ${report}  ${send_port}  ${transmitted_frames}
    ${rx_value}=  verify dict key  ${report}  ${recv_port}  ${received_valid_frames}
    ${in_range}=  ixia verify traffic rate  ${tx_value}  ${rx_value}
    Should be true  ${in_range}



corsair suite teardown
    tunnel teardown
    REST delete policy  admin-view  ${policy_name}
    REST delete policy  admin-view  ${policy_name_filter}
    REST delete policy  admin-view  ${policy_name_delivery}        
    rest delete interface role  s1  ${switch1_filter_intf}       filter 
    rest delete interface role  s1  ${switch1_delivery_intf}       delivery              
    rest delete interface role  s2  ${switch2_delivery_intf}     delivery
    rest delete interface role  s1  ${tunnel_sw1_name_filter}    filter 
    rest delete interface role  s3  ${tunnel_sw3_name_delivery}  delivery         
    rest delete interface  s1  ${switch1_filter_intf}          
    rest delete interface  s1  ${switch1_delivery_intf}          
    rest delete interface  s2  ${switch2_delivery_intf}        
    rest delete switch alias  s1
    rest delete switch alias  s2
    rest delete switch  s1
    rest delete switch  s2
    rest delete switch  s3
    config  s4  delete vlan ${extreme1_tunnel1_name}
    config  s4  delete vlan ${extreme1_tunnel2_name}
    Sleep  2
    extreme save config  s4
    base suite teardown                                            
    