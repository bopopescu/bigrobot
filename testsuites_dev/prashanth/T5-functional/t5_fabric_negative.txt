== T5 Fabric Traffic Failover Test ==

*Settings
Documentation    Fabric Failover Test using Three Rack Dual Spine
Suite Setup      base suite setup
Suite Teardown   base suite teardown
Test Setup       base test setup
Test Teardown    T5 test teardown
Force Tags       T5 
Library          keywords/BsnCommon.py
Library          keywords/T5.py
Library          keywords/T5Platform.py
Library			 keywords/SwitchLight.py
Library			 keywords/Ixia.py
Library			 keywords/Host.py
Resource         testsuites/T5/t5_dualleaf_three_rack_physical_resource.txt
Resource         testsuites/T5/t5_physical_variables.txt

*Test Case

Setup Three Rack Dual Leaf Topology
	base suite setup  
    add fabric switch
    sleep  5
    rest verify fabric switch all
	rest verify fabric link 	

With 2k mac entries , Remove the Leaf switch and Readd the leaf switch
    [Tags]  feature  Manual  tested  
    rest add tenant  t1
    rest add vns  t1  v1
    rest add interface to vns  t1  v1  leaf0-a  ${leaf0a_ixia_intf}  -1
    rest add interface to vns  t1  v1  leaf1-a  ${leaf1a_ixia_intf}  -1
    ${stream}=             L3 add  flow=a<->e  src_mac=00:00:01:00:00:01  dst_mac=00:00:02:00:00:01  src_cnt=1000  dst_cnt=1000  frame_rate=1000  frame_size=68  name=a_c_flow
    start traffic  ${stream}
    sleep  100
    rest verify endpoint in vns  v1  2000
    verify traffic rate  tx_rate  rx_rate  a  e
    verify traffic rate  tx_rate  rx_rate  e  a
    rest delete fabric switch  leaf0-a
    rest verify endpoint in vns  v1  1000
    rest add switch  leaf0-a
    rest add dpid  leaf0-a  ${leaf0a_dpid}
    rest add fabric role  leaf0-a  leaf
    rest add leaf group  leaf0-a  rack0
    sleep  3
    rest verify fabric switch role  ${leaf0a_dpid}  leaf
    rest verify fabric link
    rest verify forwarding vlan fabric tag members  leaf0-a
    sleep  50
    verify traffic rate  tx_rate  rx_rate  a  e
    verify traffic rate  tx_rate  rx_rate  e  a
    rest verify endpoint in vns  v1  2000
    stop traffic  ${stream}
    rest delete tenant  t1               
     
shutdown the switch and check the links are down in the switch
	[Tags]  feature  Manual  untested
	rest add tenant  t1
	rest add vns  t1  v1
	rest add portgroup  p4 
    rest add interface to portgroup  leaf1-a  ${h4_intf0}  p4
    rest add interface to portgroup  leaf1-b  ${h4_intf1}  p4
    rest add portgroup lacp  p4  
    rest add portgroup  p5 
    rest add interface to portgroup  leaf2-a  ${h5_intf0}  p5
    rest add interface to portgroup  leaf2-b  ${h5_intf1}  p5
    rest add portgroup lacp  p5
    rest add portgroup to vns  t1  v1  p4  -1
    rest add portgroup to vns  t1  v1  p5  -1
    sleep  3
    rest verify fabric interface lacp  leaf1-a  ${h4_intf0}
    rest verify fabric interface lacp  leaf2-a  ${h5_intf0}  
    ${loss}=  bash ping  h5  ${h4_ip}  source_if=bond0
    Should Be True  ${loss} == 0
    rest add shutdown to fabric switch  leaf2-a   
    sleep  2
    ${result}=  rest cli show interface state  leaf2-a  ${h5_intf0}
    Should not be True  ${result}   
    ${loss}=  bash ping  h5  ${h4_ip}  source_if=bond0
    Should Be True  ${loss} == 0
    rest delete shutdown from fabric switch  leaf2-a
    sleep  3
    ${result}=  rest cli show interface state  leaf2-a  ${h5_intf0}
    Should be True  ${result}
    ${loss}=  bash ping  h5  ${h4_ip}  source_if=bond0
    Should Be True  ${loss} == 0
   rest delete interface from portgroup  leaf1-a  ${h4_intf0}  p4
   rest delete interface from portgroup  leaf1-b  ${h4_intf1}  p4
   rest delete interface from portgroup  leaf2-a  ${h5_intf0}  p5
   rest delete interface from portgroup  leaf2-b  ${h5_intf1}  p5
   rest delete portgroup  p4
   rest delete portgroup  p5
   rest delete tenant  t1 
     
verify interface cli 
	[Tags]  feature
	${result}=  cli  c1   show interface  
	Should Not be Empty  ${result}
	${result}=  cli  c1  show interface ${leaf0a_spine0_intf0}
	Should Not be Empty  ${result}
		
verify lag cli
	[Tags]  feature
	${result}=  cli  c1  show lag  
	Should Not be Empty  ${result}
    ${result}=  cli  c1   show lag switch leaf0-a  
	Should Not be Empty  ${result}	

verify switch cli
	[Tags]  feature
	${result}=  cli  c1  show switch  
	Should Not be Empty  ${result}
	${result}=  cli  c1  show switch leaf0-a
	Should Not be Empty  ${result}
	${result}=  cli  c1  show switch leaf0-a interface ${leaf0a_spine0_intf0} 
	Should Not be Empty  ${result}
	
verify lacp cli
	[Tags]  feature
	rest add tenant  t1
	rest add vns  t1  v1
	rest add portgroup  p4 
    rest add interface to portgroup  leaf1-a  ${h4_intf0}  p4
    rest add interface to portgroup  leaf1-b  ${h4_intf1}  p4
    rest add portgroup lacp  p4  
    sleep  3
	${result}=  cli  c1  show lacp  
	Should Not be Empty  ${result}
	${result}=  cli  c1  show lacp switch leaf0-a
	Should Not be Empty  ${result}
	${result}=  cli  c1  show lacp switch leaf0-a interface ${h4_intf0} 
	Should Not be Empty  ${result}
	
verify link cli
	[Tags]  feature
	${result}=  cli  c1  show link  
	Should Not be Empty  ${result}

verify lag any_leaf cli
	[Tags]  feature
	${result}=  cli  c1  show lag switch spine0 any_leaf 
	Should Not be Empty  ${result}
	
Test forwarding entry when the switch falls below 50% spine links
	[Tags]  feature  Manual  untested
	verify fabric link
	rest delete fabric switch

Changes to existing fabric configuration
	[Tags]  feature  Manual  untested

When the controller disconnect from the switch , verify LLDP packets are indeed processed in the pswitch
	[Tags]  feature  Manual  tested
	bash delete controller  leaf0-a  c1
	bash delete controller  leaf0-a  c2
	bash show debug ofad
	
Tear down config and Topology
    delete fabric switch  
    rest delete portgroup  p4
    rest delete portgroup  p6
    rest delete tenant  t1
    rest delete tenant  t2
    base suite teardown
 

* Keywords  
	
verify traffic rate   [Arguments]  ${tx_rate}  ${rx_rate}  ${tx_intf}  ${rx_intf}
    Sleep  5
    ${report}=  fetch port stats
    Log  ${report}
    ${tx_value}=  verify dict key  ${report}  ${tx_intf}  transmitted_frame_rate
    ${rx_value}=  verify dict key  ${report}  ${rx_intf}  received_valid_frame_rate
    ixia verify traffic rate  ${tx_value}  ${rx_value}
    
verify traffic rate negative   [Arguments]  ${tx_rate}  ${rx_rate}  ${tx_intf}  ${rx_intf}
    Sleep  5
    ${report}=  fetch port stats
    ${tx_value}=  verify dict key  ${report}  ${tx_intf}  transmitted_frame_rate
    ${rx_value}=  verify dict key  ${report}  ${rx_intf}  received_valid_frame_rate
    Should Not be equal  ${tx_value}  ${rx_value}
    
T5 test teardown
	delete traffic

