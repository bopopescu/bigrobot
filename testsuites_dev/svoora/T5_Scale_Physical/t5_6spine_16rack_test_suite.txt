== T5 Scale Test Suite ==

* Setting
Documentation    T5 Scale Test Suite
Library			 keywords_dev/svoora/T5_Scale.py
Suite Setup     test setup topology
Suite Teardown  test teardown topology
Test Setup      base test setup
Test Teardown   test teardown
Force Tags      IronHorse  T5  Scale
Library         keywords/BsnCommon.py
Library         keywords/Host.py
Library         keywords/T5.py
Library         keywords/T5L3.py
Library         keywords/T5Platform.py
Library         keywords/SwitchLight.py
Library         keywords/T5Utilities.py
Library         keywords/BsnCommon.py
Library         Collections.py
Library         keywords/Ixia.py
Library         keywords/T5ZTN.py
#Resource        testsuites_dev/svoora/T5_policy_physical/t5_policy_physical_inter_variables.txt
Library         OperatingSystem
Library         Collections
Library         Dialogs


#Documentation   T5 Scale - Iron Horse
#...             export BIGROBOT_SUITE=t5_6spine_16rack_test_suite.txt
#...             Section A: Build a Scale configuration file
#...             Section B: Configure master/slave controllers in one cluster
#				Section C: Copy Scale Configuration file to Controller master
#					Topology:
#						6 spines, 16 rack (dual leaf)
#						All leafs have 40G uplinks to spines
#						Ixia and big-tap be used for traffic testing
#					Scale Config: 
#						1022/1023 user Tenants? (+ 1 system tenant vrf-0 + 1 external vrf-1 ? = 1024)
#						4088/4092 user VNS (4 VNS/ tenant, 0x001 and 0xfff  is reserved, 0x000 is not allowed =  4091/4095. Each Ixia ports will have 4k vlan configured)	
#						4088/4092 IP subnets (one per VNS subject to above limits)
#						All VNS will be applied across all leaf nodes including service rack
#						48K L3 host  for intra-tenant routing
#						48K L2 host 
#						16K CIDR routes ? (tables might be used for inter-tenant routing)
#						3K policy rules per leaf switches
#						ARP 2k per sec per switch
#					Performance:
#						Controller PACKET-IN 100k per second
#						No DHCP relay configured. No overlapping subnet.
#						MAC learning rate 2000 per sec for controller, and 200 per switch?
#					Gneralnote:
#						All testcases will be run with L2/L3 and external traffic
#						Will monitor and take snapshot of memory/cpu utilization on both controllers/switches
#						Monitor java exceptions
#						Traffic convergence time periods 


* Variables
${cfg1_file_path}		/home/svoora/16R-scale-48k-ep-144k-mem-3k-policy.snp
${copied_file1}         16R-scale-48k-ep-144k-mem-3k-policy.snp
${cfg2_file_path}       /home/svoora/16R-scale-48k-ep.snp
${copied_file2}         16R-scale-48k-ep.snp
${cfg3_file_path}       /home/svoora/1ktenant_4ksegment-6kpolicy.snp
${copied_file3}         1ktenant_4ksegment-6kpolicy.snp
${empty_cfg_file_path}       /home/svoora/scale_empty.snp
${cfg_file_server}		10.8.22.2
${file_server_passwd}	bsn
${monitor_file}			exception_file.log
${image}      bsn@jenkins.eng.bigswitch.com:/var/lib/jenkins/jobs/bcf_master/lastSuccessful/archive/controller-*.pkg
${spine}        s33
${leaf}         s7
${spine-interface}      ethernet14
${leaf-interface}       ethernet49
${leaf-name}            leaf3a-7011
${spine-name}           spine0
${leaf-not-in-traffic}      s1
${leaf-not-in-traffic-name}     leaf0a-7005
${max_timeout}      4 min  
${poll_interval}        25 sec
${min_poll_interval}     2 sec
* Test Case 

copy config file to controller
	[Tags]  T1 
	#manual passed
	Log To console  Getting config file server
	copy config from server to snapshot   ${cfg3_file_path}  ${cfg_file_server}  ${file_server_passwd}  ${copied_file3} 
	verify file  ${copied_file3}
	Log To Console  Verifiing cluster formation
	${returnVal}=  rest verify show cluster
	Should Be True  ${returnVal}
	
config controller with copied config file
	[Tags]  T2 
	#manual passed   
	Log To console  Copying file to running-config
	start monitoring the exception
	${file_exist}=  verify file  ${copied_file3}
	Should Be True  ${file_exist}
	${return}=  cli copy file to running config  ${copied_file3}	
	Should Be True  ${return}
	sleep  180
	stop monitoring the exception
	parse monitoring file
	${return}=  rest verify sync state
    Should Be True  ${return}
    ${return}=  rest verify debug coordinator
    Should Be True  ${return}
    ${return}=  rest verify disk usage
    Should Be True  ${return}
    verify fabric switch link and errors
    reconnect switch ips   ${leaf}
    ${l2_table}=  get L2 table count  ${leaf}
    Should be true  ${l2_table} < 200
    ${l3_table}=  get L3 table count  ${leaf}
    Should be true  ${l3_table} < 1
    ${acl_table}=  get ACL table count  ${leaf}
    Should be true  ${acl_table} == 3001
    
    
    
	
verify config sync between controllers
	[Tags]  T3
	#manual passed   
	#Log To Console  Verifying configuration between controllers
	${return}=  rest verify debug coordinator
	Should Be True  ${return}
		

verify disk usage in controllers
    [Tags]  T4
    #manual passed   
    #Log To Console  Verifying configuration between controllers
    ${return}=  rest verify disk usage
    Should Be True  ${return}
        
	

Create L2 devices in ixia
    [Tags]   T5L2   traffic
    reconnect switch ips   ${leaf}
    ${return}=  rest verify sync state
    Should Be True  ${return}
    create L2 streams
    clear stats
    apply traffic
    start traffic
    ${time_traffic_start}   Get time
    #pause    FREEZZEEE!!!
    #sleep  40   #MAC learning time, and sleep time, we can change
    #pause    freee!!
    Wait Until Keyword Succeeds  ${max_timeout}  ${min_poll_interval}  verify mac learning rate
    ${time_mac_learning_done}  Get time
    ${time_diff}   print diff   ${time_traffic_started}   ${time_mac_learning_done}
    Log to console    :
    Log to console    Mac Learning rate is
    Log to console    ${time_diff}
    ${ep_count}=  rest get active end point count
    Should be true  ${ep_count} >= 48000
    #pause   FREEZZEEE!!!!
    ${l2_table}=  get L2 table count  ${leaf}
    Should be true  ${l2_table} >= 48000
    stop traffic
    clear stats
    start traffic
    sleep  25
    #pause   freeezz!!!
    stop traffic
    print L2 packet_loss_duration
        

    
    
Create L3 devices in ixia
    [Tags]   T5L3   traffic
    reconnect switch ips   ${leaf}
    ${return}=  rest verify sync state
    Should Be True  ${return}
    create L3 streams
    ${time_arp_start}    Get time
    L3 start hosts    RetransmitInterval=10000   RetransmitCount=10    arp_check=False
    #sleep  120   #Sleeping for 100 seconds for the ARP to complete for 46K end points
    #pause       FREEZZEEE!!!
    Wait Until Keyword Succeeds  ${max_timeout}  ${min_poll_interval}  verify arp learning rate   ${leaf}
    ${time_arp_done}   Get time
    ${time_diff}    print diff   ${time_arp_start}    ${time_arp_done}
    Log to console    :
    Log to console    46K ARP resolved in:
    Log to console    ${time_diff}
    
    

Controller HA failover with L2 traffic
    [Tags]  HA1  loss
    create L2 streams
    clear stats
    apply traffic
    start traffic
    sleep  25
    stop traffic
    sleep  5
    clear stats
    start traffic
    start monitoring exception during failover
    cli cluster take leader
    stop monitoring the exception
    parse monitoring file
    ${return}=  rest verify debug coordinator
    Should Be True  ${return}
    ${return}=  rest verify disk usage
    Should Be True  ${return}
    ${return}=  rest verify sync state
    Should Be True  ${return}
    verify fabric switch link and errors
    sleep  15
    stop traffic
    print L2 packet_loss_duration
    reconnect switch ips   ${leaf}
    ${l2_table}=  get L2 table count  ${leaf}
    Should be true  ${l2_table} >= 48000
    #${l3_table}=  get L3 table count  ${leaf}
    #Should be true  ${l3_table} >= 45000
    ${acl_table}=  get ACL table count  ${leaf}
    Should be true  ${acl_table} == 3001
    
    
Controller Master reboot    
    [Tags]  HA2  loss
    create L2 streams
    clear stats
    apply traffic
    start traffic
    sleep  25
    stop traffic
    sleep  5
    clear stats
    start traffic
    start monitoring exception during reboot
    ${returnVal}=  cli verify cluster master reboot
    Should Be True  ${returnVal}
    sleep  10
    stop monitoring the exception
    parse monitoring file
    ${return}=  rest verify debug coordinator
    Should Be True  ${return}
    ${return}=  rest verify disk usage
    Should Be True  ${return}
    verify fabric switch link and errors
    ${return}=  rest verify sync state
    Should Be True  ${return}
    sleep  5
    stop traffic
    print L2 packet_loss_duration
    reconnect switch ips   ${leaf}
    ${l2_table}=  get L2 table count  ${leaf}
    Should be true  ${l2_table} >= 48000
    #${l3_table}=  get L3 table count  ${leaf}
    #Should be true  ${l3_table} >= 45000
    ${acl_table}=  get ACL table count  ${leaf}
    Should be true  ${acl_table} == 3001
    

Controller Slave Reboot
    [Tags]  HA3  loss
    create L2 streams
    clear stats
    apply traffic
    start traffic
    sleep  25
    stop traffic
    sleep  5
    clear stats
    start traffic
    start monitoring exception during reboot
    ${returnVal}=  cli verify cluster slave reboot
    Should Be True  ${returnVal}
    stop monitoring the exception
    parse monitoring file
    ${return}=  rest verify debug coordinator
    Should Be True  ${return}
    ${return}=  rest verify disk usage
    Should Be True  ${return}
    verify fabric switch link and errors
    ${return}=  rest verify sync state
    Should Be True  ${return}
    sleep  5
    stop traffic
    verify L2 packet_loss_duration
    reconnect switch ips   ${leaf}
    ${l2_table}=  get L2 table count  ${leaf}
    Should be true  ${l2_table} >= 48000
    #${l3_table}=  get L3 table count  ${leaf}
    #Should be true  ${l3_table} >= 45000
    ${acl_table}=  get ACL table count  ${leaf}
    Should be true  ${acl_table} == 3001
    

Power off/On Master Controller
    [Tags]  HA4  loss
    create L2 streams
    clear stats
    apply traffic
    start traffic
    sleep  25
    stop traffic
    sleep  5
    clear stats
    start traffic
    {active}=  get node name   master
    power down switch  {active}
    sleep  5
    power up switch  ${active}
    sleep  180
    
    ${return}=  rest verify debug coordinator
    Should Be True  ${return}
    ${return}=  rest verify disk usage
    Should Be True  ${return}
    verify fabric switch link and errors
    ${return}=  rest verify sync state
    Should Be True  ${return}
    stop traffic
    print L2 packet_loss_duration
    reconnect switch ips   ${leaf}
    ${l2_table}=  get L2 table count  ${leaf}
    Should be true  ${l2_table} >= 48000
    #${l3_table}=  get L3 table count  ${leaf}
    #Should be true  ${l3_table} >= 45000
    ${acl_table}=  get ACL table count  ${leaf}
    Should be true  ${acl_table} == 3001
    


Power off/On Slave Controller
    [Tags]  HA5  loss
    create L2 streams
    clear stats
    apply traffic
    start traffic
    sleep  25
    stop traffic
    sleep  5
    clear stats
    start traffic
    {slave}=  get node name   slave
    power down switch  {slave}
    sleep  5
    power up switch  ${slave}
    sleep  180
    
    ${return}=  rest verify debug coordinator
    Should Be True  ${return}
    ${return}=  rest verify disk usage
    Should Be True  ${return}
    verify fabric switch link and errors
    ${return}=  rest verify sync state
    Should Be True  ${return}
    stop traffic
    print L2 packet_loss_duration
    reconnect switch ips   ${leaf}
    ${l2_table}=  get L2 table count  ${leaf}
    Should be true  ${l2_table} >= 48000
    #${l3_table}=  get L3 table count  ${leaf}
    #Should be true  ${l3_table} >= 45000
    ${acl_table}=  get ACL table count  ${leaf}
    Should be true  ${acl_table} == 3001
    

Reboot all switches
    [Tags]   HA6
    Reboot all switches
    sleep   180
    verify fabric switch link and errors
    ${return}=  rest verify sync state
    Should Be True  ${return}
    reconnect switch ips   ${leaf}
    ${l2_table}=  get L2 table count  ${leaf}
    Should be true  ${l2_table} < 200
    ${l3_table}=  get L3 table count  ${leaf}
    Should be true  ${l3_table} < 1
    ${acl_table}=  get ACL table count  ${leaf}
    Should be true  ${acl_table} == 3001
    
    create L2 streams
    clear stats
    apply traffic
    start traffic
    sleep  25
    verify mac learning rate
    ${ep_count}=  rest get active end point count
    Should be true  ${ep_count} >= 48000
    #pause   FREEZZEEE!!!!
    ${l2_table}=  get L2 table count  ${leaf}
    Should be true  ${l2_table} >= 48000
    stop traffic
    sleep  5
    clear stats
    apply traffic
    start traffic
    #pause    FREEZZEEE!!!
    sleep  25   #MAC learning time, and sleep time, we can change
    stop traffic
    print L2 packet_loss_duration
    
    

Reboot spine print traffic convergence time   
    [Tags]   con  loss
    reconnect switch ips   ${spine}
    create L2 streams
    clear stats
    apply traffic
    start traffic
    #pause    FREEZZEEE!!!
    sleep  25   #MAC learning time, and sleep time, we can change
    verify mac learning rate
    ${ep_count}=  rest get active end point count
    Should be true  ${ep_count} >= 48000
    #pause   FREEZZEEE!!!!
    ${l2_table}=  get L2 table count  ${spine}
    Should be true  ${l2_table} >= 48000
    stop traffic
    clear stats
    start traffic
    power cycle switch   ${spine}
    sleep   210
    verify fabric switch link and errors
    ${return}=  rest verify sync state
    Should Be True  ${return}
    stop traffic
    print L2 packet_loss_duration
    

PowerOff spine print traffic convergence time   
    [Tags]   con1  loss
    reconnect switch ips   ${spine}
    reconnect switch ips   ${leaf}
    ${return}=  rest verify sync state
    Should Be True  ${return}
    create L2 streams
    clear stats
    apply traffic
    start traffic
    #pause    FREEZZEEE!!!
    sleep  25   #MAC learning time, and sleep time, we can change
    verify mac learning rate
    ${ep_count}=  rest get active end point count
    Should be true  ${ep_count} >= 48000
    #pause   FREEZZEEE!!!!
    ${l2_table}=  get L2 table count  ${spine}
    Should be true  ${l2_table} >= 48000
    stop traffic
    clear stats
    start traffic
    power down switch   ${spine}
    sleep   20
    #verify fabric switch link and errors
    stop traffic
    print L2 packet_loss_duration
    power up switch   ${spine}
    sleep  120

PowerOn spine print traffic convergence time   
    [Tags]   con2  loss
    reconnect switch ips   ${spine}
    reconnect switch ips   ${leaf}
    ${return}=  rest verify sync state
    Should Be True  ${return}
    power down switch    ${spine}
    sleep  15
    create L2 streams
    clear stats
    apply traffic
    start traffic
    #pause    FREEZZEEE!!!
    sleep  25   #MAC learning time, and sleep time, we can change
    verify mac learning rate
    ${ep_count}=  rest get active end point count
    Should be true  ${ep_count} >= 48000
    #pause   FREEZZEEE!!!!
    ${l2_table}=  get L2 table count  ${leaf}
    Should be true  ${l2_table} >= 48000
    stop traffic
    clear stats
    start traffic
    power up switch   ${spine}
    sleep   210
    verify fabric switch link and errors
    ${return}=  rest verify sync state
    Should Be True  ${return}
    stop traffic
    print L2 packet_loss_duration


Reboot leaf print traffic convergence time   
    [Tags]   con3  loss
    reconnect switch ips   ${leaf-not-in-traffic}
    reconnect switch ips   ${leaf}
    create L2 streams
    clear stats
    apply traffic
    start traffic
    #pause    FREEZZEEE!!!
    sleep  25   #MAC learning time, and sleep time, we can change
    verify mac learning rate
    ${ep_count}=  rest get active end point count
    Should be true  ${ep_count} >= 48000
    #pause   FREEZZEEE!!!!
    ${l2_table}=  get L2 table count  ${leaf}
    Should be true  ${l2_table} >= 48000
    stop traffic
    clear stats
    start traffic
    power cycle switch   ${leaf-not-in-traffic}
    sleep   280
    verify fabric switch link and errors
    ${return}=  rest verify sync state
    Should Be True  ${return}
    stop traffic
    print L2 packet_loss_duration

PowerOff leaf print traffic convergence time   
    [Tags]   con4  loss
    reconnect switch ips   ${leaf-not-in-traffic}
    reconnect switch ips   ${leaf}
    ${return}=  rest verify sync state
    Should Be True  ${return}
    create L2 streams
    clear stats
    apply traffic
    start traffic
    #pause    FREEZZEEE!!!
    sleep  25   #MAC learning time, and sleep time, we can change
    verify mac learning rate
    ${ep_count}=  rest get active end point count
    Should be true  ${ep_count} >= 48000
    #pause   FREEZZEEE!!!!
    ${l2_table}=  get L2 table count  ${leaf}
    Should be true  ${l2_table} >= 48000
    stop traffic
    clear stats
    start traffic
    power down switch   ${leaf-not-in-traffic}
    sleep   20
    stop traffic
    print L2 packet_loss_duration
    power up switch   ${leaf-not-in-traffic}
    sleep   250
    #verify fabric switch link and errors
    

PowerOn leaf print traffic convergence time   
    [Tags]   con5  loss
    reconnect switch ips   ${leaf-not-in-traffic}
    reconnect switch ips   ${leaf}
    ${return}=  rest verify sync state
    Should Be True  ${return}
    verify fabric switch link and errors
    power down switch  ${leaf-not-in-traffic}
    sleep  25
    create L2 streams
    clear stats
    apply traffic
    start traffic
    #pause    FREEZZEEE!!!
    sleep  25   #MAC learning time, and sleep time, we can change
    verify mac learning rate
    ${ep_count}=  rest get active end point count
    Should be true  ${ep_count} >= 48000
    #pause   FREEZZEEE!!!!
    ${l2_table}=  get L2 table count  ${leaf}
    Should be true  ${l2_table} >= 48000
    stop traffic
    clear stats
    start traffic
    power up switch   ${leaf-not-in-traffic}
    sleep   250
    #verify fabric switch link and errors
    stop traffic
    print L2 packet_loss_duration


        
Shutdown leaf 40g interface and print traffic convergence time   
    [Tags]   con6  loss
    reconnect switch ips   ${leaf}
    verify fabric switch link and errors
    create L2 streams
    clear stats
    apply traffic
    start traffic
    #pause    FREEZZEEE!!!
    sleep  25   #MAC learning time, and sleep time, we can change
    verify mac learning rate
    ${ep_count}=  rest get active end point count
    Should be true  ${ep_count} >= 48000
    #pause   FREEZZEEE!!!!
    ${l2_table}=  get L2 table count  ${leaf}
    Should be true  ${l2_table} >= 48000
    stop traffic
    clear stats
    start traffic
    ##SHUT DOWN LEAF 40G INTERFACE
    ${result}=   rest_disable_fabric_interface  ${leaf-name}  ${leaf-interface}
    Should be true   ${result}
    sleep   50
    ${return}=  rest verify sync state
    Should Be True  ${return}
    stop traffic
    print L2 packet_loss_duration

Bringup leaf 40g interface and print traffic convergence time   
    [Tags]   con7  loss
    reconnect switch ips   ${leaf}
    create L2 streams
    clear stats
    apply traffic
    start traffic
    #pause    FREEZZEEE!!!
    sleep  25   #MAC learning time, and sleep time, we can change
    verify mac learning rate
    ${ep_count}=  rest get active end point count
    Should be true  ${ep_count} >= 48000
    #pause   FREEZZEEE!!!!
    ${l2_table}=  get L2 table count  ${leaf}
    Should be true  ${l2_table} >= 48000
    stop traffic
    clear stats
    start traffic
    ##SHUT DOWN LEAF 40G INTERFACE
    ${result}=   rest_enable_fabric_interface  ${leaf-name}  ${leaf-interface}
    Should be true   ${result}
    sleep   50
    ${return}=  rest verify sync state
    Should Be True  ${return}
    verify fabric switch link and errors
    stop traffic
    print L2 packet_loss_duration

   

Shutdown spine 40g interface and print traffic convergence time   
    [Tags]   con8  loss
    reconnect switch ips   ${spine}
    verify fabric switch link and errors
    create L2 streams
    clear stats
    apply traffic
    start traffic
    #pause    FREEZZEEE!!!
    sleep  25   #MAC learning time, and sleep time, we can change
    verify mac learning rate
    ${ep_count}=  rest get active end point count
    Should be true  ${ep_count} >= 48000
    #pause   FREEZZEEE!!!!
    ${l2_table}=  get L2 table count  ${spine}
    Should be true  ${l2_table} >= 48000
    stop traffic
    clear stats
    start traffic
    ##SHUT DOWN spine 40G INTERFACE
    ${result}=   rest_disable_fabric_interface  ${spine-name}  ${spine-interface}
    #pause     feeee!!
    Should be true   ${result}
    sleep   50
    ${return}=  rest verify sync state
    Should Be True  ${return}
    stop traffic
    print L2 packet_loss_duration


Bringup spine 40g interface and print traffic convergence time   
    [Tags]   con9  loss
    reconnect switch ips   ${spine}
    ${result}=   rest_disable_fabric_interface  ${spine-name}  ${spine-interface}
    #pause     feeee!!
    Should be true   ${result}
    sleep   50
    create L2 streams
    clear stats
    apply traffic
    start traffic
    #pause    FREEZZEEE!!!
    sleep  25   #MAC learning time, and sleep time, we can change
    #verify mac learning rate
    ${ep_count}=  rest get active end point count
    Should be true  ${ep_count} >= 48000
    #pause   FREEZZEEE!!!!
    ${l2_table}=  get L2 table count  ${spine}
    Should be true  ${l2_table} >= 48000
    stop traffic
    clear stats
    start traffic
    #No SHUT DOWN spine 40G INTERFACE
    ${result}=   rest_enable_fabric_interface  ${spine-name}  ${spine-interface}
    Should be true   ${result}
    sleep   50
    ${return}=  rest verify sync state
    Should Be True  ${return}
    #verify fabric switch link and errors
    stop traffic
    print L2 packet_loss_duration

   

Remove leaf from configuration and print traffic convergence time   
    [Tags]   con10  loss
    reconnect switch ips   ${leaf}
    ${return}=  rest verify sync state
    Should Be True  ${return}
    verify fabric switch link and errors
    create L2 streams
    clear stats
    apply traffic
    start traffic
    #pause    FREEZZEEE!!!
    sleep  25   #MAC learning time, and sleep time, we can change
    verify mac learning rate
    ${ep_count}=  rest get active end point count
    Should be true  ${ep_count} >= 48000
    #pause   FREEZZEEE!!!!
    ${l2_table}=  get L2 table count  ${leaf}
    Should be true  ${l2_table} >= 48000
    stop traffic
    clear stats
    start traffic
    ${result}=   rest_delete_fabric_switch  ${leaf-name}  
    Should be true   ${result}
    sleep   50
    ${return}=  rest verify sync state
    Should Be True  ${return}
    #verify fabric switch link and errors
    stop traffic
    print L2 packet_loss_duration
    #${result}=   rest_add_fabric_role  ${leaf-name}  leaf
    #Should be true   ${result}
    #${result}=   rest_add_leaf_group  ${leaf-name}  leaf3
    #Should be true   ${result}
    #${result}=   rest_add_dpid  ${leaf-name}  00:00:70:72:cf:bc:ce:4e
    #Should be true   ${result}
    rest add switch  ${leaf-name}  
    rest add fabric role  ${leaf-name}  leaf 
    rest add leaf group  ${leaf-name}  rack3
    rest add dpid  ${leaf-name}  00:00:70:72:cf:bc:ce:4e
    sleep   210
    



Add leaf to configuration and print traffic convergence time   
    [Tags]   con11  loss
    reconnect switch ips   ${leaf}
    ${result}=   rest_delete_fabric_switch  ${leaf-name}  
    Should be true   ${result}
    sleep   50
    create L2 streams
    clear stats
    apply traffic
    start traffic
    #pause    FREEZZEEE!!!
    sleep  25   #MAC learning time, and sleep time, we can change
    #verify mac learning rate
    #${ep_count}=  rest get active end point count
    #Should be true  ${ep_count} >= 48000
    #pause   FREEZZEEE!!!!
    #${l2_table}=  get L2 table count  ${leaf}
    #Should be true  ${l2_table} >= 48000
    stop traffic
    clear stats
    start traffic
    sleep  10
    #${result}=   rest_add_fabric_role  ${leaf-name}  leaf
    #Should be true   ${result}
    #${result}=   rest_add_leaf_group  ${leaf-name}  leaf3
    #Should be true   ${result}
    #${result}=   rest_add_dpid  ${leaf-name}  00:00:70:72:cf:bc:ce:4e
    #Should be true   ${result}
    rest add switch  ${leaf-name}  
    rest add fabric role  ${leaf-name}  leaf 
    rest add leaf group  ${leaf-name}  rack3
    rest add dpid  ${leaf-name}  00:00:70:72:cf:bc:ce:4e
    sleep   210
    ${return}=  rest verify sync state
    Should Be True  ${return}
    stop traffic
    print L2 packet_loss_duration

Remove spine from configuration and print traffic convergence time   
    [Tags]   con12  loss
    reconnect switch ips   ${spine}
    reconnect switch ips   ${leaf}
    create L2 streams
    clear stats
    apply traffic
    start traffic
    #pause    FREEZZEEE!!!
    sleep  25   #MAC learning time, and sleep time, we can change
    #verify mac learning rate
    ${ep_count}=  rest get active end point count
    Should be true  ${ep_count} >= 48000
    #pause   FREEZZEEE!!!!
    ${l2_table}=  get L2 table count  ${leaf}
    Should be true  ${l2_table} >= 48000
    stop traffic
    clear stats
    start traffic
    ${result}=   rest_delete_fabric_switch  ${spine-name}  
    Should be true   ${result}
    sleep   50
    ${return}=  rest verify sync state
    Should Be True  ${return}
    stop traffic
    print L2 packet_loss_duration
    rest add switch  ${spine-name}  
    rest add fabric role  ${spine-name}  spine 
    rest add dpid  ${spine-name}  00:00:70:72:cf:ae:b0:9e
    sleep   210
    


Add spine to configuration and print traffic convergence time   
    [Tags]   con13  loss
    reconnect switch ips   ${spine}
    reconnect switch ips   ${leaf}
    ${result}=   rest_delete_fabric_switch  ${spine-name}  
    Should be true   ${result}
    sleep   50
    create L2 streams
    clear stats
    apply traffic
    start traffic
    #pause    FREEZZEEE!!!
    sleep  25   #MAC learning time, and sleep time, we can change
    #verify mac learning rate
    ${ep_count}=  rest get active end point count
    Should be true  ${ep_count} >= 48000
    #pause   FREEZZEEE!!!!
    ${l2_table}=  get L2 table count  ${leaf}
    Should be true  ${l2_table} >= 48000
    stop traffic
    clear stats
    start traffic
    #${result}=   rest_add_fabric_role  ${spine-name}  spine
    #Should be true   ${result}
    #${result}=   rest_add_dpid  ${leaf-name}  00:00:70:72:cf:ae:b0:9e
    #Should be true   ${result}
    rest add switch  ${spine-name}  
    rest add fabric role  ${spine-name}  spine 
    rest add dpid  ${spine-name}  00:00:70:72:cf:ae:b0:9e
    sleep   210
    ${return}=  rest verify sync state
    Should Be True  ${return}
    stop traffic
    print L2 packet_loss_duration


Restart ofad in spine and print traffic convergence time   
    [Tags]   con14  loss
    reconnect switch ips   ${spine}
    reconnect switch ips   ${leaf}
    create L2 streams
    clear stats
    apply traffic
    start traffic
    #pause    FREEZZEEE!!!
    sleep  25   #MAC learning time, and sleep time, we can change
    verify mac learning rate
    ${ep_count}=  rest get active end point count
    Should be true  ${ep_count} >= 48000
    #pause   FREEZZEEE!!!!
    ${l2_table}=  get L2 table count  ${leaf}
    Should be true  ${l2_table} >= 48000
    stop traffic
    clear stats
    start traffic
    sleep  20
    ${result}=   bash_restart_process  ${spine}  ofad   timeout=210
    Should be true  ${result}
    sleep   210
    verify fabric switch link and errors
    ${return}=  rest verify sync state
    Should Be True  ${return}
    stop traffic
    print L2 packet_loss_duration

Restart ofad in leaf and print traffic convergence time   
    [Tags]   con15  loss
    reconnect switch ips   ${leaf}
    create L2 streams
    clear stats
    apply traffic
    start traffic
    #pause    FREEZZEEE!!!
    sleep  25   #MAC learning time, and sleep time, we can change
    verify mac learning rate
    ${ep_count}=  rest get active end point count
    Should be true  ${ep_count} >= 48000
    #pause   FREEZZEEE!!!!
    ${l2_table}=  get L2 table count  ${leaf}
    Should be true  ${l2_table} >= 48000
    stop traffic
    clear stats
    start traffic
    sleep  20
    ${result}=   bash_restart_process  ${leaf}  ofad  timeout=210
    Should be true  ${result}
    sleep   210
    verify fabric switch link and errors
    ${return}=  rest verify sync state
    Should Be True  ${return}
    stop traffic
    print L2 packet_loss_duration
    
    
restart floodlight in master controller
   [Tags]  HA2  loss
    create L2 streams
    clear stats
    apply traffic
    start traffic
    ###RESTART floodlight deamon
    ${result}=  restart_process_on_controller  floodlight  master  
    Should be True  ${result}
    sleep  120
    ${return}=  rest verify debug coordinator
    Should Be True  ${return}
    ${return}=  rest verify disk usage
    Should Be True  ${return}
    verify fabric switch link and errors
    ${return}=  rest verify sync state
    Should Be True  ${return}
    sleep  5
    stop traffic
    sleep  5
    print L2 packet_loss_duration
    reconnect switch ips   ${leaf}
    ${l2_table}=  get L2 table count  ${leaf}
    Should be true  ${l2_table} >= 48000
    #${l3_table}=  get L3 table count  ${leaf}
    #Should be true  ${l3_table} >= 45000
    ${acl_table}=  get ACL table count  ${leaf}
    Should be true  ${acl_table} == 3001
    
restart floodlight in slave controller
   [Tags]  HA2  loss
    create L2 streams
    clear stats
    apply traffic
    start traffic
    ###RESTART floodlight deamon
    ${result}=  restart_process_on_controller  floodlight  slave
    Should be True  ${result}
    sleep  120
    ${return}=  rest verify debug coordinator
    Should Be True  ${return}
    ${return}=  rest verify disk usage
    Should Be True  ${return}
    verify fabric switch link and errors
    ${return}=  rest verify sync state
    Should Be True  ${return}
    sleep  5
    stop traffic
    sleep   5
    print L2 packet_loss_duration
    reconnect switch ips   ${leaf}
    ${l2_table}=  get L2 table count  ${leaf}
    Should be true  ${l2_table} >= 48000
    #${l3_table}=  get L3 table count  ${leaf}
    #Should be true  ${l3_table} >= 45000
    ${acl_table}=  get ACL table count  ${leaf}
    Should be true  ${acl_table} == 3001
    
    
	
upgrade stage in master
    [Tags]  stage
    start monitoring the exception
    ${file_exist}=  verify file  ${copied_file1}
    Should Be True  ${file_exist}
    ${num}  ${_}=      cli_check_image   master
    Run Keyword if   ${num} == -1    copy_pkg_from_server    ${image}        master
    ${result}=      cli_upgrade_stage      master
    Should be True     ${result}
    stop monitoring the exception
    parse monitoring file
    
upgrade stage in slave
    [Tags]  stage
    start monitoring the exception
    ${file_exist}=  verify file  ${copied_file1}
    Should Be True  ${file_exist}
    ${num}  ${_}=      cli_check_image   slave
    Run Keyword if   ${num} == -1    copy_pkg_from_server    ${image}        slave
    ${result}=      cli_upgrade_stage      slave
    Should be True     ${result}
    stop monitoring the exception
    parse monitoring file
    
   
collect tech-support
    [Tags]  support
    start monitoring the exception
    ${file_exist}=  verify file  ${copied_file1}
    Should Be True  ${file_exist}
    cli  master  support  timeout=1200
    #sleep  1200
    stop monitoring the exception
    parse monitoring file

spine reboot time
    [Tags]  reboottime  run
    reconnect switch ips   ${spine}
    Log to console   Rebooting spine switch
    ${time_before}=   Get time
    #Log to console   ${time_before}
    power cycle switch   ${spine}
    Wait Until Keyword Succeeds  ${max_timeout}  ${min_poll_interval}  Verify switch disconnected  ${spine-name}
    ${time_disconnected}=   Get time  
    #Log to Console   ${time_disconnected}
    Wait Until Keyword Succeeds  ${max_timeout}  ${poll_interval}  Verify switch connected  ${spine-name}
    ${time_connected}=   Get time   
    #Log To Console   ${time_connected}
    Wait Until Keyword Succeeds  ${max_timeout}  ${poll_interval}  verify fabric switch link and errors
    ${time_no_fabric_link_errors}=  Get time   
    Log to console  Time spine connected to controller
    ${time_diff}=  time diff  ${time_before}   ${time_connected}
    Log to Console  ${time_diff}
    Log to console   Time fabric link do no show errors
    ${time_diff}=  time diff  ${time_before}   ${time_no_fabric_link_errors}
    Log to Console  ${time_diff}
    
    
leaf reboot time
    [Tags]  reboottime  run
    reconnect switch ips   ${leaf}
    Log to console   Rebooting spine switch
    ${time_before}=   Get time
    #Log to console   ${time_before}
    power cycle switch   ${leaf}
    Wait Until Keyword Succeeds  ${max_timeout}  ${min_poll_interval}  Verify switch disconnected  ${leaf-name}
    ${time_disconnected}=   Get time  
    #Log to Console   ${time_disconnected}
    Wait Until Keyword Succeeds  ${max_timeout}  ${poll_interval}  Verify switch connected  ${leaf-name}
    ${time_connected}=   Get time   
    #Log To Console   ${time_connected}
    Wait Until Keyword Succeeds  ${max_timeout}  ${poll_interval}  verify fabric switch link and errors
    ${time_no_fabric_link_errors}=  Get time   
    Log to console  Time spine connected to controller
    ${time_diff}=  time diff  ${time_before}   ${time_connected}
    Log to Console  ${time_diff}
    Log to console   Time fabric link do no show errors
    ${time_diff}=  time diff  ${time_before}   ${time_no_fabric_link_errors}
    Log to Console  ${time_diff}
    
    
     
* Keywords

verify arp learning rate 
    [Arguments]   ${leaf}
    ${l3_table}=  get L3 table count  ${leaf}
    Should be true  ${l3_table} > 45000

verify switch connected   
    [Arguments]   ${spine-name}
    Verify Switch Connection State  True  ${spine-name}

Verify Switch Connection State
    [Arguments]  ${expected_state}  ${switch_alias}
    ${connection_state}=  Rest Get Switch Connection State  master  ${switch_alias}
    Should Be Equal As Strings  ${expected_state}  ${connection_state}
    ${connection_state}=  Rest Get Switch Connection State  slave  ${switch_alias}
    Should Be Equal As Strings  ${expected_state}  ${connection_state}

Verify switch disconnected
    [Arguments]   ${spine-name}
    Verify Switch Connection State  False  ${spine-name}
    
    
create L2 streams

    ${flow_a_to_c}=  L2 add  name=port_a_to_c  flow=a<->c  src_mac=00:70:03:00:01:01   src_step=00:00:00:00:01:00  src_cnt=3000  dst_mac=00:70:05:00:01:01   
    ...                  dst_step=00:00:00:00:01:00  dst_cnt=3000  frame_rate=1000  frame_size=1500  vlan_id=1  vlan_cnt=3000  vlan_step=1
    Set Suite Variable  ${flow_a_to_c}
    ${flow_b_to_d}=  L2 add  name=port_b_to_d  flow=b<->d  src_mac=00:70:04:00:01:01   src_step=00:00:00:00:01:00  src_cnt=3000  dst_mac=00:70:06:00:01:01   
    ...                  dst_step=00:00:00:00:01:00  dst_cnt=3000  frame_rate=1000  frame_size=1500  vlan_id=1  vlan_cnt=3000  vlan_step=1
    Set Suite Variable  ${flow_b_to_d}
    ${flow_e_to_g}=  L2 add  name=port_e_to_g  flow=e<->g  src_mac=00:70:07:00:01:01   src_step=00:00:00:00:01:00  src_cnt=3000  dst_mac=00:70:09:00:01:01   
    ...                  dst_step=00:00:00:00:01:00  dst_cnt=3000  frame_rate=1000  frame_size=1500  vlan_id=1  vlan_cnt=3000  vlan_step=1
    Set Suite Variable  ${flow_e_to_g}
    ${flow_f_to_h}=  L2 add  name=port_f_to_h  flow=f<->h  src_mac=00:70:08:00:01:01   src_step=00:00:00:00:01:00  src_cnt=3000  dst_mac=00:70:10:00:01:01   
    ...                  dst_step=00:00:00:00:01:00  dst_cnt=3000  frame_rate=1000  frame_size=1500  vlan_id=1  vlan_cnt=3000  vlan_step=1
    Set Suite Variable  ${flow_f_to_h}
    ${flow_i_to_k}=  L2 add  name=port_i_to_k  flow=i<->k  src_mac=00:70:11:00:01:01   src_step=00:00:00:00:01:00  src_cnt=3000  dst_mac=00:70:13:00:01:01   
    ...                  dst_step=00:00:00:00:01:00  dst_cnt=3000  frame_rate=1000  frame_size=1500  vlan_id=1  vlan_cnt=3000  vlan_step=1
    Set Suite Variable  ${flow_i_to_k}
    ${flow_j_to_l}=  L2 add  name=port_j_to_l  flow=j<->l  src_mac=00:70:12:00:01:01   src_step=00:00:00:00:01:00  src_cnt=3000  dst_mac=00:70:14:00:01:01   
    ...                  dst_step=00:00:00:00:01:00  dst_cnt=3000  frame_rate=1000  frame_size=1500  vlan_id=1  vlan_cnt=3000  vlan_step=1
    Set Suite Variable    ${flow_j_to_l}
    ${flow_m_to_o}=  L2 add  name=port_m_to_o  flow=m<->o  src_mac=00:70:15:00:01:01   src_step=00:00:00:00:01:00  src_cnt=3000  dst_mac=00:70:17:00:01:01   
    ...                  dst_step=00:00:00:00:01:00  dst_cnt=3000  frame_rate=1000  frame_size=1500  vlan_id=1  vlan_cnt=3000  vlan_step=1
    Set Suite Variable   ${flow_m_to_o}
    ${flow_n_to_p}=  L2 add  name=port_n_to_p  flow=n<->p  src_mac=00:70:16:00:01:01   src_step=00:00:00:00:01:00  src_cnt=3000  dst_mac=00:70:18:00:01:01   
    ...                  dst_step=00:00:00:00:01:00  dst_cnt=3000  frame_rate=1000  frame_size=1500  vlan_id=1  vlan_cnt=3000  vlan_step=1
   Set Suite Variable    ${flow_n_to_p}

create L3 streams

    ${host_a}=  L3 add host  src_ip=30.0.0.2  src_ip_step=0.0.1.0  gw_ip=30.0.0.1  src_gw_step=0.0.1.0  port_name=a  arp_check=False  RetransmitInterval=10000  RetransmitCount=10  
    ...                      src_mac=00:70:03:00:01:01   src_mac_step=00:00:00:00:01:00  s_cnt=3000  ip_type=ipv4  vlan_id=1  vlan_cnt=3000  vlan_step=1
    Set Suite Variable    ${host_a}
    
    ${host_b}=  L3 add host  src_ip=30.0.0.3  src_ip_step=0.0.1.0  gw_ip=30.0.0.1  src_gw_step=0.0.1.0  port_name=b  arp_check=False    RetransmitInterval=10000  RetransmitCount=10  
    ...                      src_mac=00:70:04:00:01:01   src_mac_step=00:00:00:00:01:00  s_cnt=3000  ip_type=ipv4  vlan_id=1  vlan_cnt=3000  vlan_step=1
    Set Suite Variable    ${host_b}
    
    ${host_c}=  L3 add host  src_ip=30.0.0.4  src_ip_step=0.0.1.0  gw_ip=30.0.0.1  src_gw_step=0.0.1.0  port_name=c  arp_check=False    RetransmitInterval=10000  RetransmitCount=10  
    ...                      src_mac=00:70:05:00:01:01   src_mac_step=00:00:00:00:01:00  s_cnt=3000  ip_type=ipv4  vlan_id=1  vlan_cnt=3000  vlan_step=1
    Set Suite Variable    ${host_c}
    
    ${host_d}=  L3 add host  src_ip=30.0.0.5  src_ip_step=0.0.1.0  gw_ip=30.0.0.1  src_gw_step=0.0.1.0  port_name=d  arp_check=False    RetransmitInterval=10000  RetransmitCount=10  
    ...                      src_mac=00:70:06:00:01:01   src_mac_step=00:00:00:00:01:00  s_cnt=3000  ip_type=ipv4  vlan_id=1  vlan_cnt=3000  vlan_step=1
    Set Suite Variable    ${host_d}
    
    ${host_e}=  L3 add host  src_ip=30.0.0.6  src_ip_step=0.0.1.0  gw_ip=30.0.0.1  src_gw_step=0.0.1.0  port_name=e  arp_check=False    RetransmitInterval=10000  RetransmitCount=10  
    ...                      src_mac=00:70:07:00:01:01   src_mac_step=00:00:00:00:01:00  s_cnt=3000  ip_type=ipv4  vlan_id=1  vlan_cnt=3000  vlan_step=1
    Set Suite Variable    ${host_e}
    
    ${host_f}=  L3 add host  src_ip=30.0.0.7  src_ip_step=0.0.1.0  gw_ip=30.0.0.1  src_gw_step=0.0.1.0  port_name=f  arp_check=False    RetransmitInterval=10000  RetransmitCount=10  
    ...                      src_mac=00:70:08:00:01:01   src_mac_step=00:00:00:00:01:00  s_cnt=3000  ip_type=ipv4  vlan_id=1  vlan_cnt=3000  vlan_step=1
    Set Suite Variable    ${host_f}
    
    ${host_g}=  L3 add host  src_ip=30.0.0.8  src_ip_step=0.0.1.0  gw_ip=30.0.0.1  src_gw_step=0.0.1.0  port_name=g  arp_check=False    RetransmitInterval=10000  RetransmitCount=10  
    ...                      src_mac=00:70:09:00:01:01   src_mac_step=00:00:00:00:01:00  s_cnt=3000  ip_type=ipv4  vlan_id=1  vlan_cnt=3000  vlan_step=1
    Set Suite Variable    ${host_g}
    
    ${host_h}=  L3 add host  src_ip=30.0.0.9  src_ip_step=0.0.1.0  gw_ip=30.0.0.1  src_gw_step=0.0.1.0  port_name=h  arp_check=False    RetransmitInterval=10000  RetransmitCount=10  
    ...                      src_mac=00:70:10:00:01:01   src_mac_step=00:00:00:00:01:00  s_cnt=3000  ip_type=ipv4  vlan_id=1  vlan_cnt=3000  vlan_step=1
    Set Suite Variable    ${host_h}
    
    ${host_i}=  L3 add host  src_ip=30.0.0.10  src_ip_step=0.0.1.0  gw_ip=30.0.0.1  src_gw_step=0.0.1.0  port_name=i  arp_check=False    RetransmitInterval=10000  RetransmitCount=10  
    ...                      src_mac=00:70:11:00:01:01   src_mac_step=00:00:00:00:01:00  s_cnt=3000  ip_type=ipv4  vlan_id=1  vlan_cnt=3000  vlan_step=1
    Set Suite Variable    ${host_i}
    
    ${host_j}=  L3 add host  src_ip=30.0.0.11  src_ip_step=0.0.1.0  gw_ip=30.0.0.1  src_gw_step=0.0.1.0  port_name=j  arp_check=False    RetransmitInterval=10000  RetransmitCount=10  
    ...                      src_mac=00:70:12:00:01:01   src_mac_step=00:00:00:00:01:00  s_cnt=3000  ip_type=ipv4  vlan_id=1  vlan_cnt=3000  vlan_step=1
    Set Suite Variable    ${host_j}
    
    ${host_k}=  L3 add host  src_ip=30.0.0.12  src_ip_step=0.0.1.0  gw_ip=30.0.0.1  src_gw_step=0.0.1.0  port_name=k  arp_check=False    RetransmitInterval=10000  RetransmitCount=10  
    ...                      src_mac=00:70:13:00:01:01   src_mac_step=00:00:00:00:01:00  s_cnt=3000  ip_type=ipv4  vlan_id=1  vlan_cnt=3000  vlan_step=1
    Set Suite Variable    ${host_k}
    
    ${host_l}=  L3 add host  src_ip=30.0.0.13  src_ip_step=0.0.1.0  gw_ip=30.0.0.1  src_gw_step=0.0.1.0  port_name=l  arp_check=False    RetransmitInterval=10000  RetransmitCount=10  
    ...                      src_mac=00:70:14:00:01:01   src_mac_step=00:00:00:00:01:00  s_cnt=3000  ip_type=ipv4  vlan_id=1  vlan_cnt=3000  vlan_step=1
    Set Suite Variable    ${host_l}
    
    ${host_m}=  L3 add host  src_ip=30.0.0.14  src_ip_step=0.0.1.0  gw_ip=30.0.0.1  src_gw_step=0.0.1.0  port_name=m  arp_check=False    RetransmitInterval=10000  RetransmitCount=10  
    ...                      src_mac=00:70:15:00:01:01   src_mac_step=00:00:00:00:01:00  s_cnt=3000  ip_type=ipv4  vlan_id=1  vlan_cnt=3000  vlan_step=1
    Set Suite Variable    ${host_m}
    
    ${host_n}=  L3 add host  src_ip=30.0.0.15  src_ip_step=0.0.1.0  gw_ip=30.0.0.1  src_gw_step=0.0.1.0  port_name=n  arp_check=False    RetransmitInterval=10000  RetransmitCount=10  
    ...                      src_mac=00:70:16:00:01:01   src_mac_step=00:00:00:00:01:00  s_cnt=3000  ip_type=ipv4  vlan_id=1  vlan_cnt=3000  vlan_step=1
    Set Suite Variable    ${host_n}
    
    ${host_o}=  L3 add host  src_ip=30.0.0.16  src_ip_step=0.0.1.0  gw_ip=30.0.0.1  src_gw_step=0.0.1.0  port_name=o  arp_check=False    RetransmitInterval=10000  RetransmitCount=10  
    ...                      src_mac=00:70:17:00:01:01   src_mac_step=00:00:00:00:01:00  s_cnt=3000  ip_type=ipv4  vlan_id=1  vlan_cnt=3000  vlan_step=1
    Set Suite Variable    ${host_o}
    
    ${host_p}=  L3 add host  src_ip=30.0.0.17  src_ip_step=0.0.1.0  gw_ip=30.0.0.1  src_gw_step=0.0.1.0  port_name=p  arp_check=False    RetransmitInterval=10000  RetransmitCount=10  
    ...                      src_mac=00:70:18:00:01:01   src_mac_step=00:00:00:00:01:00  s_cnt=3000  ip_type=ipv4  vlan_id=1  vlan_cnt=3000  vlan_step=1
    Set Suite Variable    ${host_p}
    
    
verify L2 packet_loss_duration

    ${ATOC}=  fetch port stats  stream=${flow_a_to_c}
    ${rx_value_c}=  verify dict key  ${ATOC}  port_a_to_c  packet_loss_duration_ms
    should be true   ${rx_value_c} == 0
    
    ${BTOD}=  fetch port stats  stream=${flow_b_to_d}
    ${rx_value_b}=  verify dict key  ${BTOD}  port_b_to_d  packet_loss_duration_ms
    Should be true  ${rx_value_b} == 0
    
    ${ETOG}=  fetch port stats  stream=${flow_e_to_g}
    ${rx_value_e}=  verify dict key  ${ETOG}  port_e_to_g  packet_loss_duration_ms
    #Should be true  ${rx_value_e} == 0
    
    ${FTOH}=  fetch port stats  stream=${flow_f_to_h}
    ${rx_value_f}=  verify dict key  ${FTOH}  port_f_to_h  packet_loss_duration_ms
    Should be true  ${rx_value_f} == 0
    
    ${ITOK}=  fetch port stats  stream=${flow_i_to_k}  flow_stats=True
    ${rx_value_i}=  verify dict key  ${ITOK}  port_i_to_k  tx_port_a
    ${pkt_loss}=  verify dict key  ${rx_value_i}  port_i_to_k  packet_loss_duration_ms
    Should be true  ${rx_value_i} == 0
    
    ${JTOL}=  fetch port stats  stream=${flow_j_to_l}
    ${rx_value_j}=  verify dict key  ${JTOL}  port_j_to_l  packet_loss_duration_ms
    Should be true  ${rx_value_j} == 0
    
    ${MTOO}=  fetch port stats  stream=${flow_m_to_o}
    ${rx_value_m}=  verify dict key  ${MTOO}  port_m_to_o  packet_loss_duration_ms
    Should be true  ${rx_value_m} == 0
    
    ${NTOP}=  fetch port stats  stream=${flow_n_to_p}
    ${rx_value_n}=  verify dict key  ${NTOP}  port_n_to_p  packet_loss_duration_ms
    Should be true  ${rx_value_n} == 0
   
print L2 packet_loss_duration

    ${ATOC}=  fetch port stats  stream=${flow_a_to_c}  flow_stats=True
    ${rx_value_a}=  verify nested dict key  ${ATOC}  port_a_to_c  a  Packet Loss Duration (ms)
    ${rx_value_c}=  verify nested dict key  ${ATOC}  port_a_to_c  c  Packet Loss Duration (ms)
    Log to console   Traffic loss seen:  
    Log to console   ${rx_value_a}
    Log to console   ${rx_value_c}
    
    ${BTOD}=  fetch port stats  stream=${flow_b_to_d}  flow_stats=True
    ${rx_value_b}=  verify nested dict key  ${BTOD}  port_b_to_d  b  Packet Loss Duration (ms)
    ${rx_value_d}=  verify nested dict key  ${BTOD}  port_b_to_d  d  Packet Loss Duration (ms)
    Log to console   Traffic loss seen:  
    Log to console   ${rx_value_b} 
    Log to console   ${rx_value_d} 
    
    ${ETOG}=  fetch port stats  stream=${flow_e_to_g}  flow_stats=True
    ${rx_value_e}=  verify nested dict key  ${ETOG}  port_e_to_g  e  Packet Loss Duration (ms)
    ${rx_value_g}=  verify nested dict key  ${ETOG}  port_e_to_g  g  Packet Loss Duration (ms)
    #Log to console     ${rx_value_e} 
    #Log to console     ${rx_value_g} 
    
    ${FTOH}=  fetch port stats  stream=${flow_f_to_h}  flow_stats=True
    ${rx_value_f}=  verify nested dict key  ${FTOH}  port_f_to_h  f  Packet Loss Duration (ms)
    ${rx_value_h}=  verify nested dict key  ${FTOH}  port_f_to_h  h  Packet Loss Duration (ms)
    Log to console     Traffic loss seen:  
    Log to console   ${rx_value_f} 
    Log to console   ${rx_value_h} 
    
    ${ITOK}=  fetch port stats  stream=${flow_i_to_k}  flow_stats=True
    ${rx_value_i}=  verify nested dict key  ${ITOK}  port_i_to_k  i  Packet Loss Duration (ms)
    ${rx_value_k}=  verify nested dict key  ${ITOK}  port_i_to_k  k  Packet Loss Duration (ms)
    Log to console     Traffic loss seen:  
    Log to console   ${rx_value_i} 
    Log to console   ${rx_value_k} 
    
    ${JTOL}=  fetch port stats  stream=${flow_j_to_l}  flow_stats=True
    ${rx_value_l}=  verify nested dict key  ${JTOL}  port_j_to_l  l  Packet Loss Duration (ms)
    ${rx_value_j}=  verify nested dict key  ${JTOL}  port_j_to_l  j  Packet Loss Duration (ms)
    Log to console     Traffic loss seen:  
    Log to console   ${rx_value_l} 
    Log to console   ${rx_value_j} 
    
    ${MTOO}=  fetch port stats  stream=${flow_m_to_o}  flow_stats=True
    ${rx_value_o}=  verify nested dict key  ${MTOO}  port_m_to_o  o  Packet Loss Duration (ms)
    ${rx_value_m}=  verify nested dict key  ${MTOO}  port_m_to_o  m  Packet Loss Duration (ms)
    Log to console     Traffic loss seen:  
    Log to console   ${rx_value_o} 
    Log to console   ${rx_value_m} 
    
    ${NTOP}=  fetch port stats  stream=${flow_n_to_p}  flow_stats=True
    ${rx_value_n}=  verify nested dict key  ${NTOP}  port_n_to_p  n  Packet Loss Duration (ms)
    ${rx_value_p}=  verify nested dict key  ${NTOP}  port_n_to_p  p  Packet Loss Duration (ms)
    Log to console     Traffic loss seen:  
    Log to console   ${rx_value_n} 
    Log to console   ${rx_value_p} 
   
   
verify mac learning rate

    ${results}=  fetch port stats  
    ${rx_value_c}=  verify dict key  ${results}  c  received_frame_rate
    ${tx_value_a}=  verify dict key  ${results}  a  transmitted_frame_rate
    ${in_range}=  ixia verify traffic rate  ${rx_value_c}  ${tx_value_a}
    Should be true  ${in_range}
    
    
    ${rx_value_b}=  verify dict key  ${results}  b  received_frame_rate
    ${tx_value_d}=  verify dict key  ${results}  d  transmitted_frame_rate
    ${in_range}=  ixia verify traffic rate  ${rx_value_b}  ${tx_value_d}
    Should be true  ${in_range}
    
    
    ${rx_value_e}=  verify dict key  ${results}  e  received_frame_rate
    ${tx_value_g}=  verify dict key  ${results}  g  transmitted_frame_rate
    ${in_range}=  ixia verify traffic rate  ${rx_value_e}  ${tx_value_g}
    Should be true  ${in_range}
    
    
    ${rx_value_f}=  verify dict key  ${results}  f  received_frame_rate
    ${tx_value_h}=  verify dict key  ${results}  h  transmitted_frame_rate
    ${in_range}=  ixia verify traffic rate  ${rx_value_f}  ${tx_value_h}
    Should be true  ${in_range}
    
    
    ${rx_value_i}=  verify dict key  ${results}  i  received_frame_rate
    ${tx_value_k}=  verify dict key  ${results}  k  transmitted_frame_rate
    ${in_range}=  ixia verify traffic rate  ${rx_value_i}  ${tx_value_k}
    Should be true  ${in_range}
    
    
    ${rx_value_j}=  verify dict key  ${results}  j  received_frame_rate
    ${tx_value_l}=  verify dict key  ${results}  l  transmitted_frame_rate
    ${in_range}=  ixia verify traffic rate  ${rx_value_j}  ${tx_value_l}
    Should be true  ${in_range}
    
    
    ${rx_value_m}=  verify dict key  ${results}  m  received_frame_rate
    ${tx_value_o}=  verify dict key  ${results}  o  transmitted_frame_rate
    ${in_range}=  ixia verify traffic rate  ${rx_value_m}  ${tx_value_o}
    Should be true  ${in_range}
    
    
    ${rx_value_n}=  verify dict key  ${results}  n  received_frame_rate
    ${tx_value_p}=  verify dict key  ${results}  p  transmitted_frame_rate
    ${in_range}=  ixia verify traffic rate  ${rx_value_n}  ${tx_value_p}
    Should be true  ${in_range}
       

Reboot all switches
    
    power cycle switch  s1
    power cycle switch  s2
    power cycle switch  s3
    power cycle switch  s4
    power cycle switch  s5
    power cycle switch  s6
    power cycle switch  s7
    power cycle switch  s8
    power cycle switch  s9
    power cycle switch  s10
    power cycle switch  s11
    power cycle switch  s12
    power cycle switch  s13
    power cycle switch  s14
    power cycle switch  s15
    power cycle switch  s16
    power cycle switch  s17
    power cycle switch  s18
    power cycle switch  s19
    power cycle switch  s20
    power cycle switch  s21
    power cycle switch  s22
    power cycle switch  s23
    power cycle switch  s24
    power cycle switch  s25
    power cycle switch  s26
    power cycle switch  s27
    power cycle switch  s28
    power cycle switch  s29
    power cycle switch  s30
    power cycle switch  s31
    power cycle switch  s32
    power cycle switch  s33
    power cycle switch  s34
    power cycle switch  s35
    power cycle switch  s36
    power cycle switch  s37
    power cycle switch  s38



test setup topology
    base suite setup

test teardown topology
    T5 base suite teardown

T5 base suite teardown
    base suite teardown  

test teardown
  delete traffic    

   
start monitoring the exception
	Log To console  Starting to monitor Exception logs
	start monitor exception  ${monitor_file}
	${pid}=  pid return monitor file  master
	Should Be True  ${pid}
	${pid}=  pid return monitor file  slave
	Should Be True  ${pid}

start monitoring exception during failover
    Log To console  Starting to monitor Exception logs
    start monitor exception during failover  ${monitor_file}
    ${pid}=  pid return monitor file  master
    Should Be True  ${pid}
    ${pid}=  pid return monitor file  slave
    Should Be True  ${pid}

start monitoring exception during reboot
    Log To console  Starting to monitor Exception logs
    start monitor exception during reboot  ${monitor_file}
    ${pid}=  pid return monitor file  master
    Should Be True  ${pid}
    ${pid}=  pid return monitor file  slave
    Should Be True  ${pid}        
    
stop monitoring the exception
	Log To Console  Stopping the monitor Exception logs
	${pid}=  pid return monitor file  master
	stop monitor exception  ${pid}  master
	${pid}=  pid return monitor file  slave
	stop monitor exception  ${pid}  slave
	
parse monitoring file
	Log To Console  Looking for exceptions in the file
	${size}=  parse exception  c1  ${monitor_file}
	#Should Be True  ${size} == 0
	${size}=  parse exception  c2  ${monitor_file}
	#Should Be True  ${size} == 0

verify fabric switch link and errors
	Log To Console  Verifing the fabric switch and links
	rest verify fabric switch all
	rest verify fabric link
	${result}=  rest verify fabric errors
	Should Be True  ${result} == 0
	
		

Collect Logs  [Arguments]  ${text}
    Log To Console  ${text}
	Dump Show Commands
 
