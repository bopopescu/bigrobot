== T5 Scale Test Suite ==

* Setting
Documentation    T5 Scale Test Suite
Library			 keywords_dev/svoora/T5_Scale.py
Suite Setup     test setup topology
Suite Teardown  test teardown topology
Test Setup      base test setup
Test Teardown   test teardown
Force Tags      IronHorse  T5  Scale
Library         keywords/BsnCommon.py
Library         keywords/Host.py
Library         keywords/T5.py
Library         keywords/T5L3.py
Library         keywords/T5Platform.py
Library         keywords/SwitchLight.py
Library         keywords/T5Utilities.py
Library         keywords/BsnCommon.py
Library         Collections.py
Library         keywords/Ixia.py
#Resource        testsuites_dev/svoora/T5_policy_physical/t5_policy_physical_inter_variables.txt
Library         OperatingSystem
Library         Collections
Library         Dialogs


#Documentation   T5 Scale - Iron Horse
#...             export BIGROBOT_SUITE=t5_6spine_16rack_test_suite.txt
#...             Section A: Build a Scale configuration file
#...             Section B: Configure master/slave controllers in one cluster
#				Section C: Copy Scale Configuration file to Controller master
#					Topology:
#						6 spines, 16 rack (dual leaf)
#						All leafs have 40G uplinks to spines
#						Ixia and big-tap be used for traffic testing
#					Scale Config: 
#						1022/1023 user Tenants? (+ 1 system tenant vrf-0 + 1 external vrf-1 ? = 1024)
#						4088/4092 user VNS (4 VNS/ tenant, 0x001 and 0xfff  is reserved, 0x000 is not allowed =  4091/4095. Each Ixia ports will have 4k vlan configured)	
#						4088/4092 IP subnets (one per VNS subject to above limits)
#						All VNS will be applied across all leaf nodes including service rack
#						48K L3 host  for intra-tenant routing
#						48K L2 host 
#						16K CIDR routes ? (tables might be used for inter-tenant routing)
#						3K policy rules per leaf switches
#						ARP 2k per sec per switch
#					Performance:
#						Controller PACKET-IN 100k per second
#						No DHCP relay configured. No overlapping subnet.
#						MAC learning rate 2000 per sec for controller, and 200 per switch?
#					Gneralnote:
#						All testcases will be run with L2/L3 and external traffic
#						Will monitor and take snapshot of memory/cpu utilization on both controllers/switches
#						Monitor java exceptions
#						Traffic convergence time periods 


* Variables
${cfg1_file_path}		/home/svoora/16R-scale-48k-ep-144k-mem-3k-policy.snp
${copied_file1}         16R-scale-48k-ep-144k-mem-3k-policy.snp
${cfg2_file_path}       /home/svoora/16R-scale-48k-ep.snp
${copied_file2}         16R-scale-48k-ep.snp
${empty_cfg_file_path}       /home/svoora/scale_empty.snp
${cfg_file_server}		10.8.22.2
${file_server_passwd}	bsn
${monitor_file}			exception_file.log

* Test Case 

copy config file to controller
	[Tags]  T1 
	#manual passed
	Log To console  Getting config file server
	copy config from server  ${cfg1_file_path}  ${cfg_file_server}  ${file_server_passwd}  ${copied_file1} 
	verify file  ${copied_file1}
	Log To Console  Verifiing cluster formation
	${returnVal}=  rest verify show cluster
	Should Be True  ${returnVal}
	
config controller with copied config file
	[Tags]  T2 
	#manual passed   
	Log To console  Copying file to running-config
	start monitoring the exception
	${file_exist}=  verify file  ${copied_file1}
	Should Be True  ${file_exist}
	${return}=  cli copy file to running config  ${copied_file1}	
	Should Be True  ${return}
	sleep  120
	stop monitoring the exception
	parse monitoring file
	
verify config sync between controllers
	[Tags]  T3
	#manual passed   
	#Log To Console  Verifying configuration between controllers
	${return}=  rest verify debug coordinator
	Should Be True  ${return}
		

verify disk usage in controllers
    [Tags]  T4
    #manual passed   
    #Log To Console  Verifying configuration between controllers
    ${return}=  rest verify disk usage
    Should Be True  ${return}
        
	

Create L2 devices in ixia
    [Tags]   T5L2   traffic
    create L2 streams
    clear stats
    apply traffic
    start traffic
    #pause    FREEZZEEE!!!
    sleep  25   #MAC learning time, and sleep time, we can change
    verify mac learning rate
    ${ep_count}=  rest get active end point count
    Should be true  ${ep_count} > 48000
    #pause   FREEZZEEE!!!!
    stop traffic
    verify L2 packet_loss_duration
    
    
Create L3 devices in ixia
    [Tags]   T5L3   traffic
    create L3 streams
    pause    FREEZZEE!!!
    L3 start hosts
    sleep  100   #Sleeping for 100 seconds for the ARP to complete for 46K end points
    pause       FREEZZEEE!!!
    

Controller HA failover with L2 traffic
    [Tags]  HA
    create L2 streams
    clear stats
    apply traffic
    start traffic
    start monitoring the exception
    ${file_exist}=  verify file  ${copied_file1}
    Should Be True  ${file_exist}
    cli cluster take leader
    stop monitoring the exception
    parse monitoring file
    ${return}=  rest verify debug coordinator
    Should Be True  ${return}
    ${return}=  rest verify disk usage
    Should Be True  ${return}
    sleep  5
    stop traffic
    verify L2 packet_loss_duration
    
Controller Master reboot    
    [Tags]  HA
    create L2 streams
    clear stats
    apply traffic
    start traffic
    start monitoring the exception
    ${file_exist}=  verify file  ${copied_file1}
    Should Be True  ${file_exist}
    ${returnVal}=  cli verify cluster master reboot
    Should Be True  ${returnVal}
    stop monitoring the exception
    parse monitoring file
    ${return}=  rest verify debug coordinator
    Should Be True  ${return}
    ${return}=  rest verify disk usage
    Should Be True  ${return}
    sleep  5
    stop traffic
    verify L2 packet_loss_duration

Controller Slave Reboot
    [Tags]  HA
    create L2 streams
    clear stats
    apply traffic
    start traffic
    start monitoring the exception
    ${file_exist}=  verify file  ${copied_file1}
    Should Be True  ${file_exist}
    ${returnVal}=  cli verify cluster slave reboot
    Should Be True  ${returnVal}
    stop monitoring the exception
    parse monitoring file
    ${return}=  rest verify debug coordinator
    Should Be True  ${return}
    ${return}=  rest verify disk usage
    Should Be True  ${return}
    sleep  5
    stop traffic
    verify L2 packet_loss_duration

	
* Keywords

create L2 streams

    ${flow_a_to_c}=  L2 add  name=port_a_to_c  flow=a<->c  src_mac=00:70:03:00:01:01   src_step=00:00:00:00:01:00  src_cnt=3000  dst_mac=00:70:05:00:01:01   
    ...                  dst_step=00:00:00:00:01:00  dst_cnt=3000  frame_rate=1000  frame_size=1500  vlan_id=1  vlan_cnt=3000  vlan_step=1
    
    ${flow_b_to_d}=  L2 add  name=port_b_to_d  flow=b<->d  src_mac=00:70:04:00:01:01   src_step=00:00:00:00:01:00  src_cnt=3000  dst_mac=00:70:06:00:01:01   
    ...                  dst_step=00:00:00:00:01:00  dst_cnt=3000  frame_rate=1000  frame_size=1500  vlan_id=1  vlan_cnt=3000  vlan_step=1
    
    ${flow_e_to_g}=  L2 add  name=port_e_to_g  flow=e<->g  src_mac=00:70:07:00:01:01   src_step=00:00:00:00:01:00  src_cnt=3000  dst_mac=00:70:09:00:01:01   
    ...                  dst_step=00:00:00:00:01:00  dst_cnt=3000  frame_rate=1000  frame_size=1500  vlan_id=1  vlan_cnt=3000  vlan_step=1
    
    ${flow_f_to_h}=  L2 add  name=port_f_to_h  flow=f<->h  src_mac=00:70:08:00:01:01   src_step=00:00:00:00:01:00  src_cnt=3000  dst_mac=00:70:10:00:01:01   
    ...                  dst_step=00:00:00:00:01:00  dst_cnt=3000  frame_rate=1000  frame_size=1500  vlan_id=1  vlan_cnt=3000  vlan_step=1
    
    ${flow_i_to_k}=  L2 add  name=port_i_to_k  flow=i<->k  src_mac=00:70:11:00:01:01   src_step=00:00:00:00:01:00  src_cnt=3000  dst_mac=00:70:13:00:01:01   
    ...                  dst_step=00:00:00:00:01:00  dst_cnt=3000  frame_rate=1000  frame_size=1500  vlan_id=1  vlan_cnt=3000  vlan_step=1
    
    ${flow_j_to_l}=  L2 add  name=port_j_to_l  flow=j<->l  src_mac=00:70:12:00:01:01   src_step=00:00:00:00:01:00  src_cnt=3000  dst_mac=00:70:14:00:01:01   
    ...                  dst_step=00:00:00:00:01:00  dst_cnt=3000  frame_rate=1000  frame_size=1500  vlan_id=1  vlan_cnt=3000  vlan_step=1
    
    ${flow_m_to_o}=  L2 add  name=port_m_to_o  flow=m<->o  src_mac=00:70:15:00:01:01   src_step=00:00:00:00:01:00  src_cnt=3000  dst_mac=00:70:17:00:01:01   
    ...                  dst_step=00:00:00:00:01:00  dst_cnt=3000  frame_rate=1000  frame_size=1500  vlan_id=1  vlan_cnt=3000  vlan_step=1
    
    ${flow_n_to_p}=  L2 add  name=port_n_to_p  flow=n<->p  src_mac=00:70:16:00:01:01   src_step=00:00:00:00:01:00  src_cnt=3000  dst_mac=00:70:18:00:01:01   
    ...                  dst_step=00:00:00:00:01:00  dst_cnt=3000  frame_rate=1000  frame_size=1500  vlan_id=1  vlan_cnt=3000  vlan_step=1
   

create L3 streams

    ${redirect-host_a}=  L3 add host  src_ip=30.0.0.2  src_ip_step=0.0.1.0  gw_ip=30.0.0.1  src_gw_step=0.0.1.0  port_name=a  
    ...                      src_mac=00:70:03:00:01:01   src_mac_step=00:00:00:00:01:00  s_cnt=3000  ip_type=ipv4  vlan_id=1  vlan_cnt=3000  vlan_step=1
    
    ${redirect-host_b}=  L3 add host  src_ip=30.0.0.3  src_ip_step=0.0.1.0  gw_ip=30.0.0.1  src_gw_step=0.0.1.0  port_name=b  
    ...                      src_mac=00:70:04:00:01:01   src_mac_step=00:00:00:00:01:00  s_cnt=3000  ip_type=ipv4  vlan_id=1  vlan_cnt=3000  vlan_step=1
    
    ${redirect-host_c}=  L3 add host  src_ip=30.0.0.4  src_ip_step=0.0.1.0  gw_ip=30.0.0.1  src_gw_step=0.0.1.0  port_name=c  
    ...                      src_mac=00:70:05:00:01:01   src_mac_step=00:00:00:00:01:00  s_cnt=3000  ip_type=ipv4  vlan_id=1  vlan_cnt=3000  vlan_step=1
    
    ${redirect-host_d}=  L3 add host  src_ip=30.0.0.5  src_ip_step=0.0.1.0  gw_ip=30.0.0.1  src_gw_step=0.0.1.0  port_name=d  
    ...                      src_mac=00:70:06:00:01:01   src_mac_step=00:00:00:00:01:00  s_cnt=3000  ip_type=ipv4  vlan_id=1  vlan_cnt=3000  vlan_step=1
    
    ${redirect-host_e}=  L3 add host  src_ip=30.0.0.6  src_ip_step=0.0.1.0  gw_ip=30.0.0.1  src_gw_step=0.0.1.0  port_name=e  
    ...                      src_mac=00:70:07:00:01:01   src_mac_step=00:00:00:00:01:00  s_cnt=3000  ip_type=ipv4  vlan_id=1  vlan_cnt=3000  vlan_step=1
    
    ${redirect-host_f}=  L3 add host  src_ip=30.0.0.7  src_ip_step=0.0.1.0  gw_ip=30.0.0.1  src_gw_step=0.0.1.0  port_name=f  
    ...                      src_mac=00:70:08:00:01:01   src_mac_step=00:00:00:00:01:00  s_cnt=3000  ip_type=ipv4  vlan_id=1  vlan_cnt=3000  vlan_step=1
    
    ${redirect-host_g}=  L3 add host  src_ip=30.0.0.8  src_ip_step=0.0.1.0  gw_ip=30.0.0.1  src_gw_step=0.0.1.0  port_name=g  
    ...                      src_mac=00:70:09:00:01:01   src_mac_step=00:00:00:00:01:00  s_cnt=3000  ip_type=ipv4  vlan_id=1  vlan_cnt=3000  vlan_step=1
    
    ${redirect-host_h}=  L3 add host  src_ip=30.0.0.9  src_ip_step=0.0.1.0  gw_ip=30.0.0.1  src_gw_step=0.0.1.0  port_name=h  
    ...                      src_mac=00:70:10:00:01:01   src_mac_step=00:00:00:00:01:00  s_cnt=3000  ip_type=ipv4  vlan_id=1  vlan_cnt=3000  vlan_step=1
    
    ${redirect-host_i}=  L3 add host  src_ip=30.0.0.10  src_ip_step=0.0.1.0  gw_ip=30.0.0.1  src_gw_step=0.0.1.0  port_name=i  
    ...                      src_mac=00:70:11:00:01:01   src_mac_step=00:00:00:00:01:00  s_cnt=3000  ip_type=ipv4  vlan_id=1  vlan_cnt=3000  vlan_step=1
    
    ${redirect-host_j}=  L3 add host  src_ip=30.0.0.11  src_ip_step=0.0.1.0  gw_ip=30.0.0.1  src_gw_step=0.0.1.0  port_name=j  
    ...                      src_mac=00:70:12:00:01:01   src_mac_step=00:00:00:00:01:00  s_cnt=3000  ip_type=ipv4  vlan_id=1  vlan_cnt=3000  vlan_step=1
    
    ${redirect-host_k}=  L3 add host  src_ip=30.0.0.12  src_ip_step=0.0.1.0  gw_ip=30.0.0.1  src_gw_step=0.0.1.0  port_name=k  
    ...                      src_mac=00:70:13:00:01:01   src_mac_step=00:00:00:00:01:00  s_cnt=3000  ip_type=ipv4  vlan_id=1  vlan_cnt=3000  vlan_step=1
    
    ${redirect-host_l}=  L3 add host  src_ip=30.0.0.13  src_ip_step=0.0.1.0  gw_ip=30.0.0.1  src_gw_step=0.0.1.0  port_name=l  
    ...                      src_mac=00:70:14:00:01:01   src_mac_step=00:00:00:00:01:00  s_cnt=3000  ip_type=ipv4  vlan_id=1  vlan_cnt=3000  vlan_step=1
    
    ${redirect-host_m}=  L3 add host  src_ip=30.0.0.14  src_ip_step=0.0.1.0  gw_ip=30.0.0.1  src_gw_step=0.0.1.0  port_name=m  
    ...                      src_mac=00:70:15:00:01:01   src_mac_step=00:00:00:00:01:00  s_cnt=3000  ip_type=ipv4  vlan_id=1  vlan_cnt=3000  vlan_step=1
    
    ${redirect-host_n}=  L3 add host  src_ip=30.0.0.15  src_ip_step=0.0.1.0  gw_ip=30.0.0.1  src_gw_step=0.0.1.0  port_name=n  
    ...                      src_mac=00:70:16:00:01:01   src_mac_step=00:00:00:00:01:00  s_cnt=3000  ip_type=ipv4  vlan_id=1  vlan_cnt=3000  vlan_step=1
    
    ${redirect-host_o}=  L3 add host  src_ip=30.0.0.16  src_ip_step=0.0.1.0  gw_ip=30.0.0.1  src_gw_step=0.0.1.0  port_name=o  
    ...                      src_mac=00:70:17:00:01:01   src_mac_step=00:00:00:00:01:00  s_cnt=3000  ip_type=ipv4  vlan_id=1  vlan_cnt=3000  vlan_step=1
    
    ${redirect-host_p}=  L3 add host  src_ip=30.0.0.17  src_ip_step=0.0.1.0  gw_ip=30.0.0.1  src_gw_step=0.0.1.0  port_name=p  
    ...                      src_mac=00:70:18:00:01:01   src_mac_step=00:00:00:00:01:00  s_cnt=3000  ip_type=ipv4  vlan_id=1  vlan_cnt=3000  vlan_step=1

verify L2 packet_loss_duration

    ${ATOC}=  fetch port stats  stream=${flow_a_to_c}
    ${rx_value_c}=  verify dict key  ${ATOC}  port_a_to_c  packet_loss_duration_ms
    should be true   ${rx_value_c} == 0
    
    ${BTOD}=  fetch port stats  stream=${flow_b_to_d}
    ${rx_value_b}=  verify dict key  ${BTOD}  port_b_to_d  packet_loss_duration_ms
    Should be true  ${rx_value_b} == 0
    
    ${ETOG}=  fetch port stats  stream=${flow_e_to_g}
    ${rx_value_e}=  verify dict key  ${ETOG}  port_e_to_g  packet_loss_duration_ms
    Should be true  ${rx_value_e} == 0
    
    ${FTOH}=  fetch port stats  stream=${flow_g_to_h}
    ${rx_value_f}=  verify dict key  ${FTOH}  port_f_to_h  packet_loss_duration_ms
    Should be true  ${rx_value_f} == 0
    
    ${ITOK}=  fetch port stats  stream=${flow_i_to_k}
    ${rx_value_i}=  verify dict key  ${ITOK}  port_i_to_k  packet_loss_duration_ms
    Should be true  ${rx_value_i} == 0
    
    ${JTOL}=  fetch port stats  stream=${flow_j_to_l}
    ${rx_value_j}=  verify dict key  ${JTOL}  port_j_to_l  packet_loss_duration_ms
    Should be true  ${rx_value_j} == 0
    
    ${MTOO}=  fetch port stats  stream=${flow_m_to_o}
    ${rx_value_m}=  verify dict key  ${MTOO}  port_m_to_o  packet_loss_duration_ms
    Should be true  ${rx_value_m} == 0
    
    ${NTOP}=  fetch port stats  stream=${flow_n_to_p}
    ${rx_value_n}=  verify dict key  ${ATOC}  port_n_to_p  packet_loss_duration_ms
    Should be true  ${rx_value_n} == 0
   
   
verify mac learning rate

    ${results}=  fetch port stats  
    ${rx_value_c}=  verify dict key  ${results}  c  received_frame_rate
    ${tx_value_a}=  verify dict key  ${results}  a  transmitted_frame_rate
    ${in_range}=  ixia verify traffic rate  ${rx_value_c}  ${tx_value_a}
    Should be true  ${in_range}
    
    
    ${rx_value_b}=  verify dict key  ${results}  b  received_frame_rate
    ${tx_value_d}=  verify dict key  ${results}  d  transmitted_frame_rate
    ${in_range}=  ixia verify traffic rate  ${rx_value_b}  ${tx_value_d}
    Should be true  ${in_range}
    
    
    ${rx_value_e}=  verify dict key  ${results}  e  received_frame_rate
    ${tx_value_g}=  verify dict key  ${results}  g  transmitted_frame_rate
    ${in_range}=  ixia verify traffic rate  ${rx_value_e}  ${tx_value_g}
    Should be true  ${in_range}
    
    
    ${rx_value_f}=  verify dict key  ${results}  f  received_frame_rate
    ${tx_value_h}=  verify dict key  ${results}  h  transmitted_frame_rate
    ${in_range}=  ixia verify traffic rate  ${rx_value_f}  ${tx_value_h}
    Should be true  ${in_range}
    
    
    ${rx_value_i}=  verify dict key  ${results}  i  received_frame_rate
    ${tx_value_k}=  verify dict key  ${results}  k  transmitted_frame_rate
    ${in_range}=  ixia verify traffic rate  ${rx_value_i}  ${tx_value_k}
    Should be true  ${in_range}
    
    
    ${rx_value_j}=  verify dict key  ${results}  j  received_frame_rate
    ${tx_value_l}=  verify dict key  ${results}  l  transmitted_frame_rate
    ${in_range}=  ixia verify traffic rate  ${rx_value_j}  ${tx_value_l}
    Should be true  ${in_range}
    
    
    ${rx_value_m}=  verify dict key  ${results}  m  received_frame_rate
    ${tx_value_o}=  verify dict key  ${results}  o  transmitted_frame_rate
    ${in_range}=  ixia verify traffic rate  ${rx_value_m}  ${tx_value_o}
    Should be true  ${in_range}
    
    
    ${rx_value_n}=  verify dict key  ${results}  n  received_frame_rate
    ${tx_value_p}=  verify dict key  ${results}  p  transmitted_frame_rate
    ${in_range}=  ixia verify traffic rate  ${rx_value_n}  ${tx_value_p}
    Should be true  ${in_range}
       
test setup topology
    base suite setup

test teardown topology
    T5 base suite teardown

T5 base suite teardown
    base suite teardown  

test teardown
  delete traffic    

   
start monitoring the exception
	Log To console  Starting to monitor Exception logs
	start monitor exception  ${monitor_file}
	${pid}=  pid return monitor file  master
	Should Be True  ${pid}
	${pid}=  pid return monitor file  slave
	Should Be True  ${pid}

stop monitoring the exception
	Log To Console  Stopping the monitor Exception logs
	${pid}=  pid return monitor file  master
	stop monitor exception  ${pid}  master
	${pid}=  pid return monitor file  slave
	stop monitor exception  ${pid}  slave
	
parse monitoring file
	Log To Console  Looking for exceptions in the file
	${size}=  parse exception  c1  ${monitor_file}
	#Should Be True  ${size} == 0
	${size}=  parse exception  c2  ${monitor_file}
	#Should Be True  ${size} == 0

verify fabric switch link and errors
	Log To Console  Verifing the fabric switch and links
	rest verify fabric switch all
	rest verify fabric link
	${result}=  rest verify fabric errors
	Should Be True  ${result} == 0
	
		

Collect Logs  [Arguments]  ${text}
    Log To Console  ${text}
	Dump Show Commands
 
