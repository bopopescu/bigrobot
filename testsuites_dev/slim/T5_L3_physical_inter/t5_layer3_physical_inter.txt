* Setting
Documentation   T5 Basic L3 two spine three leaf rack with dual-tor Test Suite
Suite Setup     T5 base suite setup
Suite Teardown  T5 base suite teardown
Test Setup      setup topology
Test Teardown   teardown topology
Force Tags      T5 Sanity
Library         keywords/BsnCommon.py
Library         keywords_dev/slim/Host.py
Library         keywords/T5.py
Library         keywords/T5L3.py
Library         keywords/T5Platform.py
Library         keywords_dev/animesh/BsnCommonShow.py
Library         keywords_dev/slim/SwitchLight.py
Library	        Collections.py
Library         keywords/Ixia.py
#Library			autobot/helpers/__init__.py
Resource		testsuites_dev/slim/T5_L3_physical_inter/t5_layer3_physical_inter_variables.txt
Resource		testsuites/T5/t5_dualleaf_three_rack_physical_resource.txt


* Test Cases
Inter tenant L3 untagged traffic with dynamic endpoints same rack
	L3 inter tenant same rack untagged with dynamic endpoints
#	[Tags]							skipped			smoke				sanity			

Inter tenant L3 untagged traffic with dynamic endpoints across rack
	L3 inter tenant across rack untagged with dynamic endpoints
#	[Tags]							skipped			smoke				sanity	

inter tenant L3 tagged traffic with dynamic endpoints same rack
	L3 inter tenant same rack tagged with dynamic endpoints
#	[Tags]							skipped			smoke				sanity			

inter tenant L3 tagged traffic with dynamic endpoints across rack
	L3 inter tenant across rack tagged with dynamic endpoints
#	[Tags]							skipped			smoke				sanity	

Add and delete default route on tenant
	Add and delete default route on tenant router
#	[Tags]							skipped			sanity	

Add and delete static route on tenant
	Add and delete static route on tenant router
#	[Tags]							skipped			sanity	

Add and delete more specific route on tenant over existing static route
	Add and delete more specific route on tenant router over existing static route
#	[Tags]							skipped			sanity	


Add and delete tenant vns router interface
	Add and delete tenant vns router interface towards system router
	[Tags]							skipped			sanity	

L3 inter tenant forwarding with end host moved to another port
	L3 inter tenant host moved 
	[Tags]							skipped			feature	

L3 inter tenant forwarding split horizon on the same port 
	Log 										manual pass
	[Tags]										feature			manual		
	
Add and delete system router interface to tenant router
	Add and delete system router interface on tenant router
	[Tags]							skipped			feature	

L3 ttl one forwarding
	Verify inter tenant L3 traffic with ttl value of one two and three
	[Tags]							skipped			feature	
	
Inter tenant DHCP relay
	L3 dhcp relay across tenant
	Log								manual untested
	[Tags]						manual			untested			feature			

Dhcp request from other host in other tenants with dhcp enabled but no inter tenant route
	L3 inter tenant dhcp discover without routes
	Log								manual untested
	[Tags]						manual			untested			feature			

dhcp request from other host in other tenants without dhcp relay enabled but with inter tenant route
	L3 inter tenant dhcp request without dhcp enabled but routes are present
	Log								manual untested
	[Tags]						manual			untested			feature			

Inter tenant dhcp relay with multiple dhcp servers
	Inter tenant dhcp relay with multiple dhcp servers
	Log								manual untested
	[Tags]						manual			untested			feature			

Host moved to another vns on another tenant and renew dhcp 
	Verify host is able to request new dhcp address after moved to another vns in another tenant
	Log								manual untested
	[Tags]						manual			untested			feature			


Overlapping IP subnet with and without private keyword
	overlapping IP subnet with and without private keyword
	Log								manual untested
	[Tags]						manual			untested			feature			
	
Overlapping IP with vlsm with and without private keyword
	overlapping private ip subnet with vlsm with and without private keyword
	Log								manual untested
	[Tags]						manual			untested			feature			

One public IP and multiple private IP
	L3 inter tenant traffic from public to private IP on multiple tenant
	Log								manual untested
	[Tags]						manual			untested			feature			

Verify private IP is able to communicate with other vns in the same tenant
	L3 intra tenant traffic from private IP subnet
	Log								manual untested
	[Tags]						manual			untested			feature			

Controller HA failover via CLI
	Controller HA failover via CLI and verify L3 inter tenant traffic after HA
	Log								manual untested
	[Tags]						manual			untested			feature			

Controller HA failover via reboot of master
	Controller HA failover via master reboot and verify L3 inter tenant traffic
	Log								manual untested
	[Tags]						manual			untested			feature			
	
Spine reboot
	Reboot of spine and verify L3 inter tenant traffic 
	Log								manual untested
	[Tags]						manual			untested			feature			

Leaf reboot
	Reboot of a single leaf in a dual-tor setup and verify L3 inter tenant traffic
	Log								manual untested
	[Tags]						manual			untested			feature			

Traffic load balance across ECMP group
	Verify traffic is load balanced across ecmp group
	Log								manual untested
	[Tags]						manual			untested			feature		

Add and delete one ECMP members with active traffic in ecmp group
	Verify L3 traffic is forwarding with add and delete of ecmp members
	Log								manual untested
	[Tags]						manual			untested			feature			

Add and delete all ECMP members in ecmp group  
	Delete all members in ecmp group and verify traffic behavior
	Log								manual untested
	[Tags]						manual			untested			feature			

Delete existing one ECMP members and add new ECMP member
	Delete and add new ecmp member
	Log								manual untested
	[Tags]						manual			untested			feature			

Add and delete tenant system interface on tenant router
	Add and delete tenant system interface on tenant router
	Log								manual untested
	[Tags]						manual			untested			feature			

Add and delete router interface on tenant system
	Add and delete router interface on tenant system
	Log								manual untested
	[Tags]						manual			untested			feature			

L3 inter tenant traffic behavior in headless mode
	Verify L3 inter tenant traffic forwarding in headless mode
	Log								manual untested
	[Tags]						manual			untested			feature			

Link flap between leaf and spine
	Verify L3 inter tenant traffic forwarding with link flapping between spine and leaf
	Log								manual untested
	[Tags]						manual			untested			feature			

L3 inter tenant forwarding to external router
	Verify L3 inter tenant forwarding to external router
	Log								manual untested
	[Tags]						manual			untested			feature			

L3 inter tenant forwarding to VRRP routers
	Verify L3 inter tenant forwarding to vrrp vip 
	Log								manual untested
	[Tags]						manual			untested			feature			


L3 inter tenant traceroute
	Inter tenant traceroute across fabric
	Log								manual untested
	[Tags]						manual			untested			feature			

Add and delete endpoints with L3 inter tenant traffic
	Add and delete endpoints with L3 inter tenant traffic
	Log							manual untested
	[Tags]						manual			untested			feature			

Tenant router with full 32 bit mask
	configure tenant router with full 32 bit mask
	Log							manual untested
	[Tags]						manual			untested			feature			

Verify private subnet cannot be routed via system router
	Verify private subnet cannot be routed among tenants
	Log							manual untested
	[Tags]						manual			untested			feature			

L3 inter tenant traffic with jumbo frame
	Verify jumbo frame forwarding between tenant
	Log							manual untested
	[Tags]						manual			untested			feature			

L3 inter tenant with CRC errors
	Verify packets with CRC errors is dropped 
	Log							manual untested
	[Tags]						manual			untested			feature			

Verify route next hop IP must be in the same tenant
	Verify traffic forwarding takes place only in the same tenant with next hop IP
	Log							manual untested
	[Tags]						manual			untested			feature			

Verify ECMP next hop IP must be in the same tenant
	Verify traffic forwarding across ecmp members must be in the same tenant
	Log							manual untested
	[Tags]						manual			untested			feature			

L3 inter tenant shutdown and bringup a leaf switch in a dual tor setup
	Shutdown and bringup a leaf switch in dual tor and verify L3 inter tenant forwarding
	Log							manual untested
	[Tags]						manual			untested			feature			

L3 inter tenant shutdown and bringup a spine switch 
	Shutdown and bringup a spine switch and verify L3 inter tenant forwarding
	Log							manual untested
	[Tags]						manual			untested			feature			


L3 inter tenant destroy active controller VM from KVM
	HA failover by destroying active controller VM from KVM
	Log							manual untested
	[Tags]						manual			untested			feature			


L3 inter tenant destroy standby controller VM from KVM
	Verify L3 inter tenant traffic behavior when standby controller VM is destroy
	Log							manual untested
	[Tags]						manual			untested			feature			

Restart ofad on leaf switch
	restart ofad on leaf switch in dual tor setup and verify L3 inter tenant traffic forwarding
	Log							manual untested
	[Tags]						manual			untested			feature			

Restart ofad on spine switch
	restart ofad on spine switch and verify L3 inter tenant forwarding
	Log							manual untested
	[Tags]						manual			untested			feature			

		
	

* Keywords
L3 inter tenant same rack untagged with dynamic endpoints
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0	
	BASH ifup intf								h5								bond0	
	BASH ifup intf								h6								bond0			
	REST add portgroup to vns					X								X1						${leaf2_pc1}			-1
	REST add portgroup to vns					Y								Y1						${leaf2_pc2}			-1
	REST add interface to vns					X								X1						${leaf0-a}				${ixia1}				-1
	REST add interface to vns					Y								Y1						${leaf0-b}				${ixia2}				-1
	BASH add ip address							h5								10.251.1.11/24			bond0	
	BASH add ip address							h6								10.252.1.11/24			bond0
	BASH add route								h5								10.252.1.0/24			10.251.1.1
	BASH add route								h6								10.251.1.0/24			10.252.1.1
	sleep										20	
	BASH ping									h5								10.251.1.1				count=10
	BASH ping									h6								10.252.1.1				count=10
	${value} = 									BASH verify arp					h5						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h6						10.252.1.1
	Should Be True								${value} 
	${mac1} = 									BASH get intf mac				h5						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h6						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h5						10.252.1.11 			count=10
	Should Be True  							${loss} == 0	
#	${stream1}=  								L3 add  						name=stream1		  	flow=a<->b 				frame_rate=1000  			frame_size=9216  			frame_cnt=10000
#	...     									src_ip=10.251.1.101				src_gw=10.251.1.1		dst_ip=10.252.1.101		dst_gw=10.252.1.1			 			
#   start traffic  								${stream1}
#   sleep  10
#   stop traffic								${stream1}
#    verify results 								transmitted_frames  			received_valid_frames	${stream1}  			stream1
 	BASH delete route							h5								10.252.1.0/24			10.251.1.1
	BASH delete route							h6								10.251.1.0/24			10.252.1.1
	
	
L3 inter tenant across rack untagged with dynamic endpoints	
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0		
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0			
	REST add portgroup to vns					X								X1						${leaf2_pc1}			-1
	REST add portgroup to vns					Y								Y1						${leaf1_pc2}			-1
	REST add interface to vns					X								X1						${leaf0-a}				${ixia1}				-1
	REST add interface to vns					Y								Y1						${leaf1-a}				${ixia3}				-1	
	BASH add ip address							h5								10.251.1.11/24			bond0	
	BASH add ip address							h4								10.252.1.11/24			bond0
	BASH add route								h5								10.252.0.0/16			10.251.1.1
	BASH add route								h4								10.251.0.0/16			10.252.1.1
	sleep										20	
	BASH ping									h5								10.251.1.1				count=10
	BASH ping									h4								10.252.1.1				count=10
	${value} = 									BASH verify arp					h5						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h4						10.252.1.1
	Should Be True								${value} 	
	${mac1} = 									BASH get intf mac				h5						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h4						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h5						10.252.1.11 			count=10
	Should Be True  							${loss} == 0	
#	${stream1}=  								L3 add  						name=stream1		  	flow=a<->c 				frame_rate=1000  			frame_size=9216  			frame_cnt=10000
#	...     									src_ip=10.251.1.101				src_gw=10.251.1.1		dst_ip=10.252.1.101		dst_gw=10.252.1.1			 			
#   start traffic  								${stream1}
#   sleep  10
#   stop traffic								${stream1}
#   verify results 								transmitted_frames  			received_valid_frames  		${stream1}  			stream1
 	BASH delete route							h5								10.252.0.0/16			10.251.1.1
	BASH delete route							h4								10.251.0.0/16			10.252.1.1
	
	
L3 inter tenant same rack tagged with dynamic endpoints
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0				
	REST add portgroup to vns					X								X1						${leaf0_pc1}			1001
	REST add portgroup to vns					Y								Y1						${leaf0_pc2}			1002
	REST add interface to vns					X								X1						${leaf0-a}				${ixia1}				101
	REST add interface to vns					Y								Y1						${leaf0-b}				${ixia2}				201
	BASH add tag								h1								bond0					1001
	BASH add tag								h2								bond0					1002
	BASH ifup intf								h1								bond0.1001
	BASH ifup intf								h2								bond0.1002
	BASH add ip address							h1								10.251.1.11/24			bond0.1001	
	BASH add ip address							h2								10.252.1.11/24			bond0.1002
	BASH add route								h1								10.252.0.0/16			10.251.1.1
	BASH add route								h2								10.251.0.0/16			10.252.1.1
	sleep										20	
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Not Be True							${value} 		
	${value} =									BASH verify arp					h2						10.252.1.1
	Should Not Be True							${value} 	
	BASH ping									h1								10.252.1.11				count=10
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h2						10.252.1.1
	Should Be True								${value} 	
	${mac1} = 									BASH get intf mac				h1						bond0.1001
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h2						bond0.1002
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints		
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10
	Should Be True  							${loss} == 0	
	BASH delete route							h1								10.252.0.0/16			10.251.1.1
	BASH delete route							h2								10.251.0.0/16			10.252.1.1	
	
	
	
L3 inter tenant across rack tagged with dynamic endpoints	
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0	
	REST add portgroup to vns					X								X1						${leaf0_pc1}			1001
	REST add portgroup to vns					Y								Y1						${leaf1_pc1}			1003
	REST add interface to vns					X								X1						${leaf0-a}				${ixia1}				101
	REST add interface to vns					Y								Y1						${leaf1-a}				${ixia3}				201	
	BASH add tag								h1								bond0					1001
	BASH add tag								h3								bond0					1003
	BASH ifup intf								h1								bond0.1001
	BASH ifup intf								h3								bond0.1003
	BASH add ip address							h1								10.251.1.11/24			bond0.1001
	BASH add ip address							h3								10.252.1.11/24			bond0.1003
	BASH add route								h1								10.252.0.0/16			10.251.1.1
	BASH add route								h3								10.251.0.0/16			10.252.1.1
	sleep										20	
#	BASH ping									h1								10.251.1.1				count=10
#	BASH ping									h3								10.252.1.1				count=10
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Not Be True							${value} 		
	${value} =									BASH verify arp					h3						10.252.1.1
	Should Not Be True							${value} 	
	BASH ping									h1								10.252.1.11				count=10
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h3						10.252.1.1
	Should Be True								${value} 		
	${mac1} = 									BASH get intf mac				h1						bond0.1001
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h3						bond0.1003
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints		
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10
	Should Be True  							${loss} == 0		
	BASH delete route							h1								10.252.0.0/16			10.251.1.1
	BASH delete route							h3								10.251.0.0/16			10.252.1.1
	

Add and delete default route on tenant router
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0	
	REST add portgroup to vns					X								X1						${leaf0_pc1}			1001
	REST add portgroup to vns					Y								Y1						${leaf1_pc1}			1003
	REST add interface to vns					X								X1						${leaf0-a}				${ixia1}				101
	REST add interface to vns					Y								Y1						${leaf1-a}				${ixia3}				201	
	BASH add tag								h1								bond0					1001
	BASH add tag								h3								bond0					1003
	BASH ifup intf								h1								bond0.1001
	BASH ifup intf								h3								bond0.1003
	BASH add ip address							h1								10.251.1.11/24			bond0.1001
	BASH add ip address							h3								10.252.1.11/24			bond0.1003
	BASH add route								h1								10.252.0.0/16			10.251.1.1
	BASH add route								h3								10.251.0.0/16			10.252.1.1
	sleep										20	
#	BASH ping									h1								10.251.1.1				count=10
#	BASH ping									h3								10.252.1.1				count=10
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Not Be True							${value} 		
	${value} =									BASH verify arp					h3						10.252.1.1
	Should Not Be True							${value} 	
	BASH ping									h1								10.252.1.11				count=10
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h3						10.252.1.1
	Should Be True								${value} 		
	${mac1} = 									BASH get intf mac				h1						bond0.1001
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h3						bond0.1003
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints		
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10
	Should Be True  							${loss} == 0		
	REST delete static routes					X								10.252.0.0/16		 	{"tenant-name": "system"}	
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10
	Should Be True  							${loss} == 100		
	REST add static routes						X								0.0.0.0/0				{"tenant-name": "system"}
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10
	Should Be True  							${loss} == 0		
	REST delete static routes					X								0.0.0.0/0				{"tenant-name": "system"}
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10
	Should Be True  							${loss} == 100		
	BASH delete route							h1								10.252.0.0/16			10.251.1.1
	BASH delete route							h3								10.251.0.0/16			10.252.1.1
	
		
Add and delete static route on tenant router
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0	
	REST add portgroup to vns					X								X1						${leaf0_pc1}			1001
	REST add portgroup to vns					Y								Y1						${leaf1_pc1}			1003
	REST add interface to vns					X								X1						${leaf0-a}				${ixia1}				101
	REST add interface to vns					Y								Y1						${leaf1-a}				${ixia3}				201	
	BASH add tag								h1								bond0					1001
	BASH add tag								h3								bond0					1003
	BASH ifup intf								h1								bond0.1001
	BASH ifup intf								h3								bond0.1003
	BASH add ip address							h1								10.251.1.11/24			bond0.1001
	BASH add ip address							h3								10.252.1.11/24			bond0.1003
	BASH add route								h1								10.252.0.0/16			10.251.1.1
	BASH add route								h3								10.251.0.0/16			10.252.1.1
	sleep										20	
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Not Be True							${value} 		
	${value} =									BASH verify arp					h3						10.252.1.1
	Should Not Be True							${value} 	
	BASH ping									h1								10.252.1.11				count=10
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h3						10.252.1.1
	Should Be True								${value} 		
	${mac1} = 									BASH get intf mac				h1						bond0.1001
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h3						bond0.1003
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints		
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10
	Should Be True  							${loss} == 0		
	REST delete static routes					X								10.252.0.0/16		 	{"tenant-name": "system"}	
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10
	Should Be True  							${loss} == 100		
	REST add static routes						X								10.252.0.0/16		 	{"tenant-name": "system"}	
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10
	Should Be True  							${loss} == 0		
	BASH delete route							h1								10.252.0.0/16			10.251.1.1
	BASH delete route							h3								10.251.0.0/16			10.252.1.1


Add and delete more specific route on tenant router over existing static route
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0	
	REST add portgroup to vns					X								X1						${leaf0_pc1}			1001
	REST add portgroup to vns					Y								Y1						${leaf1_pc1}			1003
	REST add interface to vns					X								X1						${leaf0-a}				${ixia1}				101
	REST add interface to vns					Y								Y1						${leaf1-a}				${ixia3}				201	
	BASH add tag								h1								bond0					1001
	BASH add tag								h3								bond0					1003
	BASH ifup intf								h1								bond0.1001
	BASH ifup intf								h3								bond0.1003
	BASH add ip address							h1								10.251.1.11/24			bond0.1001
	BASH add ip address							h3								10.252.1.11/24			bond0.1003
	BASH add route								h1								10.252.0.0/16			10.251.1.1
	BASH add route								h3								10.251.0.0/16			10.252.1.1
	sleep										20	
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Not Be True							${value} 		
	${value} =									BASH verify arp					h3						10.252.1.1
	Should Not Be True							${value} 	
	BASH ping									h1								10.252.1.11				count=10
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h3						10.252.1.1
	Should Be True								${value} 		
	${mac1} = 									BASH get intf mac				h1						bond0.1001
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h3						bond0.1003
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints		
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10
	Should Be True  							${loss} == 0		
	REST add static routes						X								10.252.1.0/24		 	{"tenant-name": "system"}	
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10
	Should Be True  							${loss} == 0		
	REST delete static routes					X								10.252.0.0/16		 	{"tenant-name": "system"}	
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10
	Should Be True  							${loss} == 0		
	REST add static routes						X								10.252.0.0/16		 	{"tenant-name": "system"}	
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10
	Should Be True  							${loss} == 0		
	BASH delete route							h1								10.252.0.0/16			10.251.1.1
	BASH delete route							h3								10.251.0.0/16			10.252.1.1


Add and delete tenant vns router interface towards system router
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0	
	REST add portgroup to vns					X								X1						${leaf0_pc1}			1001
	REST add portgroup to vns					Y								Y1						${leaf1_pc1}			1003
	REST add interface to vns					X								X1						${leaf0-a}				${ixia1}				101
	REST add interface to vns					Y								Y1						${leaf1-a}				${ixia3}				201	
	BASH add tag								h1								bond0					1001
	BASH add tag								h3								bond0					1003
	BASH ifup intf								h1								bond0.1001
	BASH ifup intf								h3								bond0.1003
	BASH add ip address							h1								10.251.1.11/24			bond0.1001
	BASH add ip address							h3								10.252.1.11/24			bond0.1003
	BASH add route								h1								10.252.0.0/16			10.251.1.1
	BASH add route								h3								10.251.0.0/16			10.252.1.1
	sleep										10	
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Not Be True							${value} 		
	${value} =									BASH verify arp					h3						10.252.1.1
	Should Not Be True							${value} 	
	BASH ping									h1								10.252.1.11				count=10
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h3						10.252.1.1
	Should Be True								${value} 		
	${mac1} = 									BASH get intf mac				h1						bond0.1001
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h3						bond0.1003
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints		
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10
	Should Be True  							${loss} == 0		
	REST delete system intf to tenant routers		X
	sleep											1
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10
	Should Be True  							${loss} == 100		
	REST add system intf to tenant routers		X
	sleep										1
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10
	Should Be True  							${loss} == 0		
	BASH delete route							h1								10.252.0.0/16			10.251.1.1
	BASH delete route							h3								10.251.0.0/16			10.252.1.1

L3 inter tenant host moved 
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0	
	REST add portgroup to vns					X								X1						${leaf0_pc1}			1001
	REST add portgroup to vns					Y								Y1						${leaf1_pc1}			1003
	REST add portgroup to vns					Y								Y1						${leaf2_pc1}			-1
	REST add interface to vns					X								X1						${leaf0-a}				${ixia1}				101
	REST add interface to vns					Y								Y1						${leaf1-a}				${ixia3}				201	
	BASH add tag								h1								bond0					1001
	BASH add tag								h3								bond0					1003
	BASH ifup intf								h1								bond0.1001
	BASH ifup intf								h3								bond0.1003
	BASH add ip address							h1								10.251.1.11/24			bond0.1001
	BASH add ip address							h3								10.252.1.11/24			bond0.1003
	BASH add route								h1								10.252.0.0/16			10.251.1.1
	BASH add route								h3								10.251.0.0/16			10.252.1.1
	sleep										10	
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Not Be True							${value} 		
	${value} =									BASH verify arp					h3						10.252.1.1
	Should Not Be True							${value} 	
	BASH ping									h1								10.252.1.11				count=10
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h3						10.252.1.1
	Should Be True								${value} 		
	${mac1} = 									BASH get intf mac				h1						bond0.1001
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h3						bond0.1003
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints		
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10
	Should Be True  							${loss} == 0		
	BASH ifdown intf							h3								bond0
	BASH set mac address						h5								bond0					${mac2}
	BASH add ip address							h5								10.252.1.11/24			bond0
	BASH add route								h5								10.251.0.0/16			10.252.1.1
	sleep										1
	BASH ping									h1								10.252.1.11				count=5
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10
	Should Be True  							${loss} == 0		
	BASH delete route							h1								10.252.0.0/16			10.251.1.1
	BASH delete route							h3								10.251.0.0/16			10.252.1.1
	BASH delete route							h5								10.251.0.0/16			10.252.1.1
		

Add and delete system router interface on tenant router
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0	
	REST add portgroup to vns					X								X1						${leaf0_pc1}			1001
	REST add portgroup to vns					Y								Y1						${leaf1_pc1}			1003
	REST add interface to vns					X								X1						${leaf0-a}				${ixia1}				101
	REST add interface to vns					Y								Y1						${leaf1-a}				${ixia3}				201	
	BASH add tag								h1								bond0					1001
	BASH add tag								h3								bond0					1003
	BASH ifup intf								h1								bond0.1001
	BASH ifup intf								h3								bond0.1003
	BASH add ip address							h1								10.251.1.11/24			bond0.1001
	BASH add ip address							h3								10.252.1.11/24			bond0.1003
	BASH add route								h1								10.252.0.0/16			10.251.1.1
	BASH add route								h3								10.251.0.0/16			10.252.1.1
	sleep										10	
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Not Be True							${value} 		
	${value} =									BASH verify arp					h3						10.252.1.1
	Should Not Be True							${value} 	
	BASH ping									h1								10.252.1.11				count=10
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h3						10.252.1.1
	Should Be True								${value} 		
	${mac1} = 									BASH get intf mac				h1						bond0.1001
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h3						bond0.1003
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints		
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10
	Should Be True  							${loss} == 0		
	REST delete tenant routers intf to system	Y
	sleep										1
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10
	Should Be True  							${loss} == 100		
	REST add tenant routers intf to system		Y
	sleep										1
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10
	Should Be True  							${loss} == 0		
	BASH delete route							h1								10.252.0.0/16			10.251.1.1
	BASH delete route							h3								10.251.0.0/16			10.252.1.1

Verify inter tenant L3 traffic with ttl value of one two and three
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0
	BASH ifup intf								h5								bond0
	BASH ifup intf								h6								bond0	
	REST add portgroup to vns					X								X1						${leaf0_pc1}			1001
	REST add portgroup to vns					Y								Y1						${leaf1_pc1}			1003
	REST add interface to vns					X								X1						${leaf0-a}				${ixia1}				101
	REST add interface to vns					Y								Y1						${leaf1-a}				${ixia3}				201	
	BASH add tag								h1								bond0					1001
	BASH add tag								h3								bond0					1003
	BASH ifup intf								h1								bond0.1001
	BASH ifup intf								h3								bond0.1003
	BASH add ip address							h1								10.251.1.11/24			bond0.1001
	BASH add ip address							h3								10.252.1.11/24			bond0.1003
	BASH add route								h1								10.252.0.0/16			10.251.1.1
	BASH add route								h3								10.251.0.0/16			10.252.1.1
	sleep										20	
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Not Be True							${value} 		
	${value} =									BASH verify arp					h3						10.252.1.1
	Should Not Be True							${value} 	
	BASH ping									h1								10.252.1.11				count=10
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h3						10.252.1.1
	Should Be True								${value} 		
	${mac1} = 									BASH get intf mac				h1						bond0.1001
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h3						bond0.1003
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints		
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10
	Should Be True  							${loss} == 0		
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10			ttl=1
	Should Be True  							${loss} == 100		
	${result} =       							BASH content 					h1
    log              							result from bash ping is ${result}
   	Should Contain X Times						${result}						Time to live exceeded	10
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10			ttl=2
	Should Be True  							${loss} == 100		
	${result} =       							BASH content 					h1
    log              							result from bash ping is ${result}
   	Should Contain X Times						${result}						Time to live exceeded	10
	${loss} = 									BASH ping						h1						10.252.1.11 			count=10			ttl=3
	Should Be True  							${loss} == 0
	BASH delete route							h1								10.252.0.0/16			10.251.1.1
	BASH delete route							h3								10.251.0.0/16			10.252.1.1
	













































initialize host
	BASH delete tag								h1								bond0.1001				soft_error=${true}
	BASH delete tag								h2								bond0.1002				soft_error=${true}
	BASH delete tag								h3								bond0.1003				soft_error=${true}
	BASH delete tag								h4								bond0.1004				soft_error=${true}
	BASH delete tag								h5								bond0.1005				soft_error=${true}
	BASH delete tag								h6								bond0.1006				soft_error=${true}
	
	BASH init intf								h1								bond0
	BASH init intf								h2								bond0
	BASH init intf								h3								bond0
	BASH init intf								h4								bond0
	BASH init intf								h5								bond0
	BASH init intf								h6								bond0
	BASH ifdown intf							h1 								bond0
	BASH ifdown intf							h2								bond0
	BASH ifdown intf							h3								bond0
	BASH ifdown intf							h4								bond0
	BASH ifdown intf							h5								bond0
	BASH ifdown intf							h6								bond0	
	BASH release dhcpv4 address					h1								bond0
	BASH release dhcpv4 address					h2								bond0
	BASH release dhcpv4 address					h3								bond0
	BASH release dhcpv4 address					h4								bond0
	BASH release dhcpv4 address					h5								bond0
	BASH release dhcpv4 address					h6								bond0


setup topology
	initialize host
	add fabric switch
	sleep 											1
	REST add tenant 								X
	REST add tenant									Y
	REST add tenant									Z
	REST add tenant									system
	REST add vns									X							X1
	REST add vns									X							X2
	REST add vns									X							X3
	REST add vns									Y							Y1
	REST add vns									Y							Y2
	REST add vns									Y							Y3
	REST add vns									Z							Z1
	REST add vns									Z							Z2
	REST add vns									Z							Z3
	REST add router intf							X							X1
	REST add router intf							X							X2
	REST add router intf							X							X3
	REST add router intf							Y							Y1
	REST add router intf							Y							Y2
	REST add router intf							Y							Y3
	REST add router intf							Z							Z1
	REST add router intf							Z							Z2
	REST add router intf							Z							Z3	
	REST add vns ip  								X							X1				10.251.1.1				24	
	REST add vns ip  								X							X2				10.251.2.1				24	
	REST add vns ip  								X							X3				10.251.3.1				24	
	REST add vns ip  								Y							Y1				10.252.1.1				24	
	REST add vns ip  								Y							Y2				10.252.2.1				24	
	REST add vns ip  								Y							Y3				10.252.3.1				24	
	REST add vns ip  								Z							Z1				10.253.1.1				24	
	REST add vns ip  								Z							Z2				10.253.2.1				24	
	REST add vns ip  								Z							Z3				10.253.3.1				24	
	REST add interface to portgroup					leaf0-a						${leaf0_pc1_intf1}					${leaf0_pc1}
	REST add interface to portgroup					leaf0-b						${leaf0_pc1_intf2}					${leaf0_pc1}
	REST add interface to portgroup					leaf0-a						${leaf0_pc2_intf1}					${leaf0_pc2}
	REST add interface to portgroup					leaf0-b						${leaf0_pc2_intf2}					${leaf0_pc2}
#	REST add interface to portgroup					leaf0-a						${leaf0_pc3_intf1}					${leaf0_pc3}
#	REST add interface to portgroup					leaf0-b						${leaf0_pc3_intf2}					${leaf0_pc3}
#	REST add interface to portgroup					leaf0-a						${leaf0_pc4_intf1}					${leaf0_pc4}
#	REST add interface to portgroup					leaf0-b						${leaf0_pc4_intf2}					${leaf0_pc4}
#	REST add interface to portgroup					leaf0-a						${leaf0_pc5_intf1}					${leaf0_pc5}
#	REST add interface to portgroup					leaf0-a						${leaf0_pc5_intf2}					${leaf0_pc5}
#	REST add interface to portgroup					leaf0-a						${leaf0_pc6_intf1}					${leaf0_pc6}
#	REST add interface to portgroup					leaf0-a						${leaf0_pc6_intf2}					${leaf0_pc6}
	REST add interface to portgroup					leaf1-a						${leaf1_pc1_intf1}					${leaf1_pc1}
	REST add interface to portgroup					leaf1-b						${leaf1_pc1_intf2}					${leaf1_pc1}
	REST add interface to portgroup					leaf1-a						${leaf1_pc2_intf1}					${leaf1_pc2}
	REST add interface to portgroup					leaf1-b						${leaf1_pc2_intf2}					${leaf1_pc2}
#	REST add interface to portgroup					leaf1-a						${leaf1_pc3_intf1}					${leaf1_pc3}
#	REST add interface to portgroup					leaf1-b						${leaf1_pc3_intf2}					${leaf1_pc3}
#	REST add interface to portgroup					leaf1-a						${leaf1_pc4_intf1}					${leaf1_pc4}
#	REST add interface to portgroup					leaf1-b						${leaf1_pc4_intf2}					${leaf1_pc4}
	REST add interface to portgroup					leaf2-a						${leaf2_pc1_intf1}					${leaf2_pc1}
	REST add interface to portgroup					leaf2-b						${leaf2_pc1_intf2}					${leaf2_pc1}
	REST add interface to portgroup					leaf2-a						${leaf2_pc2_intf1}					${leaf2_pc2}
	REST add interface to portgroup					leaf2-b						${leaf2_pc2_intf2}					${leaf2_pc2}	
	REST add tenant routers intf to system			X
	REST add tenant routers intf to system			Y
	REST add tenant routers intf to system			Z
	REST add system intf to tenant routers 			X
	REST add system intf to tenant routers 			Y
	REST add system intf to tenant routers 			Z
#	REST add policy									X							allow_all
#	REST add policy									Y							allow_all
#	${result} = 									REST add policy item		X					allow_all			10		permit 			{"tenant-name": "X"}, "dst": {"tenant-name": "system"}
#	Should Be True									${result}
#	${result} = 									REST add policy item		X					allow_all			20		permit			{"tenant-name": "system"}, "dst": {"tenant-name": "X"}
#	Should Be True									${result}
	REST add static routes							X							10.252.0.0/16		 {"tenant-name": "system"}
	REST add static routes							Y							10.251.0.0/16		 {"tenant-name": "system"}
		
	

teardown topology
	REST delete vns ip  							X							X1				10.251.1.1				24	
	REST delete vns ip  							X							X2				10.251.2.1				24	
	REST delete vns ip  							X							X3				10.251.3.1				24	
	REST delete vns ip  							Y							Y1				10.252.1.1				24	
	REST delete vns ip  							Y							Y2				10.252.2.1				24	
	REST delete vns ip  							Y							Y3				10.252.3.1				24	
	REST delete vns ip  							Z							Z1				10.253.1.1				24	
	REST delete vns ip  							Z							Z2				10.253.2.1				24	
	REST delete vns ip  							Z							Z3				10.253.3.1				24	
	REST delete vns									X							X1
	REST delete vns									X							X2
	REST delete vns									X							X3
	REST delete vns									Y							Y1
	REST delete vns									Y							Y2
	REST delete vns									Y							Y3
	REST delete vns									Z							Z1
	REST delete vns									Z							Z2
	REST delete vns									Z							Z3
	REST delete tenant								X
	REST delete tenant								Y
	REST delete tenant								Z
	REST delete tenant routers intf to system		X
	REST delete tenant routers intf to system		Y
	REST delete tenant routers intf to system		Z
#	delete fabric switch
	initialize host
	

T5 base suite setup
	base suite setup
	add fabric switch
	sleep 											5
	${result} = 									CLI verify controller		s1							c1		
	Should Be True									${result}
	${result} = 									CLI verify controller   	s1							c2
	Should Be True									${result}
	${result} = 									CLI verify controller       s2							c1
	Should Be True									${result}
	${result} = 									CLI verify controller       s2							c2
	Should Be True									${result}
	${result} = 									CLI verify controller       s3							c1
	Should Be True									${result}
	${result} = 									CLI verify controller       s3							c2
	Should Be True									${result}
	${result} = 									CLI verify controller       s4							c1
	Should Be True									${result}
	${result} = 									CLI verify controller       s4							c2
	Should Be True									${result}
	${result} = 									CLI verify controller       s5							c1
	Should Be True									${result}
	${result} = 									CLI verify controller       s5							c2
	Should Be True									${result}
	${result} = 									CLI verify controller       s6							c1
	Should Be True									${result}
	${result} = 									CLI verify controller       s6							c2
	Should Be True									${result}		
  	# REST add switch  								spine0
  	# REST add dpid  									spine0  					${spine0_dpid}
  	# REST add fabric role  							spine0  					spine
  	# REST add switch  								spine1	
  	# REST add dpid  									spine1  					${spine1_dpid}
  	# REST add fabric role						  	spine1  					spine
  	# REST add switch  								leaf0a
  	# REST add dpid  									leaf0a  					${leaf0a_dpid}
  	# REST add fabric role  							leaf0a  					leaf
  	# REST add switch  								leaf0b
  	# REST add dpid  									leaf0b  					${leaf0b_dpid}
  	# REST add fabric role  							leaf0b  					leaf
  	# REST add switch  								leaf1a
  	# REST add dpid  									leaf1a  					${leaf1a_dpid}
  	# REST add fabric role  							leaf1a  					leaf
 	# REST add switch  								leaf1b
  	# REST add dpid  									leaf1b  					${leaf1b_dpid}
  	# REST add fabric role  							leaf1b  					leaf
  	# REST add switch  								leaf2a
  	# REST add dpid  									leaf2a  					${leaf2a_dpid}
  	# REST add fabric role  							leaf2a  					leaf
 	# REST add switch  								leaf2b
  	# REST add dpid  									leaf2b  					${leaf2b_dpid}
  	# REST add fabric role  							leaf2b  					leaf  	
	# REST add portgroup								${leaf0_pc1}
	# REST add portgroup								${leaf0_pc2}
	# REST add portgroup								${leaf0_pc3}
	# REST add portgroup								${leaf0_pc4}
	# REST add portgroup								${leaf0_pc5}
	# REST add portgroup								${leaf0_pc6}	
	# REST add portgroup								${leaf1_pc1}
	# REST add portgroup								${leaf1_pc2}
	# REST add portgroup								${leaf1_pc3}
	# REST add portgroup								${leaf1_pc4}
	# REST add portgroup								${leaf2_pc1}
	# REST add portgroup								${leaf2_pc2}
	REST add portgroup								${leaf0_pc1}
	REST add portgroup								${leaf0_pc2}
	REST add portgroup								${leaf1_pc1}
	REST add portgroup								${leaf1_pc2}
	REST add portgroup								${leaf2_pc1}
	REST add portgroup								${leaf2_pc2}
	

#	REST add leaf group								leaf0a						leaf0
#	REST add leaf group								leaf0b						leaf0
#	REST add leaf group								leaf1a						leaf1
#	REST add leaf group								leaf1b						leaf1
#	REST add leaf group								leaf2a						leaf2
#	REST add leaf group								leaf2b						leaf2
		

  
T5 base suite teardown
	delete fabric switch  
	REST delete portgroup								${leaf0_pc1}
	REST delete portgroup								${leaf0_pc2}
	REST delete portgroup								${leaf1_pc1}
	REST delete portgroup								${leaf1_pc2}
	REST delete portgroup								${leaf2_pc1}
	REST delete portgroup								${leaf2_pc2}


verify results   [Arguments]  ${transmitted_frames}  ${received_frames}  ${stream}  ${stream_name}
    Sleep  5
    ${report}=  fetch port stats  stream=${stream}  
    ${tx_value}=  verify dict key  ${report}  ${stream_name}  ${transmitted_frames}
    ${rx_value}=  verify dict key  ${report}  ${stream_name}  ${received_frames}
    ${in_range}=  ixia verify traffic rate  ${tx_value}  ${rx_value}
    Should be true  ${in_range}	
  	
