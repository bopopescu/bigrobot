* Setting
Documentation   T5 Basic L3 two spine three leaf rack with dual-tor Test Suite
Suite Setup     base suite setup
Suite Teardown  base suite teardown
Test Setup      setup topology
Test Teardown   teardown topology
Force Tags      T5 Sanity
Library         keywords/BsnCommon.py
Library         keywords_dev/slim/Host.py
Library         keywords/T5.py
Library         keywords/T5L3.py
Library         keywords_dev/animesh/BsnCommonShow.py
Library         keywords_dev/slim/SwitchLight.py
Resource		testsuites_dev/slim/t5_layer3_physical_intra_variables.txt


* Test Cases
Intra tenant L3 untagged traffic with dynamic endpoints same rack
	L3 intra tenant same rack untagged with dynamic endpoints
#	[Tags]							skipped			smoke				sanity			

Intra tenant L3 untagged traffic with dynamic endpoints across rack
	L3 intra tenant across rack untagged with dynamic endpoints
#	[Tags]							skipped			smoke				sanity	

Intra tenant L3 tagged traffic with dynamic endpoints same rack
	L3 intra tenant same rack tagged with dynamic endpoints
#	[Tags]							skipped			smoke				sanity			

Intra tenant L3 tagged traffic with dynamic endpoints across rack
	L3 intra tenant across rack tagged with dynamic endpoints
#	[Tags]							skipped			smoke				sanity	

Intra tenant L3 untagged traffic with static endpoints same rack
	L3 intra tenant same rack untagged with static endpoints
#	[Tags]							skipped			smoke				sanity			

Intra tenant L3 untagged traffic with static endpoints across rack
	L3 intra tenant across rack untagged with static endpoints
#	[Tags]							skipped			smoke				sanity	

Intra tenant L3 tagged traffic with static endpoints same rack
	L3 intra tenant same rack tagged with static endpoints
#	[Tags]							skipped			smoke				sanity			

Intra tenant L3 tagged traffic with static endpoints across rack
	L3 intra tenant across rack tagged with static endpoints
#	[Tags]							skipped			smoke				sanity	

Intra tenant dhcp relay 
	L3 intra tenant dhcp relay on same rack
#	[Tags]							skipped			smoke				sanity	
	
Intra tenant dhcp relay with circuit id
	L3 intra tenant dhcp relay with circuit id on same rack
#	[Tags]							skipped			smoke				sanity	

Add and delete untagged endpoints with existing host
	L3 add and delete untagged endpoints with existing host
#	[Tags]							skipped			sanity	
	
Add and delete tagged endpoints with existing host
	L3 add and delete tagged endpoints with existing host
#	[Tags]							skipped			sanity	
		
Change L3 endpoint from untagged to tagged and back		
	L3 change endpoint from untagged to tagged and back	
#	[Tags]							skipped			sanity	

Verify L3 endpoint aging
	Check L3 endpoint aging 
#	[Tags]							skipped			sanity	
	
Verify L3 ttl 1 is not being forwarded
	Check L3 ttl 1 is dropped
#	[Tags]							skipped			sanity			

Change router vns ip
	Change router ip address
#	[Tags]							skipped			sanity			

	

	
* Keywords
L3 intra tenant same rack untagged with dynamic endpoints
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0		
	REST add portgroup to vns					X								X1						${leaf1_pc1}			-1
	REST add portgroup to vns					X								X2						${leaf1_pc2}			-1
	BASH add ip address							h3								10.251.1.11/24			bond0	
	BASH add ip address							h4								10.251.2.11/24			bond0
	BASH add route								h3								10.251.2.0/24			10.251.1.1
	BASH add route								h4								10.251.1.0/24			10.251.2.1
	sleep										10	
	BASH ping									h3								10.251.1.1				count=10
	BASH ping									h4								10.251.2.1				count=10
	${value} = 									BASH verify arp					h3						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h4						10.251.2.1
	Should Be True								${value} 
	${mac1} = 									BASH get intf mac				h3						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h4						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h3						10.251.2.11 			count=10
	Should Be True  							${loss} == 0	
	
	
L3 intra tenant across rack untagged with dynamic endpoints
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0		
	REST add portgroup to vns					X								X1						${leaf1_pc1}			-1
	REST add portgroup to vns					X								X3						${leaf0_pc6}			-1
	BASH add ip address							h3								10.251.1.11/24			bond0	
	BASH add ip address							h2								10.251.3.11/24			bond0
	BASH add route								h3								10.251.3.0/24			10.251.1.1
	BASH add route								h2								10.251.1.0/24			10.251.3.1
	sleep										10	
	BASH ping									h3								10.251.1.1				count=10
	BASH ping									h2								10.251.3.1				count=10
	${value} = 									BASH verify arp					h3						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h2						10.251.3.1
	Should Be True								${value} 	
	${mac1} = 									BASH get intf mac				h3						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h2						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h3						10.251.3.11 			count=10
	Should Be True  							${loss} == 0	
	
L3 intra tenant same rack tagged with dynamic endpoints
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0		
	REST add portgroup to vns					X								X1						${leaf1_pc1}			1001
	REST add portgroup to vns					X								X2						${leaf1_pc2}			1002
	BASH add tag								h3								bond0					1001
	BASH add tag								h4								bond0					1002
	BASH ifup intf								h3								bond0.1001
	BASH ifup intf								h4								bond0.1002
	BASH add ip address							h3								10.251.1.11/24			bond0.1001	
	BASH add ip address							h4								10.251.2.11/24			bond0.1002
	BASH add route								h3								10.251.2.0/24			10.251.1.1
	BASH add route								h4								10.251.1.0/24			10.251.2.1
	sleep										10	
#	BASH ping									h3								10.251.1.1				count=10
#	BASH ping									h4								10.251.2.1				count=10
	${value} = 									BASH verify arp					h3						10.251.1.1
	Should Not Be True							${value} 		
	${value} =									BASH verify arp					h4						10.251.2.1
	Should Not Be True							${value} 	
	BASH ping									h3								10.251.2.11				count=10
	${value} = 									BASH verify arp					h3						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h4						10.251.2.1
	Should Be True								${value} 	
	${mac1} = 									BASH get intf mac				h3						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h4						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints		
	${loss} = 									BASH ping						h3						10.251.2.11 			count=10
	Should Be True  							${loss} == 0	
	
	
L3 intra tenant across rack tagged with dynamic endpoints
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0		
	REST add portgroup to vns					X								X1						${leaf1_pc1}			1001
	REST add portgroup to vns					X								X3						${leaf0_pc6}			1003
	BASH add tag								h3								bond0					1001
	BASH add tag								h2								bond0					1003
	BASH ifup intf								h3								bond0.1001
	BASH ifup intf								h2								bond0.1003
	BASH add ip address							h3								10.251.1.11/24			bond0.1001
	BASH add ip address							h2								10.251.3.11/24			bond0.1003
	BASH add route								h3								10.251.3.0/24			10.251.1.1
	BASH add route								h2								10.251.1.0/24			10.251.3.1
	sleep										10	
#	BASH ping									h3								10.251.1.1				count=10
#	BASH ping									h2								10.251.3.1				count=10
	${value} = 									BASH verify arp					h3						10.251.1.1
	Should Not Be True							${value} 		
	${value} =									BASH verify arp					h2						10.251.3.1
	Should Not Be True							${value} 	
	BASH ping									h3								10.251.3.11				count=10
	${value} = 									BASH verify arp					h3						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h2						10.251.3.1
	Should Be True								${value} 		
	${mac1} = 									BASH get intf mac				h3						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h2						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints		
	${loss} = 									BASH ping						h3						10.251.3.11 			count=10
	Should Be True  							${loss} == 0		

L3 intra tenant same rack untagged with static endpoints
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0		
	REST add portgroup to vns					X								X1						${leaf1_pc1}			-1
	REST add portgroup to vns					X								X2						${leaf1_pc2}			-1
	REST add endpoint							X								X1						X1_pc1
	REST add endpoint							X								X2						X2_pc2
	REST add endpoint ip						X								X1						X1_pc1					10.251.1.11
	REST add endpoint ip						X								X2						X2_pc2					10.251.2.11
	${mac1} = 									BASH get intf mac				h3						bond0
	REST add endpoint mac						X								X1						X1_pc1					${mac1}
	REST add endpoint portgroup attachment		X								X1						X1_pc1					${leaf1_pc1}				-1	
	${mac2} = 									BASH get intf mac				h4						bond0
	REST add endpoint mac						X								X2						X2_pc2					${mac2}
	REST add endpoint portgroup attachment		X								X2						X2_pc2					${leaf1_pc2}				-1	
	BASH add ip address							h3								10.251.1.11/24			bond0	
	BASH add ip address							h4								10.251.2.11/24			bond0
	BASH add route								h3								10.251.2.0/24			10.251.1.1
	BASH add route								h4								10.251.1.0/24			10.251.2.1
	sleep										10	
	BASH ping									h3								10.251.1.1				count=10
	BASH ping									h4								10.251.2.1				count=10
	${value} = 									BASH verify arp					h3						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h4						10.251.2.1
	Should Be True								${value} 
	${mac1} = 									BASH get intf mac				h3						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h4						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h3						10.251.2.11 			count=10
	Should Be True  							${loss} == 0	


L3 intra tenant across rack untagged with static endpoints
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0	
	REST add portgroup to vns					X								X1						${leaf1_pc1}			-1
	REST add portgroup to vns					X								X3						${leaf0_pc6}			-1
	REST add endpoint							X								X1						X1_pc1
	REST add endpoint							X								X3						X3_pc6
	REST add endpoint ip						X								X1						X1_pc1					10.251.1.11
	REST add endpoint ip						X								X3						X3_pc6					10.251.3.11
	${mac1} = 									BASH get intf mac				h3						bond0
	REST add endpoint mac						X								X1						X1_pc1					${mac1}
	REST add endpoint portgroup attachment		X								X1						X1_pc1					${leaf1_pc1}				-1	
	${mac2} = 									BASH get intf mac				h2						bond0
	REST add endpoint mac						X								X3						X3_pc6					${mac2}
	REST add endpoint portgroup attachment		X								X3						X3_pc6					${leaf0_pc6}				-1	
	REST add portgroup to vns					X								X1						${leaf1_pc1}			-1
	REST add portgroup to vns					X								X3						${leaf0_pc6}			-1
	BASH add ip address							h3								10.251.1.11/24			bond0	
	BASH add ip address							h2								10.251.3.11/24			bond0
	BASH add route								h3								10.251.3.0/24			10.251.1.1
	BASH add route								h2								10.251.1.0/24			10.251.3.1
	sleep										10	
	BASH ping									h3								10.251.1.1				count=10
	BASH ping									h2								10.251.3.1				count=10
	${value} = 									BASH verify arp					h3						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h2						10.251.3.1
	Should Be True								${value} 	
	${mac1} = 									BASH get intf mac				h3						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h2						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h3						10.251.3.11 			count=10
	Should Be True  							${loss} == 0	


L3 intra tenant same rack tagged with static endpoints
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0		
	REST add portgroup to vns					X								X1						${leaf1_pc1}			1001
	REST add portgroup to vns					X								X2						${leaf1_pc2}			1002
	REST add endpoint							X								X1						X1_pc1
	REST add endpoint							X								X2						X2_pc2
	REST add endpoint ip						X								X1						X1_pc1					10.251.1.11
	REST add endpoint ip						X								X2						X2_pc2					10.251.2.11
	${mac1} = 									BASH get intf mac				h3						bond0
	REST add endpoint mac						X								X1						X1_pc1					${mac1}
	REST add endpoint portgroup attachment		X								X1						X1_pc1					${leaf1_pc1}				1001	
	${mac2} = 									BASH get intf mac				h4						bond0
	REST add endpoint mac						X								X2						X2_pc1					${mac2}
	REST add endpoint portgroup attachment		X								X2						X2_pc1					${leaf1_pc1}				1002	
	REST add portgroup to vns					X								X1						${leaf1_pc1}			1001
	REST add portgroup to vns					X								X2						${leaf1_pc2}			1002
	BASH add tag								h3								bond0					1001
	BASH add tag								h4								bond0					1002
	BASH ifup intf								h3								bond0.1001
	BASH ifup intf								h4								bond0.1002
	BASH add ip address							h3								10.251.1.11/24			bond0.1001	
	BASH add ip address							h4								10.251.2.11/24			bond0.1002
	BASH add route								h3								10.251.2.0/24			10.251.1.1
	BASH add route								h4								10.251.1.0/24			10.251.2.1
	sleep										10	
	${value} = 									BASH verify arp					h3						10.251.1.1
	Should Not Be True							${value} 		
	${value} =									BASH verify arp					h4						10.251.2.1
	Should Not Be True							${value} 	
	BASH ping									h3								10.251.2.11				count=10
	${value} = 									BASH verify arp					h3						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h4						10.251.2.1
	Should Be True								${value} 	
	${mac1} = 									BASH get intf mac				h3						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h4						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints		
	${loss} = 									BASH ping						h3						10.251.2.11 			count=10
	Should Be True  							${loss} == 0	
	
		
L3 intra tenant across rack tagged with static endpoints
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0		
	REST add portgroup to vns					X								X1						${leaf1_pc1}			1001
	REST add portgroup to vns					X								X3						${leaf0_pc6}			1003
	REST add endpoint							X								X1						X1_pc1
	REST add endpoint							X								X3						X3_pc6
	REST add endpoint ip						X								X1						X1_pc1					10.251.1.11
	REST add endpoint ip						X								X3						X3_pc6					10.251.3.11
	${mac1} = 									BASH get intf mac				h3						bond0
	REST add endpoint mac						X								X1						X1_pc1					${mac1}
	REST add endpoint portgroup attachment		X								X1						X1_pc1					${leaf1_pc1}				1001	
	${mac2} = 									BASH get intf mac				h2						bond0
	REST add endpoint mac						X								X3						X3_pc6					${mac2}
	REST add endpoint portgroup attachment		X								X3						X3_pc6					${leaf0_pc6}				1003
	REST add portgroup to vns					X								X1						${leaf1_pc1}			1001
	REST add portgroup to vns					X								X3						${leaf0_pc6}			1003
	BASH add tag								h3								bond0					1001
	BASH add tag								h2								bond0					1003
	BASH ifup intf								h3								bond0.1001
	BASH ifup intf								h2								bond0.1003
	BASH add ip address							h3								10.251.1.11/24			bond0.1001
	BASH add ip address							h2								10.251.3.11/24			bond0.1003
	BASH add route								h3								10.251.3.0/24			10.251.1.1
	BASH add route								h2								10.251.1.0/24			10.251.3.1
	sleep										10	
#	BASH ping									h3								10.251.1.1				count=10
#	BASH ping									h2								10.251.3.1				count=10
	${value} = 									BASH verify arp					h3						10.251.1.1
	Should Not Be True							${value} 		
	${value} =									BASH verify arp					h2						10.251.3.1
	Should Not Be True							${value} 	
	BASH ping									h3								10.251.3.11				count=10
	${value} = 									BASH verify arp					h3						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h2						10.251.3.1
	Should Be True								${value} 		
	${mac1} = 									BASH get intf mac				h3						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h2						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints		
	${loss} = 									BASH ping						h3						10.251.3.11 			count=10
	Should Be True  							${loss} == 0		


L3 intra tenant dhcp relay on same rack
	${value} = 									BASH check service status		h1						isc-dhcp-server
	Should Contain								${value}						is started
	BASH ifdown intf							h1 								bond0
	BASH ifdown intf							h2								bond0
	BASH ifdown intf							h3								bond0
	BASH ifdown intf							h4								bond0	
	BASH init intf								h1								eth1
	BASH init intf								h2								eth1
	sleep										1
	REST add portgroup to vns					Y								Y1						${leaf0_pc1}			-1
	REST add portgroup to vns					Y								Y3						${leaf0_pc2}			-1
	BASH add ip address							h1								10.252.1.9/24			eth1	
	BASH add route								h1								10.252.3.0/24			10.252.1.1
	REST add dhcp relay							Y								Y3						10.252.1.9
	REST enable dhcp relay						Y								Y3	
	sleep										5
	${h1_ip} = 									BASH get intf ipv4				h1						eth1
	Should Be Equal As Strings					${h1_ip}						10.252.1.9	
	${h1_mac} =									BASH get intf mac				h1						eth1
	###### another hac to overcome jira PAN 726
	BASH delete arp								h1								10.252.1.1
	${value} = 									BASH verify arp					h1						10.252.1.1
	Should Not Be True							${value} 		
	###### hack to force host to resolve gateway, by right, vrf should attempt to resolve dhcp-server mac address and discover its endpoint but that is not happening
	BASH ping									h1 								10.252.1.1				count=5
	${result} = 								REST show endpoints mac			${h1_mac}
	Should Not Be Empty							${result}
	sleep										1
	${value} = 									BASH verify arp					h1						10.252.1.1
	Should Be True								${value} 		
	sleep										1
	${value} = 									BASH release dhcpv4 address		h2						eth1
	Should Be True								${value}
	sleep										1
	${ipAddr} = 								BASH renew dhcpv4 address		h2						eth1
	Should Not Be Empty							${ipAddr}
	sleep										5
	BASH ping									h1								${ipAddr}				count=10
	${value} = 									BASH verify arp					h1						10.252.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h2						10.252.3.1
	Should Be True								${value} 	
	${mac1} = 									BASH get intf mac				h1						eth1
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h2						eth1
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h1						${ipAddr} 			count=10
	Should Be True  							${loss} == 0	


L3 intra tenant dhcp relay with circuit id on same rack
	${value} = 									BASH check service status		h1						isc-dhcp-server
	Should Contain								${value}						is started
	BASH ifdown intf							h1 								bond0
	BASH ifdown intf							h2								bond0
	BASH ifdown intf							h3								bond0
	BASH ifdown intf							h4								bond0	
	BASH init intf								h1								eth1
	BASH init intf								h2								eth1
	sleep										1
	REST add portgroup to vns					Y								Y1						${leaf0_pc1}			-1
	REST add portgroup to vns					Y								Y2						${leaf0_pc2}			-1
	BASH add ip address							h1								10.252.1.9/24			eth1	
	BASH add route								h1								10.252.2.0/24			10.252.1.1
	REST add dhcp relay							Y								Y2						10.252.1.9
	REST add dhcprelay circuitid				Y								Y2						&#!ten Y vns Y2
	REST enable dhcp relay						Y								Y2	
	###### hack to force host to resolve gateway, by right, vrf should attempt to resolve dhcp-server mac address and discover its endpoint but that is not happening
	BASH ping									h1 								10.252.1.1				count=5
	sleep										1
	${value} = 									BASH verify arp					h1						10.252.1.1
	Should Be True								${value} 		
	sleep										1
	${value} = 									BASH release dhcpv4 address		h2						eth1
	Should Be True								${value}
	sleep										1
	${ipAddr} = 								BASH renew dhcpv4 address		h2						eth1
#	Should Not Be True							'${ipAddr}' == '' 
	Should Not Be Empty							${ipAddr}
	sleep										5
	BASH ping									h1								${ipAddr}				count=10
	${value} = 									BASH verify arp					h1						10.252.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h2						10.252.2.1
	Should Be True								${value} 	
	${mac1} = 									BASH get intf mac				h1						eth1
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h2						eth1
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h1						${ipAddr} 			count=10
	Should Be True  							${loss} == 0	


L3 add and delete untagged endpoints with existing host
	BASH init intf								h1 								bond0
	BASH init intf								h2								bond0
	BASH init intf								h3								bond0
	BASH init intf								h4								bond0	
	BASH init intf								h1								eth1
	BASH init intf								h2								eth1
	sleep										1
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0		
	REST add portgroup to vns					X								X1						${leaf1_pc1}			-1
	REST add portgroup to vns					X								X2						${leaf1_pc2}			-1
	BASH add ip address							h3								10.251.1.11/24			bond0	
	BASH add ip address							h4								10.251.2.11/24			bond0
	BASH add route								h3								10.251.2.0/24			10.251.1.1
	BASH add route								h4								10.251.1.0/24			10.251.2.1
	sleep										10	
	BASH ping									h3								10.251.1.1				count=10
	BASH ping									h4								10.251.2.1				count=10
	${value} = 									BASH verify arp					h3						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h4						10.251.2.1
	Should Be True								${value} 
	${mac1} = 									BASH get intf mac				h3						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h4						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h3						10.251.2.11 			count=10
	Should Be True  							${loss} == 0	
	REST delete portgroup from vns				X								X1						${leaf1_pc1}			-1
	sleep										1
	${result} =									REST show endpoints mac			${mac1}
	Should Not Be True							${result}	
	sleep										1
	${value} = 									BASH verify arp					h3						10.251.1.1
	Should Be True								${value} 		
	REST add portgroup to vns					X								X1						${leaf1_pc1}			-1
	sleep										5
	BASH ping									h1								10.251.1.1				count=10
	sleep										1
	${result} =									REST show endpoints mac			${mac1}
	BASH ping									h4								10.251.1.11				count=3
	${loss} = 									BASH ping						h4						10.251.1.11				count=10
	Should Be True  							${loss} == 0	
	
		

L3 add and delete tagged endpoints with existing host
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0		
	REST add portgroup to vns					X								X1						${leaf1_pc1}			1001
	REST add portgroup to vns					X								X3						${leaf0_pc6}			1003
	BASH add tag								h3								bond0					1001
	BASH add tag								h2								bond0					1003
	BASH ifup intf								h3								bond0.1001
	BASH ifup intf								h2								bond0.1003
	BASH add ip address							h3								10.251.1.11/24			bond0.1001
	BASH add ip address							h2								10.251.3.11/24			bond0.1003
	BASH add route								h3								10.251.3.0/24			10.251.1.1
	BASH add route								h2								10.251.1.0/24			10.251.3.1
	sleep										10	
#	BASH ping									h3								10.251.1.1				count=10
#	BASH ping									h2								10.251.3.1				count=10
	${value} = 									BASH verify arp					h3						10.251.1.1
	Should Not Be True							${value} 		
	${value} =									BASH verify arp					h2						10.251.3.1
	Should Not Be True							${value} 	
	BASH ping									h3								10.251.3.11				count=10
	${value} = 									BASH verify arp					h3						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h2						10.251.3.1
	Should Be True								${value} 		
	${mac1} = 									BASH get intf mac				h3						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h2						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints		
	${loss} = 									BASH ping						h3						10.251.3.11 			count=10
	Should Be True  							${loss} == 0		
	REST delete portgroup from vns				X								X1						${leaf1_pc1}			1001
	sleep										1
	${result} =									REST show endpoints mac			${mac1}
	Should Not Be True							${result}	
	sleep										1
	${value} = 									BASH verify arp					h3						10.251.1.1
	Should Be True								${value} 		
	REST add portgroup to vns					X								X1						${leaf1_pc1}			1001
	sleep										5
	BASH ping									h3								10.251.1.1				count=10
	sleep										1
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}	
	${loss} = 									BASH ping						h3						10.251.1.11				count=10
	Should Be True  							${loss} == 0		


L3 change endpoint from untagged to tagged and back
	BASH init intf								h1 								bond0
	BASH init intf								h2								bond0
	BASH init intf								h3								bond0
	BASH init intf								h4								bond0	
	BASH init intf								h1								eth1
	BASH init intf								h2								eth1
	sleep										1
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0		
	REST add portgroup to vns					X								X1						${leaf1_pc1}			-1
	REST add portgroup to vns					X								X2						${leaf1_pc2}			-1
	BASH add ip address							h3								10.251.1.11/24			bond0	
	BASH add ip address							h4								10.251.2.11/24			bond0
	BASH add route								h3								10.251.2.0/24			10.251.1.1
	BASH add route								h4								10.251.1.0/24			10.251.2.1
	sleep										10	
	BASH ping									h3								10.251.1.1				count=10
	BASH ping									h4								10.251.2.1				count=10
	${value} = 									BASH verify arp					h3						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h4						10.251.2.1
	Should Be True								${value} 
	${mac1} = 									BASH get intf mac				h3						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h4						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h3						10.251.2.11 			count=10
	Should Be True  							${loss} == 0	
	REST delete portgroup from vns				X								X1						${leaf1_pc1}			-1
	sleep										1
	${result} =									REST show endpoints mac			${mac1}
	Should Not Be True							${result}	
	sleep										1
	BASH init intf								h3								bond0
	#BASH ifdown intf							h3 								bond0
	BASH add tag								h3								bond0					1001
	BASH ifup intf								h3								bond0.1001
	BASH add ip address							h3								10.251.1.11/24			bond0.1001
	BASH add route								h3								10.251.2.0/24			10.251.1.1
	REST add portgroup to vns					X								X1						${leaf1_pc1}			1001
	sleep										5	
	BASH ping									h3								10.251.1.1	
	${value} = 									BASH verify arp					h3						10.251.1.1
	Should Be True								${value} 		
	BASH ping									h3								10.251.1.1				count=10
	sleep										1
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}	
	${loss} = 									BASH ping						h3						10.251.2.11				count=10
	Should Be True  							${loss} == 0	
	sleep										1
	REST delete portgroup from vns				X								X1						${leaf1_pc1}			1001
	BASH init intf								h3								bond0.1001
	BASH delete tag								h3								bond0.1001				
	BASH init intf								h3								bond0
	BASH add ip address							h3								10.251.1.11/24			bond0
	BASH add route								h3								10.251.2.0/24			10.251.1.1
	REST add portgroup to vns					X								X1						${leaf1_pc1}			-1
	sleep										5	
	BASH ping									h3								10.251.1.1	
	${value} = 									BASH verify arp					h3						10.251.1.1
	Should Be True								${value} 		
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}	
	${loss} = 									BASH ping						h3						10.251.2.11				count=10
	Should Be True  							${loss} == 0	

	
Check L3 endpoint aging 
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0		
	REST add portgroup to vns					X								X1						${leaf1_pc1}			-1
	REST add portgroup to vns					X								X2						${leaf1_pc2}			-1
	BASH add ip address							h3								10.251.1.11/24			bond0	
	BASH add ip address							h4								10.251.2.11/24			bond0
	BASH add route								h3								10.251.2.0/24			10.251.1.1
	BASH add route								h4								10.251.1.0/24			10.251.2.1
	sleep										10	
	BASH ping									h3								10.251.1.1				count=10
	BASH ping									h4								10.251.2.1				count=10
	${value} = 									BASH verify arp					h3						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h4						10.251.2.1
	Should Be True								${value} 
	${mac1} = 									BASH get intf mac				h3						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h4						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h3						10.251.2.11 			count=10
	Should Be True  							${loss} == 0	
	BASH ifdown intf							h3 								bond0
	${loss} = 									BASH ping						h4						10.251.1.11 			count=10
	Should Be True  							${loss} == 100	
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	sleep										600
	${result} =									REST show endpoints mac			${mac1}
	Should Not Be True							${result}						

Check L3 ttl 1 is dropped
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0		
	REST add portgroup to vns					X								X1						${leaf1_pc1}			-1
	REST add portgroup to vns					X								X2						${leaf1_pc2}			-1
	BASH add ip address							h3								10.251.1.11/24			bond0	
	BASH add ip address							h4								10.251.2.11/24			bond0
	BASH add route								h3								10.251.2.0/24			10.251.1.1
	BASH add route								h4								10.251.1.0/24			10.251.2.1
	sleep										10	
	BASH ping									h3								10.251.1.1				count=10
	BASH ping									h4								10.251.2.1				count=10
	${value} = 									BASH verify arp					h3						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h4						10.251.2.1
	Should Be True								${value} 
	${mac1} = 									BASH get intf mac				h3						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h4						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h3						10.251.2.11 			count=10
	Should Be True  							${loss} == 0	
	${loss} = 									BASH ping						h3						10.251.2.11 			count=10			ttl=1
	Should Be True  							${loss} == 100			
	${result} =       							BASH content 					h3
    log              							result from bash ping is ${result}
   	Should Contain X Times						${result}						Time to live exceeded	10
   	

Change router ip address
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0		
	REST add portgroup to vns					X								X1						${leaf1_pc1}			-1
	REST add portgroup to vns					X								X2						${leaf1_pc2}			-1
	BASH add ip address							h3								10.251.1.11/24			bond0	
	BASH add ip address							h4								10.251.2.11/24			bond0
	BASH add route								h3								10.251.2.0/24			10.251.1.1
	BASH add route								h4								10.251.1.0/24			10.251.2.1
	sleep										10	
	BASH ping									h3								10.251.1.1				count=10
	BASH ping									h4								10.251.2.1				count=10
	${value} = 									BASH verify arp					h3						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h4						10.251.2.1
	Should Be True								${value} 
	${mac1} = 									BASH get intf mac				h3						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h4						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h3						10.251.2.11 			count=10
	Should Be True  							${loss} == 0	
	REST add vns ip  							X								X1						10.251.4.1				24	
	${loss} = 									BASH ping						h3						10.251.2.11 			count=10
	Should Be True  							${loss} == 0	
	${mac1} = 									BASH get intf mac				h3						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}							
	BASH delete arp								h3								10.251.1.1
	${value} =									BASH verify arp					h3						10.251.1.1
	Should Not Be True							${value} 
	BASH add ip address							h3								10.251.4.11/24			bond0	
	BASH add route								h3								10.251.2.0/24			10.251.4.1
	BASH add route								h4								10.251.4.0/24			10.251.2.1
	BASH ping									h3								10.251.2.11 			count=10
	${loss} = 									BASH ping						h3						10.251.2.11 			count=10
	Should Be True  							${loss} == 0		
	sleep										1
	${result} =									REST show endpoints mac			${mac1}
	Should Contain								${result}						10.251.4.11
	${result} =									REST show endpoints mac			${mac2}
	Should Contain								${result}						10.251.2.11
	REST add vns ip  							X								X1						10.251.1.1				24	
	BASH delete arp								h3								10.251.4.1
	${value} =									BASH verify arp					h3						10.251.4.1
	Should Not Be True							${value} 
	BASH add ip address							h3								10.251.1.11/24			bond0	
	BASH ping									h3								10.251.2.11 			count=10
	${loss} = 									BASH ping						h3						10.251.2.11 			count=10
	Should Be True  							${loss} == 0		
	sleep										1
	${result} =									REST show endpoints mac			${mac1}
	Should Contain								${result}						10.251.1.11
	${result} =									REST show endpoints mac			${mac2}
	Should Contain								${result}						10.251.2.11			
	











initialize host
	BASH delete tag								h2								bond0.1003				soft_error=${true}
	BASH delete tag								h3								bond0.1001				soft_error=${true}
	BASH delete tag								h4								bond0.1002				soft_error=${true}
	BASH init intf								h1								bond0
	BASH init intf								h2								bond0
	BASH init intf								h3								bond0
	BASH init intf								h4								bond0
	BASH ifdown intf							h1 								bond0
	BASH ifdown intf							h2								bond0
	BASH ifdown intf							h3								bond0
	BASH ifdown intf							h4								bond0
	BASH release dhcpv4 address					h1								bond0
	BASH release dhcpv4 address					h2								bond0
	BASH release dhcpv4 address					h3								bond0
	BASH release dhcpv4 address					h4								bond0


setup topology
	initialize host
	add fabric switch
	sleep 											1
	REST add tenant 								X
	REST add tenant									Y
	REST add tenant									Z
	REST add vns									X							X1
	REST add vns									X							X2
	REST add vns									X							X3
	REST add vns									Y							Y1
	REST add vns									Y							Y2
	REST add vns									Y							Y3
	REST add vns									Z							Z1
	REST add vns									Z							Z2
	REST add vns									Z							Z3
	REST add vns ip  								X							X1				10.251.1.1				24	
	REST add vns ip  								X							X2				10.251.2.1				24	
	REST add vns ip  								X							X3				10.251.3.1				24	
	REST add vns ip  								Y							Y1				10.252.1.1				24	
	REST add vns ip  								Y							Y2				10.252.2.1				24	
	REST add vns ip  								Y							Y3				10.252.3.1				24	
	REST add vns ip  								Z							Z1				10.253.1.1				24	
	REST add vns ip  								Z							Z2				10.253.2.1				24	
	REST add vns ip  								Z							Z3				10.253.3.1				24	
	

teardown topology
	REST delete vns ip  							X							X1				10.251.1.1				24	
	REST delete vns ip  							X							X2				10.251.2.1				24	
	REST delete vns ip  							X							X3				10.251.3.1				24	
	REST delete vns ip  							Y							Y1				10.252.1.1				24	
	REST delete vns ip  							Y							Y2				10.252.2.1				24	
	REST delete vns ip  							Y							Y3				10.252.3.1				24	
	REST delete vns ip  							Z							Z1				10.253.1.1				24	
	REST delete vns ip  							Z							Z2				10.253.2.1				24	
	REST delete vns ip  							Z							Z3				10.253.3.1				24	
	REST delete vns									X							X1
	REST delete vns									X							X2
	REST delete vns									X							X3
	REST delete vns									Y							Y1
	REST delete vns									Y							Y2
	REST delete vns									Y							Y3
	REST delete vns									Z							Z1
	REST delete vns									Z							Z2
	REST delete vns									Z							Z3
	REST delete tenant								X
	REST delete tenant								Y
	REST delete tenant								Z
	delete fabric switch
	initialize host
	

add fabric switch
	CLI add dpid									s1							${spine0_dpid}
	CLI add dpid									s2							${leaf0a_dpid}
	CLI add dpid									s3							${leaf1a_dpid}
	CLI add dpid									s4							${leaf1b_dpid}
#	CLI add controller								s1							${bsn_ctrl1}
#	CLI add controller								s1							${bsn_ctrl2}
#	CLI add controller								s2							${bsn_ctrl1}
#	CLI add controller								s2							${bsn_ctrl2}
#	CLI add controller								s3							${bsn_ctrl1}
#	CLI add controller								s3							${bsn_ctrl2}
#	CLI add controller								s4							${bsn_ctrl1}
#	CLI add controller								s4							${bsn_ctrl2}
	
  	REST add switch  								spine0
  	REST add dpid  									spine0  					${spine0_dpid}
  	REST add fabric role  							spine0  					spine
  	REST add switch  								spine1	
  	REST add dpid  									spine1  					${spine1_dpid}
  	REST add fabric role						  	spine1  					spine
  	REST add switch  								leaf0a
  	REST add dpid  									leaf0a  					${leaf0a_dpid}
  	REST add fabric role  							leaf0a  					leaf
  	REST add switch  								leaf0b
  	REST add dpid  									leaf0b  					${leaf0b_dpid}
  	REST add fabric role  							leaf0b  					leaf
  	REST add switch  								leaf1a
  	REST add dpid  									leaf1a  					${leaf1a_dpid}
  	REST add fabric role  							leaf1a  					leaf
 	REST add switch  								leaf1b
  	REST add dpid  									leaf1b  					${leaf1b_dpid}
  	REST add fabric role  							leaf1b  					leaf
	REST add portgroup								${leaf0_pc1}
	REST add portgroup								${leaf0_pc2}
	REST add portgroup								${leaf0_pc3}
	REST add portgroup								${leaf0_pc4}
	REST add portgroup								${leaf0_pc5}
	REST add portgroup								${leaf0_pc6}	
	REST add portgroup								${leaf1_pc1}
	REST add portgroup								${leaf1_pc2}
	REST add portgroup								${leaf1_pc3}
	REST add portgroup								${leaf1_pc4}
	REST add leaf group								leaf0a						leaf0
	REST add leaf group								leaf0b						leaf0
	REST add leaf group								leaf1a						leaf1
	REST add leaf group								leaf1b						leaf1
	REST add interface to portgroup					leaf0a						${leaf0_pc1_intf1}					${leaf0_pc1}
	REST add interface to portgroup					leaf0b						${leaf0_pc1_intf2}					${leaf0_pc1}
	REST add interface to portgroup					leaf0a						${leaf0_pc2_intf1}					${leaf0_pc2}
	REST add interface to portgroup					leaf0b						${leaf0_pc2_intf2}					${leaf0_pc2}
	REST add interface to portgroup					leaf0a						${leaf0_pc3_intf1}					${leaf0_pc3}
	REST add interface to portgroup					leaf0b						${leaf0_pc3_intf2}					${leaf0_pc3}
	REST add interface to portgroup					leaf0a						${leaf0_pc4_intf1}					${leaf0_pc4}
	REST add interface to portgroup					leaf0b						${leaf0_pc4_intf2}					${leaf0_pc4}
	REST add interface to portgroup					leaf0a						${leaf0_pc5_intf1}					${leaf0_pc5}
	REST add interface to portgroup					leaf0a						${leaf0_pc5_intf2}					${leaf0_pc5}
	REST add interface to portgroup					leaf0a						${leaf0_pc6_intf1}					${leaf0_pc6}
	REST add interface to portgroup					leaf0a						${leaf0_pc6_intf2}					${leaf0_pc6}
	REST add interface to portgroup					leaf1a						${leaf1_pc1_intf1}					${leaf1_pc1}
	REST add interface to portgroup					leaf1b						${leaf1_pc1_intf2}					${leaf1_pc1}
	REST add interface to portgroup					leaf1a						${leaf1_pc2_intf1}					${leaf1_pc2}
	REST add interface to portgroup					leaf1b						${leaf1_pc2_intf2}					${leaf1_pc2}
	REST add interface to portgroup					leaf1a						${leaf1_pc3_intf1}					${leaf1_pc3}
	REST add interface to portgroup					leaf1b						${leaf1_pc3_intf2}					${leaf1_pc3}
	REST add interface to portgroup					leaf1a						${leaf1_pc4_intf1}					${leaf1_pc4}
	REST add interface to portgroup					leaf1b						${leaf1_pc4_intf2}					${leaf1_pc4}
	
  
delete fabric switch  
	REST delete fabric switch  						spine0 
	REST delete fabric switch  						spine1 
	REST delete fabric switch  						leaf0a 
	REST delete fabric switch  						leaf1a 
	REST delete fabric switch  						leaf0b 
	REST delete fabric switch  						leaf1b 
  	
