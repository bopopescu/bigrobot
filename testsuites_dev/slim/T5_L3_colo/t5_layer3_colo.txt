* Setting
Documentation   T5 Basic L3 two spine three leaf rack with dual-tor Test Suite
Suite Setup     T5 base suite setup
#Suite Teardown  T5 base suite teardown
Test Setup      setup topology
#Test Teardown   teardown topology
Force Tags      T5 Sanity
Library         keywords/BsnCommon.py
Library         keywords_dev/slim/Host.py
Library         keywords/T5.py
Library         keywords/T5L3.py
Library         keywords/T5Platform.py
Library         keywords/BsnCommon.py
Library         keywords/SwitchLight.py
Library	        Collections.py
Library         keywords/Ixia.py
Resource		testsuites_dev/slim/T5_L3_colo/t5_layer3_colo_variables.txt
Resource		testsuites_dev/slim/T5_L3_colo/t5_layer3_colo_resources.txt


* Test Cases
Intra tenant L3 untagged traffic with dynamic endpoints same rack
	L3 intra tenant same rack untagged with dynamic endpoints
	[Tags]									smoke				sanity				run

Intra tenant L3 untagged traffic with dynamic endpoints across rack
	L3 intra tenant across rack untagged with dynamic endpoints
	[Tags]									smoke				sanity	

Intra tenant L3 tagged traffic with dynamic endpoints same rack
	L3 intra tenant same rack tagged with dynamic endpoints
	[Tags]									smoke				sanity			

Intra tenant L3 tagged traffic with dynamic endpoints across rack
	L3 intra tenant across rack tagged with dynamic endpoints
	[Tags]									smoke				sanity	

Intra tenant L3 untagged traffic with static endpoints same rack
	L3 intra tenant same rack untagged with static endpoints
	[Tags]									smoke				sanity			

Intra tenant L3 untagged traffic with static endpoints across rack
	L3 intra tenant across rack untagged with static endpoints
	[Tags]									smoke				sanity	

Intra tenant L3 tagged traffic with static endpoints same rack
	L3 intra tenant same rack tagged with static endpoints
	[Tags]									smoke				sanity			

Intra tenant L3 tagged traffic with static endpoints across rack
	L3 intra tenant across rack tagged with static endpoints
	[Tags]									smoke				sanity	

Dhcp discover on the same vns as server with dhcp-relay enabled
	DHCP discovery on the same vns as server with dhcp-relay enabled
	[Tags]									smoke				sanity	

Dhcp discover on the same vns as server without dhcp-relay enabled
	DHCP discovery on the same vns as server without dhcp-relay enabled
	[Tags]									smoke				sanity	

Intra tenant dhcp relay 
	L3 intra tenant dhcp relay on same rack with valid circuitid
	[Tags]									smoke				sanity	
	
Intra tenant dhcp relay with invalid circuit id
	L3 intra tenant dhcp relay on same rack with invalid circuitid
	[Tags]									smoke				sanity	

Intra tenant dhcp relay enabled and disabled
	L3 dhcp request with and without dhcp relay enabled
	[Tags]									smoke				sanity	

Intra tenant dhcp relay across rack
	L3 intra tenant dhcp relay across rack
	[Tags]									smoke				sanity	
	
Intra tenant dhcp relay with circuit id across rack
	L3 intra tenant dhcp relay with circuit id across rack
	[Tags]									smoke				sanity	

Delete and Add dhcp relay
	Delete and Add L3 dhcp request 
	[Tags]									sanity	

Add and delete untagged endpoints with existing host
	L3 add and delete untagged endpoints with existing host
	[Tags]									feature	
	
Add and delete tagged endpoints with existing host
	L3 add and delete tagged endpoints with existing host
	[Tags]									feature	
		
Change L3 endpoint from untagged to tagged and back		
	L3 change endpoint from untagged to tagged and back	
	[Tags]									feature	

Verify L3 endpoint aging
	Check L3 endpoint aging 
	[Tags]									feature	
	
Verify L3 ttl 1 is not being forwarded
	Check L3 ttl 1 is dropped
	[Tags]									sanity			

Change router vns ip
	Change router ip address
	[Tags]									feature			

Delete and add router vns ip
	Delete and add router vns ip 
	[Tags]									feature			

Change tagged endpoint IP address
	Change tagged host endpoint IP address
	[Tags]									feature		

Configure static endpoint with host showing up on another port
	Static endpoint with dynamic host showing up on another port
	[Tags]									sanity		

Verify subnet mask is properly applied on router vns
	Verify subnet mask on vns router ip
	[Tags]									feature		

Verify vlsm forwarding
	Verify vlsm forwarding
	[Tags]									feature		

Verify split horizon forwarding
	Verify l3 forwarding on one arm router
	[Tags]									feature			manual		
	
Small Scale with 100 vns 		
	One Tenant 100 VNS with one host each
	[Tags]									feature			scale
	
Configure overlapping router IP 	
	Configure overlapping IP on same tenant across VNS	
	[Tags]									feature		
	
Trigger controller HA failover via CLI
	Controller HA failover via CLI	
	[Tags]									feature			
	
Trigger controller HA failover via reboot
	Controller HA failover via reboot
	[Tags]									feature			

Spine reboot
	Reboot spine0 via CLI
	[Tags]									feature			

Leaf reboot
	Reboot Leaf0 via CLI
	[Tags]									feature			

Spine connect and disconnect to controller
	Connect and Disconnect spine to controller
	[Tags]									feature			
	
Leaf connect and disconnect to controller	
	Connect and disconnect one leaf in dual tor to controller
	[Tags]									feature			

Spine to leaf link flap
	Flap link between leaf and spine
	[Tags]									feature			

Leaf to host link flap
	Flap bond interface towards host
	[Tags]									feature			
	
Restart ofad process on spine
	restart ofad on spine
	[Tags]									feature			
	
Restart ofad process on leaf	
	restart ofad on leaf
	[Tags]									feature			
	
L3 traffic behavior in headless mode
	L3 intra tenant traffic behavior in headless mode 
	Log								manual untested
	[Tags]									manual			untested			feature			

L3 intra tenant traffic between private and public subnet
	L3 intra tenant traffic between private and public subnet
#	[Tags]									sanity				

Configure overlapping IP on same tenant across VNS
	Configure overlapping IP on same tenant across VNS
	[Tags]									sanity				

Configure overlapping IP with private keyword on the same tenant
	Configure overlapping IP with private keyword on the same tenant
	[Tags]									sanity				

	
Inter tenant L3 traffic same rack	
	L3 inter tenant traffic in the same rack
	[Tags]									sanity				

Inter tenant L3 dhcp relay
	Inter tenant L3 dhcp relay
	[Tags]									sanity				
	
Inter tenant dhcp relay with two dhcp servers on both vns
	L3 inter tenant dhcp relay with two dhcp servers on both vns
	[Tags]									sanity				
	
	
* Keywords
L3 intra tenant same rack untagged with dynamic endpoints
	${ipAddr4} = 								BASH get interface ipv4 		h4-rack0						bond0
	Should Not Be Empty							${ipAddr4}
	${ipAddr5} = 								BASH get interface ipv4 		h5-rack0						bond0
	Should Not Be Empty							${ipAddr5}
	BASH ping									h4-rack0								10.251.1.1				count=10
	BASH ping									h5-rack0								10.251.2.1				count=10
	${value} = 									BASH verify arp					h4-rack0						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h5-rack0						10.251.2.1
	Should Be True								${value} 
	${mac1} = 									BASH get intf mac				h4-rack0						bond0
	${result} =									REST show endpoints mac			${mac1}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']['port-group']}	
	Should Contain								${attachpoint}					${leaf0_pc4}	
	${mac2} = 									BASH get intf mac				h5-rack0						bond0
	${result} =									REST show endpoints mac			${mac2}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']['port-group']}	
	Should Contain								${attachpoint}					${leaf0_pc5}	
	${loss} = 									BASH ping						h4-rack0						10.251.2.11 			count=10
	Should Be True  							${loss} == 0					
	REST add interface to vns					X								X1						${leaf0-a}				${ixia1}				-1
	REST add interface to vns					X								X2						${leaf0-b}				${ixia2}				-1		
	${stream1}=  								L3 add  						name=stream1		  	flow=a<->b 				frame_rate=100000  			frame_size=9216  			frame_cnt=10000000
	...     									src_ip=10.251.1.101				src_gw=10.251.1.1		dst_ip=10.251.2.201		dst_gw=10.251.2.1			 			
	start traffic  								${stream1}
	sleep  10
	stop traffic								${stream1}
	verify results 								transmitted_frames  			received_frames  		${stream1}  			stream1

L3 intra tenant same rack tagged with dynamic endpoints
	BASH ping									h7-rack0								10.252.2.11				count=10
	${value} = 									BASH verify arp					h7-rack0						10.252.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h8-rack0						10.252.2.1
	Should Be True								${value} 
	${mac7} = 									BASH get intf mac				h7-rack0						bond0
	${result} =									REST show endpoints mac			${mac7}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']['port-group']}	
	Should Contain								${attachpoint}					${leaf0_pc7}
	${mac8} = 									BASH get intf mac				h8-rack0						bond0
	${result} =									REST show endpoints mac			${mac8}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']['port-group']}	
	Should Contain								${attachpoint}					${leaf0_pc8}
	${loss} = 									BASH ping						h7-rack0						10.252.2.11 			count=10
	Should Be True  							${loss} == 0	
#	${stream1}=  								L3 add  						name=stream1		  	flow=a<->c 				frame_rate=100000  			frame_size=9216  			frame_cnt=10000000
#	...     									src_ip=10.251.1.101				src_gw=10.251.1.1		dst_ip=10.251.2.201		dst_gw=10.251.2.1			 			
#   start traffic  								${stream1}
#   sleep  10
#   stop traffic								${stream1}
#   verify results 								transmitted_frames  			received_frames  		${stream1}  			stream1


DHCP discovery on the same vns as server with dhcp-relay enabled
	REST delete portgroup from vns				Z								Z2						${leaf0_pc11}			-1
	BASH init intf								h1-rack1								bond0
	BASH start service							h4-rack0								isc-dhcp-server
	sleep										1
	${value} = 									BASH check service status		h4-rack0						isc-dhcp-server
	Should Contain								${value}						is started
	sleep										1
	REST add dhcp relay							X								X1						10.251.1.11
	REST enable dhcp relay						X								X1	
	REST add portgroup to vns					X								X1						${leaf0_pc11}			-1
	sleep										1
	${value} = 									BASH release dhcpv4 address		h1-rack1						bond0
	Should Be True								${value}
	sleep										1
	${ipAddr} = 								BASH renew dhcpv4 address		h1-rack1						bond0
	Should Not Be Empty							${ipAddr}
	sleep										5
	BASH ping									h4-rack0								${ipAddr}				count=10
	${value} = 									BASH verify arp					h4-rack0						${ipAddr}
	Should Be True								${value} 		
	${value} =									BASH verify arp					h1-rack1						10.251.1.11
	Should Be True								${value} 	
	${mac1} = 									BASH get intf mac				h4-rack0						bond0
	${result} =									REST show endpoints mac			${mac1}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']['port-group']}	
	Should Contain								${attachpoint}					${leaf0_pc4}
	${mac11} = 									BASH get intf mac				h1-rack1						bond0
	${result} =									REST show endpoints mac			${mac11}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']['port-group']}	
	Should Contain								${attachpoint}					${leaf0_pc11}
	${loss} = 									BASH ping						h4-rack0						${ipAddr} 			count=10
	Should Be True  							${loss} == 0		
	REST delete portgroup from vns				X								X1						${leaf0_pc11}			-1
	
DHCP discovery on the same vns as server without dhcp-relay enabled
	REST delete portgroup from vns				Z								Z2						${leaf0_pc11}			-1
	BASH init intf								h1-rack1								bond0
	BASH start service							h4-rack0								isc-dhcp-server
	sleep										1
	${value} = 									BASH check service status		h4-rack0						isc-dhcp-server
	Should Contain								${value}						is started
	sleep										1
	REST add portgroup to vns					X								X1						${leaf0_pc11}			-1
	sleep										1
	${value} = 									BASH release dhcpv4 address		h1-rack1						bond0
	Should Be True								${value}
	sleep										1
	${ipAddr} = 								BASH renew dhcpv4 address		h1-rack1						bond0
	Should Not Be Empty							${ipAddr}
	sleep										5
	BASH ping									h4-rack0								${ipAddr}				count=10
	${value} = 									BASH verify arp					h4-rack0						${ipAddr}
	Should Be True								${value} 		
	${value} =									BASH verify arp					h1-rack1						10.251.1.11
	Should Be True								${value} 	
	${mac1} = 									BASH get intf mac				h4-rack0						bond0
	${result} =									REST show endpoints mac			${mac1}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']['port-group']}	
	Should Contain								${attachpoint}					${leaf0_pc4}
	${mac11} = 									BASH get intf mac				h1-rack1						bond0
	${result} =									REST show endpoints mac			${mac11}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']['port-group']}	
	Should Contain								${attachpoint}					${leaf0_pc11}
	${loss} = 									BASH ping						h4-rack0						${ipAddr} 			count=10
	Should Be True  							${loss} == 0		
	REST delete portgroup from vns				X								X1						${leaf0_pc11}			-1		
	
L3 intra tenant dhcp relay on same rack with valid circuitid
	BASH init intf								h5-rack0								bond0
	BASH delete route							h5-rack0								10.251.1.0/24			10.251.2.1
  	BASH delete route							h5-rack0								10.251.3.0/24			10.251.2.1
	BASH delete route							h5-rack0								10.252.0.0/16			10.251.2.1
  	BASH delete route							h5-rack0								10.253.0.0/16			10.251.2.1
	BASH start service							h4-rack0								isc-dhcp-server
	sleep										1
	${value} = 									BASH check service status		h4-rack0						isc-dhcp-server
	Should Contain								${value}						is started
	sleep										1
	REST add dhcp relay							X								X2						10.251.1.11
	REST add dhcprelay circuitid				X								X2						private vns X2
	REST enable dhcp relay						X								X2	
### temporary workaround to enable dhcp relay to silent host	
	BASH ping									h4-rack0								10.251.1.1				count=5
	sleep										1
	${value} = 									BASH release dhcpv4 address		h5-rack0						bond0
	Should Be True								${value}
	sleep										1
	${ipAddr} = 								BASH renew dhcpv4 address		h5-rack0						bond0
	Should Not Be Empty							${ipAddr}
	sleep										5
	BASH ping									h4-rack0								${ipAddr}				count=10
	${value} = 									BASH verify arp					h4-rack0						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h5-rack0						10.251.2.1
	Should Be True								${value} 	
	${mac1} = 									BASH get intf mac				h4-rack0						bond0
	${result} =									REST show endpoints mac			${mac1}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']['port-group']}	
	Should Contain								${attachpoint}					${leaf0_pc4}
	${mac2} = 									BASH get intf mac				h5-rack0						bond0
	${result} =									REST show endpoints mac			${mac2}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']['port-group']}	
	Should Contain								${attachpoint}					${leaf0_pc5}
	${loss} = 									BASH ping						h4-rack0						${ipAddr} 			count=10
	Should Be True  							${loss} == 0	

L3 intra tenant dhcp relay on same rack with invalid circuitid
	BASH init intf								h5-rack0								bond0
	BASH delete route							h5-rack0								10.251.1.0/24			10.251.2.1
  	BASH delete route							h5-rack0								10.251.3.0/24			10.251.2.1
	BASH delete route							h5-rack0								10.252.0.0/16			10.251.2.1
  	BASH delete route							h5-rack0								10.253.0.0/16			10.251.2.1
	BASH start service							h4-rack0								isc-dhcp-server
	sleep										1
	${value} = 									BASH check service status		h4-rack0						isc-dhcp-server
	Should Contain								${value}						is started
	sleep										1
	REST add dhcp relay							X								X2						10.251.1.11
	REST add dhcprelay circuitid				X								X2						private vns AA2
	REST enable dhcp relay						X								X2	
### temp fix
	BASH ping									h4-rack0								10.251.1.1 				count=5
	sleep										1
	${value} = 									BASH release dhcpv4 address		h5-rack0						bond0
	Should Be True								${value}
	sleep										1
	${ipAddr} = 								BASH renew dhcpv4 address		h5-rack0						bond0
	Should Be Empty								${ipAddr}
	sleep										5
	${mac1} = 									BASH get intf mac				h4-rack0						bond0
	${result} =									REST show endpoints mac			${mac1}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']['port-group']}	
	Should Contain								${attachpoint}					${leaf0_pc4}
	${mac2} = 									BASH get intf mac				h5-rack0						bond0
	${result} =									REST show endpoints mac			${mac2}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']['port-group']}	
	Should Contain								${attachpoint}					${leaf0_pc5}


L3 dhcp request with and without dhcp relay enabled
	BASH init intf								h5-rack0								bond0
	BASH delete route							h5-rack0								10.251.1.0/24			10.251.2.1
  	BASH delete route							h5-rack0								10.251.3.0/24			10.251.2.1
	BASH delete route							h5-rack0								10.252.0.0/16			10.251.2.1
  	BASH delete route							h5-rack0								10.253.0.0/16			10.251.2.1
	BASH start service							h4-rack0								isc-dhcp-server
	sleep										1
	${value} = 									BASH check service status		h4-rack0						isc-dhcp-server
	Should Contain								${value}						is started
	sleep										1
	REST add dhcp relay							X								X2						10.251.1.11
	REST add dhcprelay circuitid				X								X2						private vns X2
	REST enable dhcp relay						X								X2	
	BASH ping									h4-rack0								10.251.1.1 				count=5
	sleep										1
	${value} = 									BASH release dhcpv4 address		h5-rack0						bond0
	Should Be True								${value}
	sleep										1
	${ipAddr} = 								BASH renew dhcpv4 address		h5-rack0						bond0
	Should Not Be Empty							${ipAddr}
	sleep										5
	BASH ping									h4-rack0								${ipAddr}				count=10
	${value} = 									BASH verify arp					h4-rack0						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h5-rack0						10.251.2.1
	Should Be True								${value} 	
	${mac4} = 									BASH get intf mac				h4-rack0						bond0
	${result} =									REST show endpoints mac			${mac4}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']['port-group']}	
	Should Contain								${attachpoint}					${leaf0_pc4}
	${mac5} = 									BASH get intf mac				h5-rack0						bond0
	${result} =									REST show endpoints mac			${mac5}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']['port-group']}	
	Should Contain								${attachpoint}					${leaf0_pc5}
	${loss} = 									BASH ping						h4-rack0						${ipAddr} 			count=10
	Should Be True  							${loss} == 0	
	${value} = 									BASH release dhcpv4 address		h5-rack0						bond0
	Should Be True								${value}
	REST disable dhcp relay						X								X2	
	sleep										1
	${ipAddr1} = 								BASH renew dhcpv4 address		h5-rack0						bond0
	Should Be Empty								${ipAddr1}
	sleep										5
	${result} =									REST show endpoints mac			${mac5}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']['port-group']}	
	Should Contain								${attachpoint}					${leaf0_pc5}
	${loss} = 									BASH ping						h4-rack0						${ipAddr} 			count=10
	Should Be True  							${loss} == 100		
	REST enable dhcp relay						X								X2	
	sleep										1
	${ipAddr1} = 								BASH renew dhcpv4 address		h5-rack0						bond0
	Should Not Be Empty							${ipAddr1}
	BASH ping									h5-rack0								${ipAddr1} 				count=5
	${loss} = 									BASH ping						h4-rack0						${ipAddr1} 			count=10
	Should Be True  							${loss} == 0		

Delete and Add L3 dhcp request
	BASH init intf								h5-rack0								bond0
	BASH delete route							h5-rack0								10.251.1.0/24			10.251.2.1
  	BASH delete route							h5-rack0								10.251.3.0/24			10.251.2.1
	BASH delete route							h5-rack0								10.252.0.0/16			10.251.2.1
  	BASH delete route							h5-rack0								10.253.0.0/16			10.251.2.1
	BASH start service							h4-rack0								isc-dhcp-server
	sleep										1
	${value} = 									BASH check service status		h4-rack0						isc-dhcp-server
	Should Contain								${value}						is started
	sleep										1
	REST add dhcp relay							X								X2						10.251.1.11
	REST add dhcprelay circuitid				X								X2						private vns X2
	REST enable dhcp relay						X								X2	
### temporary workaround to enable dhcp relay to silent host	
	BASH ping									h4-rack0								10.251.1.1				count=5
	sleep										1
	${value} = 									BASH release dhcpv4 address		h5-rack0						bond0
	Should Be True								${value}
	sleep										1
	${ipAddr} = 								BASH renew dhcpv4 address		h5-rack0						bond0
	Should Not Be Empty							${ipAddr}
	sleep										5
	BASH ping									h4-rack0								${ipAddr}				count=10
	${value} = 									BASH verify arp					h4-rack0						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h5-rack0						10.251.2.1
	Should Be True								${value} 	
	${mac1} = 									BASH get intf mac				h4-rack0						bond0
	${result} =									REST show endpoints mac			${mac1}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']['port-group']}	
	Should Contain								${attachpoint}					${leaf0_pc4}
	${mac2} = 									BASH get intf mac				h5-rack0						bond0
	${result} =									REST show endpoints mac			${mac2}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']['port-group']}	
	Should Contain								${attachpoint}					${leaf0_pc5}
	${loss} = 									BASH ping						h4-rack0						${ipAddr} 			count=10
	Should Be True  							${loss} == 0	
	REST delete dhcp relay						X								X2						10.251.1.11
	sleep										1
	${value} = 									BASH release dhcpv4 address		h5-rack0						bond0
	Should Be True								${value}
	sleep										1
	${ipAddr} = 								BASH renew dhcpv4 address		h5-rack0						bond0
	Should Be Empty								${ipAddr}
	sleep										5
	REST add dhcp relay							X								X2						10.251.1.11
	REST add dhcprelay circuitid				X								X2						private vns X2
	REST enable dhcp relay						X								X2	
	sleep										1
	${ipAddr} = 								BASH renew dhcpv4 address		h5-rack0						bond0
	Should Not Be Empty							${ipAddr}	
	${loss} = 									BASH ping						h4-rack0						${ipAddr} 			count=10
	Should Be True  							${loss} == 0	



L3 intra tenant traffic between private and public subnet
	REST add vns ip  							X								X1						10.251.1.1				24			private=true
	REST add vns ip  							Y								Y1						10.251.1.1				24	
	BASH init intf								h7-rack0								bond0.1007
	BASH add ip address							h7-rack0								10.251.1.11/24			bond0.1007 	
	BASH ping									h4-rack0								10.251.1.1				count=5
	BASH ping									h7-rack0								10.251.1.1				count=5
	BASH ping									h6-rack0								10.251.3.1				count=5
	${value} = 									BASH verify arp					h4-rack0						10.251.1.1
	Should Be True								${value} 		
	${value} = 									BASH verify arp					h7-rack0						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h6-rack0						10.251.3.1
	Should Be True								${value} 	
	${mac4} = 									BASH get intf mac				h4-rack0						bond0
	${result} =									REST show endpoints mac			${mac4}
	Should Be True								${result}						
	${mac7} = 									BASH get intf mac				h7-rack0						bond0.1007
	${result} =									REST show endpoints mac			${mac7}
	Should Be True								${result}						
	${mac6} = 									BASH get intf mac				h6-rack0						bond0.1006
	${result} =									REST show endpoints mac			${mac6}
	Should Be True								${result}						
	REST show endpoints		
	${loss} = 									BASH ping						h6-rack0						10.251.1.11 			count=10
	Should Be True  							${loss} == 0		


Configure overlapping IP on same tenant across VNS
	REST add tenant									A
	REST add vns									A							X1
	REST add vns									A							X2
	REST add vns									A							X3
	REST add router intf							A							X1
	REST add router intf							A							X2
	REST add router intf							A							X3	
	REST add vns ip  								A							X1				10.101.0.1				24
	sleep											2	
	${result} = 									REST add vns ip  			A				X2						10.101.0.1				25
	Should Not Be True								${result}
	sleep											2
	${result} = 									REST add vns ip  			A				X2						10.101.0.2				25
	Should Not Be True								${result}
	sleep											2
	${result} = 									REST add vns ip  			A				X2						10.101.0.254			17				
	Should Not Be True								${result}
	sleep											2
	${result} = 									REST add vns ip  			A				X2						10.101.0.255			24
	Should Not Be True								${result}
	REST delete vns ip								A							X1				10.101.0.1				24
	sleep											2
	${result} = 									REST add vns ip  			A				X2						10.101.0.1				25
	Should Be True									${result}
	REST delete vns ip								A							X2				10.101.0.1				25
	sleep											2
	${result} = 									REST add vns ip  			A				X2						10.101.0.2				25
	Should Be True									${result}
	REST delete vns ip								A							X2				10.101.0.2				25
	sleep											2
	${result} = 									REST add vns ip  			A				X2						10.101.0.254			17				
	Should Be True									${result}
	REST delete vns ip  							A							X2				10.101.0.254			17		
	sleep											2
	${result} = 									REST add vns ip  			A				X2						10.101.0.255			23
	Should Be True									${result}	


Configure overlapping IP with private keyword on the same tenant
	REST add tenant									A
	REST add vns									A							X1
	REST add vns									A							X2
	REST add vns									A							X3
	REST add router intf							A							X1
	REST add router intf							A							X2
	REST add router intf							A							X3	
	REST add vns ip  								A							X1				10.101.0.1				24					private=true
	sleep											2	
	${result} = 									REST add vns ip  			A				X2						10.101.0.1				25
	Should Not Be True								${result}
	sleep											2
	${result} = 									REST add vns ip  			A				X2						10.101.0.2				25
	Should Not Be True								${result}
	sleep											2
	${result} = 									REST add vns ip  			A				X2						10.101.0.254			17				
	Should Not Be True								${result}
	sleep											2
	${result} = 									REST add vns ip  			A				X2						10.101.0.255			24
	Should Not Be True								${result}
	REST delete vns ip								A							X1				10.101.0.1				24
	sleep											2
	${result} = 									REST add vns ip  			A				X2						10.101.0.1				25
	Should Be True									${result}
	REST delete vns ip								A							X2				10.101.0.1				25
	sleep											2
	${result} = 									REST add vns ip  			A				X2						10.101.0.2				25
	Should Be True									${result}
	REST delete vns ip								A							X2				10.101.0.2				25
	sleep											2
	${result} = 									REST add vns ip  			A				X2						10.101.0.254			17				
	Should Be True									${result}
	REST delete vns ip  							A							X2				10.101.0.254			17		
	sleep											2
	${result} = 									REST add vns ip  			A				X2						10.101.0.255			23
	Should Be True									${result}	
	

Controller HA failover via CLI
	${ipAddr4} = 								BASH get interface ipv4 		h4-rack0						bond0
	Should Not Be Empty							${ipAddr4}
	${ipAddr5} = 								BASH get interface ipv4 		h5-rack0						bond0
	Should Not Be Empty							${ipAddr5}
	BASH ping									h4-rack0								10.251.1.1				count=10
	BASH ping									h5-rack0								10.251.2.1				count=10
	${value} = 									BASH verify arp					h4-rack0						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h5-rack0						10.251.2.1
	Should Be True								${value} 
	${mac4} = 									BASH get intf mac				h4-rack0						bond0
	${result} =									REST show endpoints mac			${mac4}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']['port-group']}	
	Should Contain								${attachpoint}					${leaf0_pc4}	
	${mac5} = 									BASH get intf mac				h5-rack0						bond0
	${result} =									REST show endpoints mac			${mac5}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']['port-group']}	
	Should Contain								${attachpoint}					${leaf0_pc5}	
	${loss} = 									BASH ping						h4-rack0						10.251.2.11 			count=10
	Should Be True  							${loss} == 0					
	REST add interface to vns					X								X1						${leaf0-a}				${ixia1}				-1
	REST add interface to vns					X								X2						${leaf0-b}				${ixia2}				-1		
	${stream1}=  								L3 add  						name=stream1		  	flow=a<->b 				frame_rate=100000  			frame_size=9216  			frame_cnt=40000000
	...     									src_ip=10.251.1.101				src_gw=10.251.1.1		dst_ip=10.251.2.201		dst_gw=10.251.2.1			 			
	start traffic  								${stream1}
	sleep  10
	stop traffic								${stream1}
	verify results 								transmitted_frames  			received_frames  		${stream1}  			stream1
	start traffic								${stream1}
	sleep	5
	${value} = 									REST verify cluster election take leader
	Should Be True								${value}
	sleep										20
	

L3 intra tenant flap link towards spine0
	${ipAddr4} = 								BASH get interface ipv4 		h4-rack0						bond0
	Should Not Be Empty							${ipAddr4}
	${ipAddr5} = 								BASH get interface ipv4 		h5-rack0						bond0
	Should Not Be Empty							${ipAddr5}
	BASH ping									h4-rack0								10.251.1.1				count=10
	BASH ping									h5-rack0								10.251.2.1				count=10
	${value} = 									BASH verify arp					h4-rack0						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h5-rack0						10.251.2.1
	Should Be True								${value} 
	${mac1} = 									BASH get intf mac				h4-rack0						bond0
	${result} =									REST show endpoints mac			${mac1}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']['port-group']}	
	Should Contain								${attachpoint}					${leaf0_pc4}	
	${mac2} = 									BASH get intf mac				h5-rack0						bond0
	${result} =									REST show endpoints mac			${mac2}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']['port-group']}	
	Should Contain								${attachpoint}					${leaf0_pc5}	
	${loss} = 									BASH ping						h4-rack0						10.251.2.11 			count=10
	Should Be True  							${loss} == 0					
	REST add interface to vns					X								X1						${leaf0-a}				${ixia1}				-1
	REST add interface to vns					X								X2						${leaf0-b}				${ixia2}				-1		
	${stream1}=  								L3 add  						name=stream1		  	flow=a<->b 				frame_rate=100000  			frame_size=9216  			frame_cnt=20000000
	...     									src_ip=10.251.1.101				src_gw=10.251.1.1		dst_ip=10.251.2.201		dst_gw=10.251.2.1			 			
	start traffic  								${stream1}
	sleep  10
	stop traffic								${stream1}
	verify results 								transmitted_frames  			received_frames  		${stream1}  			stream1
	start traffic  								${stream1}
	sleep	5
   	CLI disable interface						s3								${leaf0a_spine0}	
	sleep	5
    log traffic rate  							tx_rate  						rx_rate  				a  						c
	CLI enable interface						s3								${leaf0a_spine0}	
  	sleep										10
	stop traffic								${stream1}
	calculate loss 								transmitted_frames  			received_valid_frames  		${stream1}  			stream1


L3 inter tenant traffic in the same rack
	BASH ping									h4-rack0								10.252.1.11				count=5
	${value} = 									BASH verify arp					h4-rack0						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h7-rack0						10.252.1.1
	Should Be True								${value} 
	${mac4} = 									BASH get intf mac				h4-rack0						bond0
	${result} =									REST show endpoints mac			${mac4}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']['port-group']}	
	Should Contain								${attachpoint}					${leaf0_pc4}	
	${mac7} = 									BASH get intf mac				h7-rack0						bond0.1007
	${result} =									REST show endpoints mac			${mac7}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']['port-group']}	
	Should Contain								${attachpoint}					${leaf0_pc7}	
	${loss} = 									BASH ping						h4-rack0						10.252.1.11 			count=10
	Should Be True  							${loss} == 0	


Inter tenant L3 dhcp relay
	BASH init intf								h8-rack0								bond0
	${value} = 									BASH check service status		h4-rack0						isc-dhcp-server
	Should Contain								${value}						is started
	sleep										1
	REST add dhcp relay							Y								Y2						10.251.1.11
	REST add dhcprelay circuitid				Y								Y2						private vns Y2
	REST enable dhcp relay						Y								Y2	
	BASH ping									h4-rack0								10.252.1.11				count=5
	${value} = 									BASH verify arp					h4-rack0						10.251.1.1
	Should Be True								${value} 		
#	${value} =									BASH verify arp					h8-rack0						10.252.1.1
#	Should Be True								${value} 
	${value} = 									BASH release dhcpv4 address		h8-rack0						bond0.1008
	Should Be True								${value}
	sleep										1
	${ipAddr} = 								BASH renew dhcpv4 address		h8-rack0						bond0.1008
	Should Not Be Empty							${ipAddr}
	sleep										5
	BASH ping									h4-rack0								${ipAddr}				count=5
	${mac4} = 									BASH get intf mac				h4-rack0						bond0
	${result} =									REST show endpoints mac			${mac4}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']['port-group']}	
	Should Contain								${attachpoint}					${leaf0_pc4}	
	${mac8} = 									BASH get intf mac				h8-rack0						bond0.1008
	${result} =									REST show endpoints mac			${mac8}
	${attachpoint} = 							Set Variable					${result[0]['attachment-point']['port-group']}	
	Should Contain								${attachpoint}					${leaf0_pc8}	
	${loss} = 									BASH ping						h4-rack0						${ipAddr}			count=10
	Should Be True  							${loss} == 0	


initialize host
	BASH delete tag										h6-rack0								bond0.1006				soft_error=${true}
	BASH delete tag										h7-rack0								bond0.1007				soft_error=${true}
	BASH delete tag										h8-rack0								bond0.1008				soft_error=${true}
	BASH delete tag										h9-rack0								bond0.1009				soft_error=${true}
	BASH delete tag										h1-rack0								bond0.1010				soft_error=${true}	
	BASH delete route									h4-rack0								10.251.2.0/24			10.251.1.1
	BASH delete route									h4-rack0								10.251.3.0/24			10.251.1.1
	BASH delete route									h4-rack0								10.252.0.0/16			10.251.1.1
	BASH delete route									h4-rack0								10.253.0.0/16			10.251.1.1
	BASH delete route									h5-rack0								10.251.1.0/24			10.251.2.1
  	BASH delete route									h5-rack0								10.251.3.0/24			10.251.2.1
	BASH delete route									h5-rack0								10.252.0.0/16			10.251.2.1
  	BASH delete route									h5-rack0								10.253.0.0/16			10.251.2.1
  	BASH delete route									h6-rack0								10.251.1.0/24			10.251.3.1
  	BASH delete route									h6-rack0								10.251.2.0/24			10.251.3.1
  	BASH delete route									h6-rack0								10.252.0.0/16			10.251.3.1
  	BASH delete route									h6-rack0								10.253.0.0/16			10.251.3.1
  	BASH delete route									h7-rack0								10.252.2.0/24			10.252.1.1
  	BASH delete route									h7-rack0								10.252.3/0/24			10.252.1.1
  	BASH delete route									h7-rack0								10.251.0.0/16			10.252.1.1
  	BASH delete route									h7-rack0								10.253.0.0/16			10.252.1.1
  	BASH delete route									h8-rack0								10.252.1.0/24			10.252.2.1
  	BASH delete route									h8-rack0								10.252.3.0/24			10.252.2.1
	BASH delete route									h8-rack0								10.251.0.0/16			10.252.2.1
  	BASH delete route									h8-rack0								10.253.0.0/16			10.252.2.1
  	BASH delete route									h9-rack0								10.252.1.0/24			10.252.3.1
  	BASH delete route									h9-rack0								10.252.2.0/24			10.252.3.1
  	BASH delete route									h9-rack0								10.251.0.0/16			10.252.3.1
  	BASH delete route									h9-rack0								10.253.0.0/16			10.252.3.1
 	BASH delete route									h1-rack0								10.253.2.0/24			10.253.1.1
  	BASH delete route									h1-rack0								10.253.3/0/24			10.253.1.1
  	BASH delete route									h1-rack0								10.251.0.0/16			10.253.1.1
  	BASH delete route									h1-rack0								10.252.0.0/16			10.253.1.1
  	BASH delete route									h1-rack1								10.253.1.0/24			10.253.2.1
  	BASH delete route									h1-rack1								10.253.3.0/24			10.253.2.1
	BASH delete route									h1-rack1 							10.251.0.0/16			10.253.2.1
  	BASH delete route									h1-rack1								10.252.0.0/16			10.253.2.1	

	BASH init intf								h4-rack0								bond0
	BASH init intf								h5-rack0								bond0
	BASH init intf								h6-rack0								bond0
	BASH init intf								h7-rack0								bond0
	BASH init intf								h8-rack0								bond0
	BASH init intf								h9-rack0								bond0
	BASH init intf								h1-rack0								bond0
	BASH init intf								h1-rack1								bond0
	BASH ifdown intf							h4-rack0 								bond0
	BASH ifdown intf							h5-rack0								bond0
	BASH ifdown intf							h6-rack0								bond0
	BASH ifdown intf							h7-rack0								bond0
	BASH ifdown intf							h8-rack0								bond0
	BASH ifdown intf							h9-rack0								bond0
	BASH ifdown intf							h1-rack0								bond0
	BASH ifdown intf							h1-rack1								bond0
	BASH release dhcpv4 address					h4-rack0								bond0
	BASH release dhcpv4 address					h5-rack0								bond0
	BASH release dhcpv4 address					h6-rack0								bond0
	BASH release dhcpv4 address					h7-rack0								bond0
	BASH release dhcpv4 address					h8-rack0								bond0
	BASH release dhcpv4 address					h9-rack0								bond0
	BASH release dhcpv4 address					h1-rack0								bond0
	BASH release dhcpv4 address					h1-rack1								bond0
	BASH ifup intf								h4-rack0								eth2
	BASH ifup intf								h4-rack0								eth3
	BASH ifup intf								h5-rack0								eth2
	BASH ifup intf								h5-rack0								eth3
	BASH ifup intf								h6-rack0								eth2
	BASH ifup intf								h6-rack0								eth3
	BASH ifup intf								h7-rack0								eth2
	BASH ifup intf								h7-rack0								eth3
	BASH ifup intf								h8-rack0								eth2
	BASH ifup intf								h8-rack0								eth3
	BASH ifup intf								h9-rack0								eth2
	BASH ifup intf								h9-rack0								eth3

setup topology
	initialize host
	REST add tenant									system
	REST add tenant 								X
	REST add tenant									Y
	REST add tenant									Z
	REST add vns									X							X1
	REST add vns									X							X2
	REST add vns									X							X3
	REST add vns									Y							Y1
	REST add vns									Y							Y2
	REST add vns									Y							Y3
	REST add vns									Z							Z1
	REST add vns									Z							Z2
	REST add vns									Z							Z3
	REST add vns									Z							Arista30
	REST add vns									Z							Arista29
	
	REST add router intf							X							X1
	REST add router intf							X							X2
	REST add router intf							X							X3
	REST add router intf							Y							Y1
	REST add router intf							Y							Y2
	REST add router intf							Y							Y3
	REST add router intf							Z							Z1
	REST add router intf							Z							Z2
	REST add router intf							Z							Z3
	REST add router intf 							Z							Arista30
	REST add router intf 							Z							Arista29
	REST add vns ip  								X							X1				10.251.1.1				24	
	REST add vns ip  								X							X2				10.251.2.1				24	
	REST add vns ip  								X							X3				10.251.3.1				24	
	REST add vns ip  								Y							Y1				10.252.1.1				24	
	REST add vns ip  								Y							Y2				10.252.2.1				24	
	REST add vns ip  								Y							Y3				10.252.3.1				24	
	REST add vns ip  								Z							Z1				10.253.1.1				24	
	REST add vns ip  								Z							Z2				10.253.2.1				24	
	REST add vns ip  								Z							Z3				10.253.3.1				24	
	REST add vns ip									Z							Arista30		10.99.0.2				24
	REST add vns ip									Z							Arista29		10.98.0.2				24
	REST add ecmp group								Z							ecmp-Arista
	REST add gw pool nexthop						Z							ecmp-Arista		10.99.0.1
	REST add gw pool nexthop						Z							ecmp-Arista		10.98.0.1
	REST add static routes							Z							192.168.0.0/24						{"ecmp-group-name": "ecmp-Arista"}
	REST add interface to portgroup					leaf0-a						${leaf0_pc1_intf1}					${leaf0_pc1}
	REST add interface to portgroup					leaf0-b						${leaf0_pc1_intf2}					${leaf0_pc1}
	REST add interface to portgroup					leaf0-a						${leaf0_pc2_intf1}					${leaf0_pc2}
	REST add interface to portgroup					leaf0-b						${leaf0_pc2_intf2}					${leaf0_pc2}
	REST add interface to portgroup					leaf0-a						${leaf0_pc3_intf1}					${leaf0_pc3}
	REST add interface to portgroup					leaf0-b						${leaf0_pc3_intf2}					${leaf0_pc3}	
	REST add interface to portgroup					leaf0-a						${leaf0_pc4_intf1}					${leaf0_pc4}
	REST add interface to portgroup					leaf0-b						${leaf0_pc4_intf2}					${leaf0_pc4}
	REST add interface to portgroup					leaf0-a						${leaf0_pc5_intf1}					${leaf0_pc5}
	REST add interface to portgroup					leaf0-b						${leaf0_pc5_intf2}					${leaf0_pc5}
	REST add interface to portgroup					leaf0-a						${leaf0_pc6_intf1}					${leaf0_pc6}
	REST add interface to portgroup					leaf0-b						${leaf0_pc6_intf2}					${leaf0_pc6}
	REST add interface to portgroup					leaf0-a						${leaf0_pc7_intf1}					${leaf0_pc7}
	REST add interface to portgroup					leaf0-b						${leaf0_pc7_intf2}					${leaf0_pc7}
  	REST add interface to portgroup					leaf0-a						${leaf0_pc8_intf1}					${leaf0_pc8}
	REST add interface to portgroup					leaf0-b						${leaf0_pc8_intf2}					${leaf0_pc8}
  	REST add interface to portgroup					leaf0-a						${leaf0_pc9_intf1}					${leaf0_pc9}
	REST add interface to portgroup					leaf0-b						${leaf0_pc9_intf2}					${leaf0_pc9}  	
  	REST add interface to portgroup					leaf0-a						${leaf0_pc10_intf1}					${leaf0_pc10}
	REST add interface to portgroup					leaf0-b						${leaf0_pc10_intf2}					${leaf0_pc10}
  	REST add interface to portgroup					leaf0-a						${leaf0_pc11_intf1}					${leaf0_pc11}
	REST add interface to portgroup					leaf0-b						${leaf0_pc11_intf2}					${leaf0_pc11}
	REST add interface to portgroup					leaf1-a						${leaf1_pc1_intf1}					${leaf1_pc1}
	REST add interface to portgroup					leaf1-b						${leaf1_pc1_intf2}					${leaf1_pc1}
	REST add interface to portgroup					leaf1-a						${leaf1_pc2_intf1}					${leaf1_pc2}
	REST add interface to portgroup					leaf1-b						${leaf1_pc2_intf2}					${leaf1_pc2}
	REST add interface to portgroup					leaf1-a						${leaf1_pc3_intf1}					${leaf1_pc3}
	REST add interface to portgroup					leaf1-b						${leaf1_pc3_intf2}					${leaf1_pc3}
	REST add interface to portgroup					leaf1-a						${leaf1_pc4_intf1}					${leaf1_pc4}
	REST add interface to portgroup					leaf1-b						${leaf1_pc4_intf2}					${leaf1_pc4}
	
	REST add interface to portgroup					leaf0-a						${leaf0_arista1_intf1}				${leaf0_arista1}
  	REST add interface to portgroup					leaf0-b						${leaf0_arista1_intf2}				${leaf0_arista1}
	REST add interface to portgroup					leaf0-a						${leaf0_arista2_intf1}				${leaf0_arista2}
  	REST add interface to portgroup					leaf0-b						${leaf0_arista2_intf2}				${leaf0_arista2}  	
  	REST add interface to portgroup					leaf3-a						${leaf3a_arista29_intf1}			${leaf3a_arista2}  	
  	REST add interface to portgroup					leaf3-a						${leaf3a_arista29_intf2}			${leaf3a_arista2}  	
   	REST add interface to portgroup					leaf3-a						${leaf3a_arista30_intf1}			${leaf3a_arista1}  	
   	REST add interface to portgroup					leaf3-a						${leaf3a_arista30_intf2}			${leaf3a_arista1}  	
  	REST add interface to portgroup					leaf3-b						${leaf3b_arista29_intf1}			${leaf3b_arista2}  	
  	REST add interface to portgroup					leaf3-b						${leaf3b_arista29_intf2}			${leaf3b_arista2}  	
   	REST add interface to portgroup					leaf3-b						${leaf3b_arista30_intf1}			${leaf3b_arista1}  	
   	REST add interface to portgroup					leaf3-b						${leaf3b_arista30_intf2}			${leaf3b_arista1}  	
  	
	REST add portgroup lacp							${leaf0_pc1}
  	REST add portgroup lacp							${leaf0_pc2}
  	REST add portgroup lacp							${leaf0_pc3}
  	REST add portgroup lacp							${leaf0_pc4}
  	REST add portgroup lacp							${leaf0_pc5}
  	REST add portgroup lacp							${leaf0_pc6}
  	REST add portgroup lacp							${leaf0_pc7}
  	REST add portgroup lacp							${leaf0_pc8}
  	REST add portgroup lacp							${leaf0_pc9}  	
    REST add portgroup lacp							${leaf0_pc10}
  	REST add portgroup lacp							${leaf0_pc11}  
  	REST add portgroup lacp							${leaf1_pc1}
  	REST add portgroup lacp							${leaf1_pc2}
  	REST add portgroup lacp							${leaf1_pc3}
  	REST add portgroup lacp							${leaf1_pc4}
  	REST add portgroup lacp							${leaf0_arista1}
  	REST add portgroup lacp							${leaf0_arista2}
  	REST add portgroup lacp							${leaf3a_arista1}
  	REST add portgroup lacp							${leaf3b_arista2}
  	REST add portgroup lacp							${leaf3a_arista1}
  	REST add portgroup lacp							${leaf3b_arista2}
  		
  	REST add portgroup to vns						X								X1						${leaf0_pc4}			-1
	REST add portgroup to vns						X								X2						${leaf0_pc5}			-1
	REST add portgroup to vns						X								X3						${leaf0_pc6}			1006
	REST add portgroup to vns						Y								Y1						${leaf0_pc7}			1007
	REST add portgroup to vns						Y								Y2						${leaf0_pc8}			1008
	REST add portgroup to vns						Y								Y3						${leaf0_pc9}			1009
	REST add portgroup to vns						Z								Z1						${leaf0_pc10}			1010
	REST add portgroup to vns						Z								Z2						${leaf0_pc11}			-1
#	REST add portgroup to vns						Z								Z3						${leaf0_pc12}			-1
	REST add portgroup to vns						Z								Arista30				${leaf0_arista1} 		-1
	REST add portgroup to vns						Z								Arista29				${leaf0_arista2} 		-1

	BASH ifup intf									h4-rack0 								bond0
	BASH ifup intf									h5-rack0								bond0
	BASH ifup intf									h6-rack0								bond0
	BASH ifup intf									h7-rack0								bond0	
	BASH ifup intf									h8-rack0								bond0	
	BASH ifup intf									h9-rack0								bond0	
	BASH ifup intf									h1-rack0								bond0	
	BASH ifup intf									h1-rack1								bond0	
	BASH add tag									h6-rack0								bond0					1006
	BASH add tag									h7-rack0								bond0					1007
	BASH add tag									h8-rack0								bond0					1008
	BASH add tag									h9-rack0								bond0					1009
	BASH add tag									h1-rack0								bond0					1010
	BASH ifup intf									h6-rack0								bond0.1006
	BASH ifup intf									h7-rack0								bond0.1007
	BASH ifup intf									h8-rack0								bond0.1008
	BASH ifup intf									h9-rack0								bond0.1009
	BASH ifup intf									h1-rack0								bond0.1010
	BASH add ip address								h4-rack0								10.251.1.11/24			bond0	
	BASH add ip address								h5-rack0								10.251.2.11/24			bond0
	BASH add ip address								h6-rack0								10.251.3.11/24			bond0.1006
	BASH add ip address								h7-rack0								10.252.1.11/24			bond0.1007
	BASH add ip address								h8-rack0								10.252.2.11/24			bond0.1008
	BASH add ip address								h9-rack0								10.252.3.11/24			bond0.1009
	BASH add ip address								h1-rack0								10.253.1.11/24			bond0.1010
	BASH add ip address								h1-rack1								10.253.2.11/24			bond0
	BASH add route									h4-rack0								10.251.2.0/24			10.251.1.1
	BASH add route									h4-rack0								10.251.3.0/24			10.251.1.1
	BASH add route									h4-rack0								10.252.0.0/16			10.251.1.1
	BASH add route									h4-rack0								10.253.0.0/16			10.251.1.1
	BASH add route									h5-rack0								10.251.1.0/24			10.251.2.1
  	BASH add route									h5-rack0								10.251.3.0/24			10.251.2.1
	BASH add route									h5-rack0								10.252.0.0/16			10.251.2.1
  	BASH add route									h5-rack0								10.253.0.0/16			10.251.2.1
  	BASH add route									h6-rack0								10.251.1.0/24			10.251.3.1
  	BASH add route									h6-rack0								10.251.2.0/24			10.251.3.1
  	BASH add route									h6-rack0								10.252.0.0/16			10.251.3.1
  	BASH add route									h6-rack0								10.253.0.0/16			10.251.3.1
  	BASH add route									h7-rack0								10.252.2.0/24			10.252.1.1
  	BASH add route									h7-rack0								10.252.3/0/24			10.252.1.1
  	BASH add route									h7-rack0								10.251.0.0/16			10.252.1.1
  	BASH add route									h7-rack0								10.253.0.0/16			10.252.1.1
  	BASH add route									h8-rack0								10.252.1.0/24			10.252.2.1
  	BASH add route									h8-rack0								10.252.3.0/24			10.252.2.1
	BASH add route									h8-rack0								10.251.0.0/16			10.252.2.1
  	BASH add route									h8-rack0								10.253.0.0/16			10.252.2.1
  	BASH add route									h9-rack0								10.252.1.0/24			10.252.3.1
  	BASH add route									h9-rack0								10.252.2.0/24			10.252.3.1
  	BASH add route									h9-rack0								10.251.0.0/16			10.252.3.1
  	BASH add route									h9-rack0								10.253.0.0/16			10.252.3.1
 	BASH add route									h1-rack0								10.253.2.0/24			10.253.1.1
  	BASH add route									h1-rack0								10.253.3/0/24			10.253.1.1
  	BASH add route									h1-rack0								10.251.0.0/16			10.253.1.1
  	BASH add route									h1-rack0								10.252.0.0/16			10.253.1.1
  	BASH add route									h1-rack1								10.253.1.0/24			10.253.2.1
  	BASH add route									h1-rack1								10.253.3.0/24			10.253.2.1
	BASH add route									h1-rack1								10.251.0.0/16			10.253.2.1
  	BASH add route									h1-rack1								10.252.0.0/16			10.253.2.1
	REST add tenant routers intf to system			X
	REST add tenant routers intf to system			Y
	REST add tenant routers intf to system			Z
	REST add system intf to tenant routers 			X
	REST add system intf to tenant routers 			Y
	REST add system intf to tenant routers 			Z

	REST add static routes							X							0.0.0.0/0		 {"tenant-name": "system"}
	REST add static routes							Y							0.0.0.0/0		 {"tenant-name": "system"}  	
  	REST add static routes							Z							0.0.0.0/0		 {"tenant-name": "system"}  
  	
teardown topology
#	delete traffic
	REST delete vns ip  							X							X1				10.251.1.1				24	
	REST delete vns ip  							X							X2				10.251.2.1				24	
	REST delete vns ip  							X							X3				10.251.3.1				24	
	REST delete vns ip  							Y							Y1				10.252.1.1				24	
	REST delete vns ip  							Y							Y2				10.252.2.1				24	
	REST delete vns ip  							Y							Y3				10.252.3.1				24	
	REST delete vns ip  							Z							Z1				10.253.1.1				24	
	REST delete vns ip  							Z							Z2				10.253.2.1				24	
	REST delete vns ip  							Z							Z3				10.253.3.1				24	
	REST delete vns									X							X1
	REST delete vns									X							X2
	REST delete vns									X							X3
	REST delete vns									Y							Y1
	REST delete vns									Y							Y2
	REST delete vns									Y							Y3
	REST delete vns									Z							Z1
	REST delete vns									Z							Z2
	REST delete vns									Z							Z3
	REST delete tenant								X
	REST delete tenant								Y
	REST delete tenant								Z
	initialize host
	BASH delete route									h4-rack0								10.251.2.0/24			10.251.1.1
	BASH delete route									h4-rack0								10.251.3.0/24			10.251.1.1
	BASH delete route									h4-rack0								10.252.0.0/16			10.251.1.1
	BASH delete route									h4-rack0								10.253.0.0/16			10.251.1.1
	BASH delete route									h5-rack0								10.251.1.0/24			10.251.2.1
  	BASH delete route									h5-rack0								10.251.3.0/24			10.251.2.1
	BASH delete route									h5-rack0								10.252.0.0/16			10.251.2.1
  	BASH delete route									h5-rack0								10.253.0.0/16			10.251.2.1
  	BASH delete route									h6-rack0								10.251.1.0/24			10.251.3.1
  	BASH delete route									h6-rack0								10.251.2.0/24			10.251.3.1
  	BASH delete route									h6-rack0								10.252.0.0/16			10.251.3.1
  	BASH delete route									h6-rack0								10.253.0.0/16			10.251.3.1
  	BASH delete route									h7-rack0								10.252.2.0/24			10.252.1.1
  	BASH delete route									h7-rack0								10.252.3/0/24			10.252.1.1
  	BASH delete route									h7-rack0								10.251.0.0/16			10.252.1.1
  	BASH delete route									h7-rack0								10.253.0.0/16			10.252.1.1
  	BASH delete route									h8-rack0								10.252.1.0/24			10.252.2.1
  	BASH delete route									h8-rack0								10.252.3.0/24			10.252.2.1
	BASH delete route									h8-rack0								10.251.0.0/16			10.252.2.1
  	BASH delete route									h8-rack0								10.253.0.0/16			10.252.2.1
  	BASH delete route									h9-rack0								10.252.1.0/24			10.252.3.1
  	BASH delete route									h9-rack0								10.252.2.0/24			10.252.3.1
  	BASH delete route									h9-rack0								10.251.0.0/16			10.252.3.1
  	BASH delete route									h9-rack0								10.253.0.0/16			10.252.3.1
 	BASH delete route									h1-rack0								10.253.2.0/24			10.253.1.1
  	BASH delete route									h1-rack0								10.253.3/0/24			10.253.1.1
  	BASH delete route									h1-rack0								10.251.0.0/16			10.253.1.1
  	BASH delete route									h1-rack0								10.252.0.0/16			10.253.1.1
  	BASH delete route									h1-rack1								10.253.1.0/24			10.253.2.1
  	BASH delete route									h1-rack1								10.253.3.0/24			10.253.2.1
	BASH delete route									h1-rack1								10.251.0.0/16			10.253.2.1
  	BASH delete route									h1-rack1								10.252.0.0/16			10.253.2.1
	BASH delete tag										h6-rack0								bond0.1006				soft_error=${true}
	BASH delete tag										h7-rack0								bond0.1007				soft_error=${true}
	BASH delete tag										h8-rack0								bond0.1008				soft_error=${true}
	BASH delete tag										h9-rack0								bond0.1009				soft_error=${true}
	BASH delete tag										h1-rack0								bond0.1010				soft_error=${true}
	BASH init intf										h4-rack0 								bond0
	BASH init intf										h5-rack0								bond0
	BASH init intf										h6-rack0								bond0
	BASH init intf										h7-rack0								bond0	
	BASH init intf										h8-rack0								bond0	
	BASH init intf										h9-rack0								bond0	
	BASH init intf										h1-rack0								bond0	
	BASH init intf										h1-rack1								bond0	
	REST delete tenant routers intf to system			X
	REST delete tenant routers intf to system			Y
	REST delete tenant routers intf to system			Z									
	REST delete system intf to tenant routers			X
	REST delete system intf to tenant routers			Y
	REST delete system intf to tenant routers			Z
	REST delete tenant									X
	REST delete tenant									Y
	REST delete tenant									Z
	

T5 base suite setup
	base suite setup
	add fabric switch
	sleep 											5
	${result} = 									CLI verify controller		s1							c1		
	Should Be True									${result}
	${result} = 									CLI verify controller   	s1							c2
	Should Be True									${result}
	${result} = 									CLI verify controller       s2							c1
	Should Be True									${result}
	${result} = 									CLI verify controller       s2							c2
	Should Be True									${result}
	${result} = 									CLI verify controller       s3							c1
	Should Be True									${result}
	${result} = 									CLI verify controller       s3							c2
	Should Be True									${result}
	${result} = 									CLI verify controller       s4							c1
	Should Be True									${result}
	${result} = 									CLI verify controller       s4							c2
	Should Be True									${result}
	${result} = 									CLI verify controller       s5							c1
	Should Be True									${result}
	${result} = 									CLI verify controller       s5							c2
	Should Be True									${result}
	${result} = 									CLI verify controller       s6							c1
	Should Be True									${result}
	${result} = 									CLI verify controller       s6							c2
	Should Be True									${result}
	${result} = 									CLI verify controller       s7							c1
	Should Be True									${result}
	${result} = 									CLI verify controller       s7							c2
	Should Be True									${result}
	${result} = 									CLI verify controller       s8							c1
	Should Be True									${result}
	${result} = 									CLI verify controller       s8							c2
	Should Be True									${result}
	${result} = 									CLI verify controller       s9							c1
	Should Be True									${result}
	${result} = 									CLI verify controller       s9							c2
	Should Be True									${result}
	${result} = 									CLI verify controller       s10							c1
	Should Be True									${result}
	${result} = 									CLI verify controller       s10							c2
	Should Be True									${result}						
	REST add portgroup								${leaf0_pc1}
	REST add portgroup								${leaf0_pc2}
	REST add portgroup								${leaf0_pc3}
	REST add portgroup								${leaf0_pc4}
	REST add portgroup								${leaf0_pc5}
	REST add portgroup								${leaf0_pc6}
	REST add portgroup								${leaf0_pc7}			
	REST add portgroup								${leaf0_pc8}	
	REST add portgroup								${leaf0_pc9}
	REST add portgroup								${leaf0_pc10}			
	REST add portgroup								${leaf0_pc11}
	REST add portgroup								${leaf1_pc1}
	REST add portgroup								${leaf1_pc2}
	REST add portgroup								${leaf1_pc3}
	REST add portgroup								${leaf1_pc4}
	REST add portgroup								${leaf0_arista1}
	REST add portgroup								${leaf0_arista2}
  	REST add portgroup 								${leaf3a_arista1}
  	REST add portgroup 								${leaf3b_arista2}
  	REST add portgroup 								${leaf3a_arista1}
  	REST add portgroup 								${leaf3b_arista2}
	
T5 base suite teardown
  	REST delete portgroup lacp							${leaf0_pc1}
  	REST delete portgroup lacp							${leaf0_pc2}
  	REST delete portgroup lacp							${leaf0_pc3}
  	REST delete portgroup lacp							${leaf0_pc4}
  	REST delete portgroup lacp							${leaf0_pc5}
  	REST delete portgroup lacp							${leaf0_pc6}
  	REST delete portgroup lacp							${leaf0_pc7}
  	REST delete portgroup lacp							${leaf0_pc8}
  	REST delete portgroup lacp							${leaf0_pc9}
  	REST delete portgroup lacp							${leaf0_pc10}
  	REST delete portgroup lacp							${leaf0_pc11}
  	REST delete portgroup								${leaf0_pc1}
	REST delete portgroup								${leaf0_pc2}
	REST delete portgroup								${leaf0_pc3}
	REST delete portgroup								${leaf0_pc4}
	REST delete portgroup								${leaf0_pc5}
	REST delete portgroup								${leaf0_pc6}	
	REST delete portgroup								${leaf0_pc7}
	REST delete portgroup								${leaf0_pc8}	
	REST delete portgroup								${leaf0_pc9}	
	REST delete portgroup								${leaf0_pc10}
	REST delete portgroup								${leaf0_pc11}
	REST delete portgroup								${leaf1_pc1}
	REST delete portgroup								${leaf1_pc2}
	REST delete portgroup								${leaf1_pc3}
	REST delete portgroup								${leaf1_pc4}	
	REST delete portgroup								${leaf0_arista1}
	REST delete portgroup								${leaf0_arista2}
  	REST delete portgroup 								${leaf3a_arista1}
  	REST delete portgroup 								${leaf3b_arista2}
  	REST delete portgroup 								${leaf3a_arista1}
  	REST delete portgroup 								${leaf3b_arista2}	
	delete fabric switch  


verify results   [Arguments]  ${transmitted_frames}  ${received_frames}  ${stream}  ${stream_name}
    Sleep  5
    ${report}=  fetch port stats  stream=${stream}  
    ${tx_value}=  verify dict key  ${report}  ${stream_name}  ${transmitted_frames}
    ${rx_value}=  verify dict key  ${report}  ${stream_name}  ${received_frames}
    ${in_range}=  ixia verify traffic rate  ${tx_value}  ${rx_value}
 	Log 		${in_range}
   Should be true  ${in_range}	
  	
calculate loss	 [Arguments]  ${transmitted_frames}  ${received_frames}  ${stream}  ${stream_name}
    Sleep  5
    ${report} =  	fetch port stats  	stream=${stream}  
    ${tx_value} =  	verify dict key  	${report}  ${stream_name}  ${transmitted_frames}
    ${rx_value} =  	verify dict key  	${report}  ${stream_name}  ${received_frames}
	${loss} = 		evaluate 			${tx_value} - ${rx_value}
	Log 			${loss}
	
verify traffic rate   [Arguments]  ${tx_rate}  ${rx_rate}  ${tx_intf}  ${rx_intf}
    Sleep  5
    ${report}=  fetch port stats
    Log  	${report}
    ${tx_value}=  verify dict key  ${report}  ${tx_intf}  transmitted_frame_rate
    ${rx_value}=  verify dict key  ${report}  ${rx_intf}  received_valid_frame_rate
    ixia verify traffic rate  ${tx_value}  ${rx_value}
    
verify traffic packet  [Arguments]  ${tx_cnt}  ${rx_cnt}  ${tx_intf}  ${rx_intf}
	Sleep  5
    ${report} =  	fetch port stats
    ${tx_value} =  	verify dict key  	${report}  ${tx_intf}  transmitted_frames
    ${rx_value} =  	verify dict key  	${report}  ${rx_intf}  received_valid_frames
    ${result} =  	evaluate  			${tx_value} - ${rx_value}
    Log 	${result}
#   Should Be True   -100000 < ${result} < 100000


    