* Setting
Documentation   T5 Basic L3 two spine three leaf rack with dual-tor Test Suite
Suite Setup     T5 base suite setup
Suite Teardown  T5 base suite teardown
Test Setup      setup topology
Test Teardown   teardown topology
Force Tags      T5 Sanity
Library         keywords/BsnCommon.py
Library         keywords_dev/slim/Host.py
Library         keywords/T5.py
Library         keywords/T5L3.py
Library         keywords/T5Platform.py
Library         keywords_dev/animesh/BsnCommonShow.py
Library         keywords_dev/slim/SwitchLight.py
Library	        Collections.py
Library         keywords/Ixia.py
Resource		testsuites_dev/slim/T5_L3_colo/t5_layer3_colo_variables.txt
Resource		testsuites_dev/slim/T5_L3_colo/t5_layer3_colo_resources.txt


* Test Cases
Intra tenant L3 untagged traffic with dynamic endpoints same rack
	L3 intra tenant same rack untagged with dynamic endpoints
	[Tags]							skipped			smoke				sanity			

Intra tenant L3 untagged traffic with dynamic endpoints across rack
	L3 intra tenant across rack untagged with dynamic endpoints
	[Tags]							skipped			smoke				sanity	

Intra tenant L3 tagged traffic with dynamic endpoints same rack
	L3 intra tenant same rack tagged with dynamic endpoints
	[Tags]							skipped			smoke				sanity			

Intra tenant L3 tagged traffic with dynamic endpoints across rack
	L3 intra tenant across rack tagged with dynamic endpoints
	[Tags]							skipped			smoke				sanity	

Intra tenant L3 untagged traffic with static endpoints same rack
	L3 intra tenant same rack untagged with static endpoints
	[Tags]							skipped			smoke				sanity			

Intra tenant L3 untagged traffic with static endpoints across rack
	L3 intra tenant across rack untagged with static endpoints
	[Tags]							skipped			smoke				sanity	

Intra tenant L3 tagged traffic with static endpoints same rack
	L3 intra tenant same rack tagged with static endpoints
	[Tags]							skipped			smoke				sanity			

Intra tenant L3 tagged traffic with static endpoints across rack
	L3 intra tenant across rack tagged with static endpoints
	[Tags]							skipped			smoke				sanity	

Intra tenant dhcp relay 
	L3 intra tenant dhcp relay on same rack
	[Tags]							skipped			smoke				sanity	
	
Intra tenant dhcp relay with circuit id
	L3 intra tenant dhcp relay with circuit id on same rack
	[Tags]							skipped			smoke				sanity	

Intra tenant dhcp relay across rack
	L3 intra tenant dhcp relay across rack
	[Tags]							skipped			smoke				sanity	
	
Intra tenant dhcp relay with circuit id across rack
	L3 intra tenant dhcp relay with circuit id across rack
	[Tags]							skipped			smoke				sanity	

Delete and Add dhcp relay
	L3 dhcp request without dhcp relay enabled
	[Tags]							skipped			sanity	

Add and delete untagged endpoints with existing host
	L3 add and delete untagged endpoints with existing host
	[Tags]							skipped			feature	
	
Add and delete tagged endpoints with existing host
	L3 add and delete tagged endpoints with existing host
	[Tags]							skipped			feature	
		
Change L3 endpoint from untagged to tagged and back		
	L3 change endpoint from untagged to tagged and back	
	[Tags]							skipped			feature	

Verify L3 endpoint aging
	Check L3 endpoint aging 
	[Tags]							skipped			feature	
	
Verify L3 ttl 1 is not being forwarded
	Check L3 ttl 1 is dropped
	[Tags]							skipped			sanity			

Change router vns ip
	Change router ip address
	[Tags]							skipped			feature			

Delete and add router vns ip
	Delete and add router vns ip 
	[Tags]							skipped			feature			

Change tagged endpoint IP address
	Change tagged host endpoint IP address
	[Tags]							skipped			feature		

Configure static endpoint with host showing up on another port
	Static endpoint with dynamic host showing up on another port
	[Tags]							skipped			sanity		

Verify subnet mask is properly applied on router vns
	Verify subnet mask on vns router ip
	[Tags]							skipped			feature		

Verify vlsm forwarding
	Verify vlsm forwarding
	[Tags]							skipped			feature		

Verify split horizon forwarding
	Verify l3 forwarding on one arm router
	[Tags]							skipped			feature			manual		
	
Small Scale with 100 vns 		
	One Tenant 100 VNS with one host each
	[Tags]							skipped			feature			scale
	
Configure overlapping router IP 	
	Configure overlapping IP on same tenant across VNS	
	[Tags]							skipped			feature		
	
Trigger controller HA failover via CLI
	Controller HA failover via CLI	
#	[Tags]							skipped			feature			
	
Trigger controller HA failover via reboot
	Controller HA failover via reboot
#	[Tags]							skipped			feature			

Spine reboot
	Reboot spine0 via CLI
#	[Tags]							skipped			feature			

Leaf reboot
	Reboot Leaf0 via CLI
#	[Tags]							skipped			feature			

Spine connect and disconnect to controller
	Connect and Disconnect spine to controller
#	[Tags]							skipped			feature			
	
Leaf connect and disconnect to controller	
	Connect and disconnect one leaf in dual tor to controller
#	[Tags]							skipped			feature			

Spine to leaf link flap
	Flap link between leaf and spine
#	[Tags]							skipped			feature			

Leaf to host link flap
	Flap bond interface towards host
#	[Tags]							skipped			feature			
	
Restart ofad process on spine
	restart ofad on spine
#	[Tags]							skipped			feature			
	
Restart ofad process on leaf	
	restart ofad on leaf
#	[Tags]							skipped			feature			
	
L3 traffic behavior in headless mode
	L3 intra tenant traffic behavior in headless mode 
	Log								manual untested
#	[Tags]							manual			untested			feature			
		
	
* Keywords
L3 intra tenant same rack untagged with dynamic endpoints
	BASH ifup intf								h1 								bond0
	BASH ifup intf								h2								bond0
	BASH ifup intf								h3								bond0
	BASH ifup intf								h4								bond0	
	BASH ifup intf								h5								bond0	
	REST add portgroup to vns					X								X1						${leaf0_pc1}			-1
	REST add portgroup to vns					X								X2						${leaf0_pc2}			-1
#	REST add interface to vns					X								X1						${leaf0-a}				${ixia1}				-1
#	REST add interface to vns					X								X2						${leaf1-a}				${ixia3}				-1
	BASH add ip address							h1								10.251.1.11/24			bond0	
	BASH add ip address							h2								10.251.2.11/24			bond0
	BASH add route								h1								10.251.2.0/24			10.251.1.1
	BASH add route								h2								10.251.1.0/24			10.251.2.1
	sleep										10	
	BASH ping									H1								10.251.1.1				count=10
	BASH ping									h2								10.251.2.1				count=10
	${value} = 									BASH verify arp					h1						10.251.1.1
	Should Be True								${value} 		
	${value} =									BASH verify arp					h2						10.251.2.1
	Should Be True								${value} 
	${mac1} = 									BASH get intf mac				h1						bond0
	${result} =									REST show endpoints mac			${mac1}
	Should Be True								${result}						
	${mac2} = 									BASH get intf mac				h2						bond0
	${result} =									REST show endpoints mac			${mac2}
	Should Be True								${result}						
	REST show endpoints	
	${loss} = 									BASH ping						h1						10.251.2.11 			count=10
	Should Be True  							${loss} == 0	
#	${stream1}=  								L3 add  						name=stream1		  	flow=a<->c 				frame_rate=100000  			frame_size=9216  			frame_cnt=10000000
#	...     									src_ip=10.251.1.101				src_gw=10.251.1.1		dst_ip=10.251.2.201		dst_gw=10.251.2.1			 			
#   start traffic  								${stream1}
#   sleep  10
#   stop traffic								${stream1}
#   verify results 								transmitted_frames  			received_frames  		${stream1}  			stream1
	BASH delete route							h5								10.251.2.0/24			10.251.1.1
	BASH delete route							h6								10.251.1.0/24			10.251.2.1
	
	

initialize host
	BASH delete tag								h1								bond0.1001				soft_error=${true}
	BASH delete tag								h2								bond0.1002				soft_error=${true}
	BASH delete tag								h3								bond0.1003				soft_error=${true}
	BASH delete tag								h4								bond0.1004				soft_error=${true}
	BASH delete tag								h5								bond0.1005				soft_error=${true}
	BASH init intf								h1								bond0
	BASH init intf								h2								bond0
	BASH init intf								h3								bond0
	BASH init intf								h4								bond0
	BASH init intf								h5								bond0
	BASH ifdown intf							h1 								bond0
	BASH ifdown intf							h2								bond0
	BASH ifdown intf							h3								bond0
	BASH ifdown intf							h4								bond0
	BASH ifdown intf							h5								bond0
	BASH release dhcpv4 address					h1								bond0
	BASH release dhcpv4 address					h2								bond0
	BASH release dhcpv4 address					h3								bond0
	BASH release dhcpv4 address					h4								bond0
	BASH release dhcpv4 address					h5								bond0
	BASH ifup intf								h1								eth2
	BASH ifup intf								h1								eth3
	BASH ifup intf								h2								eth2
	BASH ifup intf								h2								eth3
	BASH ifup intf								h3								eth2
	BASH ifup intf								h3								eth3
	BASH ifup intf								h4								eth2
	BASH ifup intf								h4								eth3
	BASH ifup intf								h5								eth2
	BASH ifup intf								h5								eth3

setup topology
	initialize host
	add fabric switch
	sleep 											1
	REST add tenant 								X
	REST add tenant									Y
	REST add tenant									Z
	REST add vns									X							X1
	REST add vns									X							X2
	REST add vns									X							X3
	REST add vns									Y							Y1
	REST add vns									Y							Y2
	REST add vns									Y							Y3
	REST add vns									Z							Z1
	REST add vns									Z							Z2
	REST add vns									Z							Z3
	REST add router intf							X							X1
	REST add router intf							X							X2
	REST add router intf							X							X3
	REST add router intf							Y							Y1
	REST add router intf							Y							Y2
	REST add router intf							Y							Y3
	REST add router intf							Z							Z1
	REST add router intf							Z							Z2
	REST add router intf							Z							Z3
	REST add vns ip  								X							X1				10.251.1.1				24	
	REST add vns ip  								X							X2				10.251.2.1				24	
	REST add vns ip  								X							X3				10.251.3.1				24	
	REST add vns ip  								Y							Y1				10.252.1.1				24	
	REST add vns ip  								Y							Y2				10.252.2.1				24	
	REST add vns ip  								Y							Y3				10.252.3.1				24	
	REST add vns ip  								Z							Z1				10.253.1.1				24	
	REST add vns ip  								Z							Z2				10.253.2.1				24	
	REST add vns ip  								Z							Z3				10.253.3.1				24	
	REST add interface to portgroup					leaf0-a						${leaf0_pc1_intf1}					${leaf0_pc1}
	REST add interface to portgroup					leaf0-b						${leaf0_pc1_intf2}					${leaf0_pc1}
	REST add interface to portgroup					leaf0-a						${leaf0_pc2_intf1}					${leaf0_pc2}
	REST add interface to portgroup					leaf0-b						${leaf0_pc2_intf2}					${leaf0_pc2}
	REST add interface to portgroup					leaf1-a						${leaf1_pc1_intf1}					${leaf1_pc1}
	REST add interface to portgroup					leaf1-b						${leaf1_pc1_intf2}					${leaf1_pc1}
	REST add interface to portgroup					leaf1-a						${leaf1_pc2_intf1}					${leaf1_pc2}
	REST add interface to portgroup					leaf1-b						${leaf1_pc2_intf2}					${leaf1_pc2}
	REST add interface to portgroup					leaf2-a						${leaf2_pc1_intf1}					${leaf2_pc1}
	REST add interface to portgroup					leaf2-b						${leaf2_pc1_intf2}					${leaf2_pc1}
	REST add interface to portgroup					leaf2-a						${leaf2_pc2_intf1}					${leaf2_pc2}
	REST add interface to portgroup					leaf2-b						${leaf2_pc2_intf2}					${leaf2_pc2}	
  	REST add portgroup lacp							${leaf0_pc1}
  	REST add portgroup lacp							${leaf0_pc2}
  	REST add portgroup lacp							${leaf1_pc1}
  	REST add portgroup lacp							${leaf1_pc2}
  	REST add portgroup lacp							${leaf2_pc1}
  	REST add portgroup lacp							${leaf2_pc2}
 
 
teardown topology
	delete traffic
	REST delete vns ip  							X							X1				10.251.1.1				24	
	REST delete vns ip  							X							X2				10.251.2.1				24	
	REST delete vns ip  							X							X3				10.251.3.1				24	
	REST delete vns ip  							Y							Y1				10.252.1.1				24	
	REST delete vns ip  							Y							Y2				10.252.2.1				24	
	REST delete vns ip  							Y							Y3				10.252.3.1				24	
	REST delete vns ip  							Z							Z1				10.253.1.1				24	
	REST delete vns ip  							Z							Z2				10.253.2.1				24	
	REST delete vns ip  							Z							Z3				10.253.3.1				24	
	REST delete vns									X							X1
	REST delete vns									X							X2
	REST delete vns									X							X3
	REST delete vns									Y							Y1
	REST delete vns									Y							Y2
	REST delete vns									Y							Y3
	REST delete vns									Z							Z1
	REST delete vns									Z							Z2
	REST delete vns									Z							Z3
	REST delete tenant								X
	REST delete tenant								Y
	REST delete tenant								Z
	delete fabric switch
	initialize host
	

T5 base suite setup
	base suite setup
	add fabric switch
	sleep 											5
	${result} = 									CLI verify controller		s1							c1		
	Should Be True									${result}
	${result} = 									CLI verify controller   	s1							c2
	Should Be True									${result}
	${result} = 									CLI verify controller       s2							c1
	Should Be True									${result}
	${result} = 									CLI verify controller       s2							c2
	Should Be True									${result}
	${result} = 									CLI verify controller       s3							c1
	Should Be True									${result}
	${result} = 									CLI verify controller       s3							c2
	Should Be True									${result}
	${result} = 									CLI verify controller       s4							c1
	Should Be True									${result}
	${result} = 									CLI verify controller       s4							c2
	Should Be True									${result}
	REST add portgroup								${leaf0_pc1}
	REST add portgroup								${leaf0_pc2}
	REST add portgroup								${leaf1_pc1}
	REST add portgroup								${leaf1_pc2}
	REST add portgroup								${leaf2_pc1}
	REST add portgroup								${leaf2_pc2}
		
  
T5 base suite teardown
	delete fabric switch  
  	REST delete portgroup lacp							${leaf0_pc1}
  	REST delete portgroup lacp							${leaf0_pc2}
  	REST delete portgroup lacp							${leaf1_pc1}
  	REST delete portgroup lacp							${leaf1_pc2}
  	REST delete portgroup lacp							${leaf2_pc1}
  	REST delete portgroup lacp							${leaf2_pc2}	
	REST delete portgroup								${leaf0_pc1}
	REST delete portgroup								${leaf0_pc2}
	REST delete portgroup								${leaf1_pc1}
	REST delete portgroup								${leaf1_pc2}
	REST delete portgroup								${leaf2_pc1}
	REST delete portgroup								${leaf2_pc2}


verify results   [Arguments]  ${transmitted_frames}  ${received_frames}  ${stream}  ${stream_name}
    Sleep  5
    ${report}=  fetch port stats  stream=${stream}  
    ${tx_value}=  verify dict key  ${report}  ${stream_name}  ${transmitted_frames}
    ${rx_value}=  verify dict key  ${report}  ${stream_name}  ${received_frames}
    ${in_range}=  ixia verify traffic rate  ${tx_value}  ${rx_value}
 	Log 		${in_range}
   Should be true  ${in_range}	
  	
calculate loss	 [Arguments]  ${transmitted_frames}  ${received_frames}  ${stream}  ${stream_name}
    Sleep  5
    ${report} =  	fetch port stats  	stream=${stream}  
    ${tx_value} =  	verify dict key  	${report}  ${stream_name}  ${transmitted_frames}
    ${rx_value} =  	verify dict key  	${report}  ${stream_name}  ${received_frames}
	${loss} = 		evaluate 			${tx_value} - ${rx_value}
	Log 			${loss}
	
verify traffic rate   [Arguments]  ${tx_rate}  ${rx_rate}  ${tx_intf}  ${rx_intf}
    Sleep  5
    ${report}=  fetch port stats
    Log  	${report}
    ${tx_value}=  verify dict key  ${report}  ${tx_intf}  transmitted_frame_rate
    ${rx_value}=  verify dict key  ${report}  ${rx_intf}  received_valid_frame_rate
    ixia verify traffic rate  ${tx_value}  ${rx_value}
    
verify traffic packet  [Arguments]  ${tx_cnt}  ${rx_cnt}  ${tx_intf}  ${rx_intf}
	Sleep  5
    ${report} =  	fetch port stats
    ${tx_value} =  	verify dict key  	${report}  ${tx_intf}  transmitted_frames
    ${rx_value} =  	verify dict key  	${report}  ${rx_intf}  received_valid_frames
    ${result} =  	evaluate  			${tx_value} - ${rx_value}
    Log 	${result}
#   Should Be True   -100000 < ${result} < 100000


    