#!/usr/bin/env python
'''
Wrapper Script to spwan cotroller VMs on KVM Machine
'''
import os
import sys
import getpass
import argparse
import robot  # import to force append local robot libraries than python installed packages


vmdk_name = "controller-bvs-2.0.7-SNAPSHOT.vmdk"
vmdk_path = "/var/lib/jenkins/jobs/bvs\ master/lastSuccessful/archive/target/appliance/images/bvs/"
kvm_host = "10.192.104.13"
kvm_user = "root"
kvm_pwd = "bsn"
current_user = getpass.getuser()
kvm_handle = None
kvm_vmdk_path = None
vm_name = None

# Adding Gobot Path to sys path for Exscript APIs
bigrobot_path = os.path.dirname(__file__) + '/..'
exscript_path = bigrobot_path + '/vendors/exscript/src'
sys.path.insert(0, bigrobot_path)
sys.path.insert(1, exscript_path)
print "Detailed log can be tailed at /tmp/robot.log  or /tmp/autobot_%s.log" % current_user
from keywords.KVMOperations import KVMOperations

def usage():
    s = """\nUsage: vm_teardown <name>
Example:
$ vm_teardown \\
    <name>
    """
    print(s)
    sys.exit(1)

def main(*args):
    kvm_op = KVMOperations()
    result = kvm_op.vm_teardown(kvm_host=kvm_host,
                                vm_name=vm_name,
                                kvm_user=kvm_user,
                                kvm_password=kvm_pwd)
    if result['status_code'] == True:
        print "VM TearDown Success!!"
    else:
        print "VM TearDown Failure!!\n%s" % result['status_descr']

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("vm_name", help="This name is used to delete VM in KVM Hosts maintained for QA")
    parser.add_argument("--kvm_host", help="Use this option to specify differnt KVM Host from defautl KVM Hosts maintained by QA Team")
    args = parser.parse_args()
    vm_name = args.vm_name
    if args.kvm_host is not None:
        kvm_host = args.kvm_host
    main()

print "Success!!!"
