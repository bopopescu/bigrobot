#!/usr/bin/env python
'''
Wrapper Script to spwan cotroller VMs on KVM Machine
Usage:

'''
import os
import sys
import datetime
import getpass
import time
import argparse
import robot  # import to force append local robot libraries than python installed packages


if 'BIGROBOT_TESTBED' in os.environ:
    print "Unsetting env BIGROBOT_TESTBED..."
    del os.environ['BIGROBOT_TESTBED']

vmdk_name = "/var/lib/jenkins/jobs/bcf_master/lastSuccessful/archive/controller-bcf-*.qcow2"
mininet_vmdk = "/var/lib/jenkins/jobs/t6-mininet-vm/builds/lastSuccessfulBuild/archive/t6-mininet-vm/ubuntu-kvm/t6-mininet.qcow2"
vmdk_path = "/var/lib/jenkins/jobs/bcf_master/lastSuccessful/archive/"
kvm_user = "root"
kvm_pwd = "bsn"
current_user = getpass.getuser()

# Below are global Variables used accross the helpers methods below
kvm_handle = None
kvm_vmdk_path = None
kvm_vmdk_path1 = None
vm_name = None
vm_backup_name = None


# Adding Gobot Path to sys path for Exscript APIs
bigrobot_path = os.path.dirname(__file__) + '/..'
exscript_path = bigrobot_path + '/vendors/exscript/src'
sys.path.insert(0, bigrobot_path)
sys.path.insert(1, exscript_path)
import autobot.helpers as helpers
from keywords.KVMOperations import KVMOperations
import autobot.test as test

kvm_host = helpers.bigrobot_kvm_server()
kvm_ops = KVMOperations()

def usage():
    s = """\nUsage: vm_setup <name> <cluster_ip>

Example:
$ time vm_setup c1
Detailed log can be tailed at /tmp/robot.log  or /tmp/autobot_amallina.log
Creating VM with Name : amallina_c1_04011013
1. Success Copying Latest bcf VMDK to /var/lib/libvirt/images/amallina_c1_04011013.vmdk on KVM Host!!
2. Success Creating VM with Name: amallina_c1_04011013 on KVM_Host: 10.192.104.13
3. Success configuring first boot Controller IP : 10.192.94.230
Success !!!

real    3m4.757s
user    0m3.808s
sys     0m0.128s

Below is adding a slave to above created VM using above IP Address:

$ time vm_setup c2 10.192.94.230
Detailed log can be tailed at /tmp/robot.log  or /tmp/autobot_amallina.log
Creating VM with Name : amallina_c2_04011017
1. Success Copying Latest bcf VMDK to /var/lib/libvirt/images/amallina_c2_04011017.vmdk on KVM Host!!
2. Success Creating VM with Name: amallina_c2_04011017 on KVM_Host: 10.192.104.13
Success Adding bcf VM to Cluster !
3. Success configuring first boot Controller IP : 10.192.94.252
Success !!!

real    3m11.699s
user    0m3.888s
sys     0m0.132s
    """
    print(s)
    sys.exit(1)


def main(*args):
    global vm_name, kvm_vmdk_path, kvm_host, vm_backup_name
    args = parser.parse_args()
    vm_name = (current_user + '_' + args.vm_name + '_'
               + datetime.datetime.now().strftime("%m%d%H%M"))
    if args.cluster_ip is not None:
        vm_host_name = current_user + "-bcf-2"
    else:
        vm_host_name = current_user + "-bcf-1"
    helpers.summary_log("Creating VM with Name: %s " % vm_name)

    if args.kvm_host is not None:
        kvm_host = args.kvm_host

    if args.netmask is None:
        args.netmask = "18"
    if args.gateway is None:
        args.gateway = "10.8.0.1"
    if args.network_interface is None:
        args.network_interface = "br0"
    if args.vm_ram is None:
        args.vm_ram = "8192"
    # Setting below enviornment Variables for Jenkins CI
    term = helpers.get_env("TERM")
    helpers.log("TERM Value: %s" % term)
    helpers.set_env("TERM", "xterm")
    helpers.log("New TERM Value: %s" % term)
    helpers.bigrobot_test_ztn(False)
    helpers.bigrobot_test_setup(True)
    no_scp = True
    if args.jenkins_qcow_path is None:
        args.jenkins_qcow_path = vmdk_name

    if args.jenkins_project_name is not None:
        args.jenkins_qcow_path = "/var/lib/jenkins/jobs/%s/lastSuccessful/archive/controller-bcf-*.qcow2" % args.jenkins_project_name


    active_vm = kvm_ops.vm_setup(kvm_host=kvm_host,
                                 kvm_user=kvm_user,
                                 kvm_password=kvm_pwd,
                                 vm_type=args.vm_type,
                                 qcow_path=args.qcow_path,
                                 remote_qcow_bvs_path=args.jenkins_qcow_path,
                                 ip=args.active_ip,
                                 netmask=args.netmask,
                                 gateway=args.gateway,
                                 vm_name=vm_name,
                                 vm_host_name=vm_host_name,
                                 build_number=args.build_number,
                                 cluster_ip=args.cluster_ip,
                                 network_interface=args.network_interface, vm_ram=args.vm_ram)

    if not active_vm['status_code']:
        helpers.error_exit("Issue seen during VM setup\n%s"
                           % active_vm['status_descr'])

    # temporarily setting ACTIVE_VM env for jenkins vm_setup
    if args.vm_type == 'mininet':
        helpers.set_env("MININET_VM", active_vm['vm_name'])
    else:
        helpers.set_env("ACTIVE_VM", active_vm['vm_name'])
    helpers.log("Created Active VM: \n%s" % active_vm)

    if active_vm['status_code'] == False:
        helpers.log("VM setup failure on active vm!!\n%s"
                            % active_vm['status_descr'])
        sys.exit(1)

    if args.active_ip is None:
        helpers.summary_log("Using Cluster IP : %s" % active_vm['vm_ip'])
        args.active_ip = active_vm['vm_ip']

    standby_vm = None
    if args.standby_vm is not None:
        test.Test._instance = None
        vm_backup_name = (current_user + '_' + args.standby_vm + '_'
                          + datetime.datetime.now().strftime("%m%d%H%M"))
        vm_host_name = current_user + "-bcf-2"
        helpers.summary_log("Creating Slave VM with Name : %s"
                            % vm_backup_name)
        standby_vm = kvm_ops.vm_setup(kvm_host=kvm_host,
                                      kvm_user=kvm_user,
                                      kvm_password=kvm_pwd,
                                      vm_type=args.vm_type,
                                      qcow_path=args.qcow_path,
                                      remote_qcow_bvs_path=args.jenkins_qcow_path,
                                      ip=args.standby_ip,
                                      netmask=args.netmask,
                                      gateway=args.gateway,
                                      vm_name=vm_backup_name,
                                      cluster_ip=args.active_ip,
                                      vm_host_name=vm_host_name,
                                      build_number=args.build_number,
                                      network_interface=args.network_interface, vm_ram=args.vm_ram, no_scp=no_scp)
        helpers.log("Created Backup VM :\n%s" % standby_vm)
        # temporarily setting STANDBY_VM env for jenkins vm_setup
        helpers.set_env("STANDBY_VM", standby_vm['vm_name'])
        if standby_vm['status_code'] == False:
            helpers.summary_log("VM setup failure on standby vm!!\n%s"
                                % active_vm['status_descr'])
            sys.exit(1)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("vm_name",
                        help="This name will be included in KVM with a timestamp and user running this vm_setup")
    parser.add_argument("--standby_vm",
                        help="This name used for standby vm")
    parser.add_argument("--standby_ip",
                        help="This ip is used for standby vm")
    parser.add_argument("--cluster_ip",
                        help="This ip is used as Cluster IP while configurint first boot for created bcf VM")
    parser.add_argument("--netmask",
                        help="This netmask is used to configure both active and standby vms")
    parser.add_argument("--qcow_path",
                        help=("Use this option if qcow is local to KVM Host and this instance is running on same KVM Host reduces"
                              " time in Scp'ing qcow to KVM host"))
    parser.add_argument("--jenkins_qcow_path",
                        help=("Use this option to SCP qcow image from Jenkins server to KVM host"))
    parser.add_argument("--kvm_host",
                        help="Use this option to specify differnt KVM Host from defautl KVM hosts maintained by QA Team")
    parser.add_argument("--active_ip",
                        help="This IP will be configured for the spawned VM")
    parser.add_argument("--vm_type",
                        help="Please provide type as bcf/mininet")
    parser.add_argument("--build_number",
                        help="This build will be picked from jenkins")
    parser.add_argument("--gateway",
                        help="This used for gateway for VMs")
    parser.add_argument("--network_interface",
                        help="This used for virtual network interface on the KVM HOST Server")
    parser.add_argument("--vm_ram",
                        help="This used for vm RAM on  the KVM HOST Server")
    parser.add_argument("--jenkins_project_name",
                        help="This is project name used in jenkins.bigswitch.com Build Master")
    main()
    print "Success!!!"
    sys.exit(0)
