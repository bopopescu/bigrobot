#!/usr/bin/env python

"""
A test execution wrapper for Robot Framework.
"""

import os
import sys
import platform
import shutil
import subprocess


def set_environment():
    """
    Look for user-defined environments BIGROBOT_PATH and BIGTEST_PATH. If they
    don't exist then assume some defaults. Add them to Python path.
    """
    
    system = platform.system()
    if system == 'Darwin':
        p = '%s/Documents/workspace' % os.path.expanduser('~')
    elif system == 'Linux':
        p = '%s/workspace' % os.path.expanduser('~')
    else:
        sys.stderr.write("BigRobot is only supported on OSX and Linux.")
        sys.exit(1)

    if 'BIGROBOT_PATH' not in os.environ:
        os.environ['BIGROBOT_PATH'] = ''.join((p, '/bigrobot'))
    
    if 'BIGTEST_PATH' not in os.environ:
        os.environ['BIGTEST_PATH'] = ''.join((p, '/bigtest'))
    
    # Add paths to PYTHONPATH
    sys.path.append(os.environ['BIGROBOT_PATH'])
    sys.path.append(os.environ['BIGTEST_PATH'])
    exscript_path = ''.join((os.environ['BIGROBOT_PATH'],
                             '/vendors/exscript/src'))
    sys.path.append(exscript_path)
    
    # (Re-)export PYTHONPATH environment
    os.environ['PYTHONPATH'] = os.pathsep.join(sys.path)


def autobot_import():
    """
    Test importing the Autobot package. This must work else we fail hard.
    """
    try:
        import autobot.version
        autobot.version.get_version()  # just to silence the "unused" warning
    except ImportError:
        sys.stderr.write(
            "Error: Cannot find Autobot package. Please check PYTHONPATH,"
            " BIGROBOT_PATH, and BIGTEST_PATH environment variables.\n")
        sys.stderr.write("  BIGROBOT_PATH=%s\n" % os.environ['BIGROBOT_PATH'])
        sys.stderr.write("  BIGTEST_PATH=%s\n" % os.environ['BIGTEST_PATH'])
        sys.stderr.write("  PYTHONPATH=%s" % os.environ['PYTHONPATH'])
        sys.exit(1)


set_environment()

# Check to ensure Autobot import works. Don't proceed otherwise...
autobot_import()
import autobot.helpers as helpers


#
# Gobot initialization
#

os.environ['IS_GOBOT'] = 'True'

helpers.bigrobot_log_path(default='.')
if helpers.bigrobot_suite():
    helpers.bigrobot_log_path("%s/%s_%s" %
                     (helpers.bigrobot_log_path(),
                      helpers.bigrobot_suite(),
                      helpers.ts_local()))
if helpers.bigrobot_suite():
    helpers.bigrobot_topology(default=''.join((helpers.bigrobot_suite(),
                                               '.topo')))
helpers.bigrobot_suite_format(default='mw')
helpers.bigrobot_debug(default=0)
helpers.bigrobot_pandoc_support(default='1')
helpers.bigrobot_path()
helpers.bigtest_path()
helpers.python_path()

ROBOT_FRAMEWORK_OPTS = (
    '--loglevel=debug --debugfile=debug.log --exclude=skipped --outputdir=%s'
        % helpers.bigrobot_log_path()
    )
    # Exclude test cases tagged as 'skipped' from execution


def get_command_dict():
    commands = {}
    for x in globals():
        if not x.endswith("_command"):
            continue
        name, func = x[:-8], globals()[x]
        commands[name] = func
    return commands


def usage():
    version_command()
    print("Usage: gobot [command] [options]\n")

    # Print a list of all the test suites in the current directory.
    # Files extension should match the suite extension (e.g., either
    # 'mw', 'txt', etc).
    
    ext = ''.join(('.', helpers.bigrobot_suite_format()))

    file_list = []
    for (_, _, filenames) in os.walk('.'):
        file_list.extend(filenames)
        break

    # List of test suites, with file extension removed
    #suite_list = [f[:-3] for f in file_list if f.endswith(ext)]
    suite_list = [os.path.splitext(f)[0] for f in file_list if f.endswith(ext)]

    print("  Point environment variable BIGROBOT_SUITE to a test suite."
          " Select one below:")
    for _ in suite_list:
        print("    export BIGROBOT_SUITE=%s" % _)
    
    if not suite_list:
        print("    export BIGROBOT_SUITE=<testsuite_name>")
        
    print("")

    # Print the gobot commands
    cmd_list = []
    for cmd, func in sorted(get_command_dict().items()):
        if cmd == 'version':
            # Don't display version command
            continue
        if func.__doc__:
            cmd_list.append("  %s - %s" % (cmd, func.__doc__))
        else:
            cmd_list.append("  %s" % cmd)

    print("Commands:\n%s" % "\n".join(cmd_list))


def is_topology_defined():
    topo = helpers.bigrobot_topology()
    if not topo or not os.path.isfile(topo):
        # Topology file is not defined or does not exist
        return False
    else:
        return True
    

def exit_if_topology_not_defined():
    if not is_topology_defined():
        helpers.error_exit("Topology file (%s) is not defined.\n"
                           " See 'gobot help' for more information."
                           % helpers.bigrobot_topology())


def is_suite_defined():
    if helpers.bigrobot_suite() is None:
        return False
    else:
        return True


def exit_if_suite_not_defined():
    if not is_suite_defined():
        helpers.error_exit("BIGROBOT_SUITE environment variable required."
                           " See 'gobot help' for more information.")
    f = ''.join((helpers.bigrobot_suite(),
                 '.',
                 helpers.bigrobot_suite_format())) 
    if not os.path.exists(f):
        helpers.error_exit("Test suite file '%s' does not exist." % f)


def run(cmd, cwd=None, ignore_stderr=False, quiet=False, shell=True):
    """
    shell - Just pass the command string for execution in a subshell. This is
            ideal when command should run in the background (string can include
            '&') and/or command contains shell variables/wildcards.
    """ 
    if not quiet:
        print("Executing '%s'" % cmd)

    if shell:
        p = subprocess.call(cmd, shell=True)
    else:
        cmd_list = cmd.split(' ')
        p = subprocess.Popen(cmd_list,
                             stdout=subprocess.PIPE,
                             stderr=subprocess.PIPE, cwd=cwd)
        
        out, err = p.communicate() 
        if out:
            print(out)
        if err and not ignore_stderr:
            print(err)


def format_convert(f, quiet=False):
    """
    Convert the test suite file (special case for 'mw' only at this point) to:
      rst format - ReStructuredText format which is human reable
      html format - HTML file can be fed to Robot Framework for processing
    """
    if helpers.bigrobot_pandoc_support() != '1':
        return
    if helpers.bigrobot_suite_format() != 'mw':
        return
    
    run('pandoc %s.mw --from=mediawiki --to=rst --output=%s.rst' % (f, f),
        quiet=quiet)
    run('pandoc %s.mw --from=mediawiki --to=html --output=%s.html' % (f, f),
        quiet=quiet)


def format_convert_and_copy(f, p, quiet=False):
    format_convert(f, quiet)
    if not os.path.exists(helpers.bigrobot_log_path()):
        os.makedirs(helpers.bigrobot_log_path())
        
    for ext in ('mw', 'txt', 'rst', 'html'):
        filename = ''.join((f, '.', ext))
        if os.path.exists(filename):
            shutil.copy(filename, helpers.bigrobot_log_path())
        

#
# Gobot command definitions
#

def version_command():
    """
    Show the version of BigRobot.
    """
    print "BigRobot version %s" % helpers.get_version()
    
    
def suite_command():
    """
    Show the text output of the test suite.
    """
    exit_if_suite_not_defined()
    format_convert(helpers.bigrobot_suite(), quiet=True)
    run('cat %s.rst' % helpers.bigrobot_suite(), quiet=True)


def test_command():
    """
    Run tests in the test suite.
    """
    exit_if_suite_not_defined()
    exit_if_topology_not_defined()
    format_convert_and_copy(helpers.bigrobot_suite(),
                            helpers.bigrobot_log_path())
    
    ext = 'txt'
    if helpers.bigrobot_suite_format() == 'mw':
        ext = 'html'
        
    run('pybot %s %s.%s'
        % (ROBOT_FRAMEWORK_OPTS, helpers.bigrobot_suite(), ext))


def env_command():
    """
    Show the environment used by the test suite (useful for debugging purpose).
    """
    for env in sorted(helpers.bigrobot_env_list()):
        print("%s=%s" % (env, os.environ[env]))
    

def gui_command():
    """
    Run the Robot Framework GUI (RIDE).
    """
    exit_if_suite_not_defined()
    format_convert_and_copy(helpers.bigrobot_suite(),
                            helpers.bigrobot_log_path())
    run('ride.py 2> /dev/null &', shell=True)


def clean_command():
    """
    Remove output files created from Robot runs.
    """
    run('rm -f log.html report.html output.xml debug.log', shell=True)

    #if is_suite_defined():
    #    run('rm -f %s.rst %s.html' % (helpers.bigrobot_suite(),
    #                                  helpers.bigrobot_suite()))


def clean_deep_command():
    """
    Deep cleaning. Run 'clean' command and also remove log directories.
    """
    clean_command()

    if is_suite_defined():
        # Remove log directories matching the pattern 'suite_20yymmdd_hhmmss'
        run('rm -rfv %s_20[0-9][0-9][0-9][0-9][0-9][0-9]_[0-9][0-9][0-9][0-9][0-9][0-9]'
            % helpers.bigrobot_suite(), shell=True)


def startremotevm_command():
    """
    Setup remote VMs using BigTest (executes 'bt startremotevm').
    """
    run('bt startremotevm', cwd=helpers.bigtest_path())
    

def stopremotevm_command():
    """
    Tear down remote VMs using BigTest (executes 'bt stopremotevm').
    """
    run('bt stopremotevm', cwd=helpers.bigtest_path())


def main(args):
    if not args or args[0] in ['help', '-h', '--help']:
        usage()
        sys.exit(1)

    cmd = args[0]
    cmd_dict = get_command_dict()
    if cmd not in cmd_dict:
        sys.stderr.write("Unknown command: %s\n" % cmd)
        sys.exit(1)

    cmd_dict[cmd]()


if __name__ == '__main__':
    main(sys.argv[1:])
