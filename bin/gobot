#!/usr/bin/env python

"""
A test execution wrapper for Robot Framework.
"""

import os
import sys
import platform
import shutil
import argparse
import robot


def set_environment():
    """
    Look for user-defined environments BIGROBOT_PATH and BIGTEST_PATH. If they
    don't exist then assume some defaults. Add them to Python path.
    """

    system = platform.system()
    if system == 'Darwin':
        p = '%s/Documents/workspace' % os.path.expanduser('~')
    elif system == 'Linux':
        p = '%s/workspace' % os.path.expanduser('~')
    else:
        sys.stderr.write("BigRobot is only supported on OSX and Linux.")
        sys.exit(1)

    if 'BIGROBOT_PATH' not in os.environ:
        os.environ['BIGROBOT_PATH'] = ''.join((p, '/bigrobot'))

    if 'BIGTEST_PATH' not in os.environ:
        os.environ['BIGTEST_PATH'] = ''.join((p, '/bigtest'))

    # Add paths to PYTHONPATH
    sys.path.insert(0, os.environ['BIGROBOT_PATH'])
    sys.path.insert(1, os.environ['BIGTEST_PATH'])
    exscript_path = ''.join((os.environ['BIGROBOT_PATH'],
                             '/vendors/exscript/src'))
    sys.path.insert(2, exscript_path)

    # (Re-)export PYTHONPATH environment
    os.environ['PYTHONPATH'] = os.pathsep.join(sys.path)


def autobot_import():
    """
    Test importing the Autobot package. This must work else we fail hard.
    """
    try:
        import autobot.version
        autobot.version.get_version()  # just to silence the "unused" warning
    except ImportError:
        sys.stderr.write(
            "Error: Cannot find Autobot package. Please check PYTHONPATH,"
            " BIGROBOT_PATH, and BIGTEST_PATH environment variables.\n")
        sys.stderr.write("  BIGROBOT_PATH=%s\n" % os.environ['BIGROBOT_PATH'])
        sys.stderr.write("  BIGTEST_PATH=%s\n" % os.environ['BIGTEST_PATH'])
        sys.stderr.write("  PYTHONPATH=%s" % os.environ['PYTHONPATH'])
        sys.exit(1)


set_environment()

# Check to ensure Autobot import works. Don't proceed otherwise...
autobot_import()
import autobot.helpers as helpers


#
# Gobot initialization
#

os.environ['IS_GOBOT'] = 'True'

helpers.bigrobot_log_path(default='.')
if helpers.bigrobot_suite():
    helpers.bigrobot_log_path_exec_instance(default="%s/%s_%s"
                                            % (helpers.bigrobot_log_path(),
                                               helpers.bigrobot_suite(),
                                               helpers.ts_local()))
else:
    helpers.bigrobot_log_path_exec_instance(helpers.bigrobot_log_path())

if helpers.bigrobot_suite():
    helpers.bigrobot_topology(default=''.join((helpers.bigrobot_suite(),
                                               '.topo')))
helpers.bigrobot_params(default='None')
helpers.bigrobot_suite_format(default='txt')
helpers.bigrobot_exec_hint_format()
helpers.bigrobot_debug(default=1)

# !!! FIXME: We're doing away with Pandoc support (required by .mw format)
#     since .txt format is much more flexible. Can get rid of all things
#     relating to pandoc at some point.
helpers.bigrobot_pandoc_support(default='0')
helpers.bigrobot_path()
helpers.bigtest_path()
helpers.python_path()

ROBOT_FRAMEWORK_OPTS = (
    '--loglevel=trace',
    '--debugfile=debug.log',
    '--exclude=skipped',
    '--outputdir=%s' % helpers.bigrobot_log_path_exec_instance(),
    )
    # Exclude test cases tagged as 'skipped' from execution


def get_command_dict():
    commands = {}
    for x in globals():
        if not x.endswith("_command"):
            continue
        name, func = x[:-8], globals()[x]
        commands[name] = func
    return commands


def usage():
    version_hidden_command()
    print("Usage: gobot [command] [options]\n")

    # Print a list of all the test suites in the current directory.
    # Files extension should match the suite extension (e.g., either
    # 'mw', 'txt', etc).

    ext = ''.join(('.', helpers.bigrobot_suite_format()))

    file_list = []
    for (_, _, filenames) in os.walk('.'):
        file_list.extend(filenames)
        break

    # List of test suites, with file extension removed
    suite_list = [os.path.splitext(f)[0] for f in file_list if f.endswith(ext)]

    print("  Point environment variable BIGROBOT_SUITE to a test suite."
          " Select one below:")
    for _ in sorted(suite_list):
        print("    " + helpers.bigrobot_exec_hint_format() % _)

    if not suite_list:
        print("    export BIGROBOT_SUITE=<testsuite_name>")

    print("")

    # Print the gobot commands
    cmd_list = []
    for cmd, func in sorted(get_command_dict().items()):
        if cmd.endswith("_hidden"):
            # Don't display hidden commands
            continue
        if func.__doc__:
            cmd_list.append("  %s - %s" % (cmd, func.__doc__))
        else:
            cmd_list.append("  %s" % cmd)

    print("Commands:\n%s" % "\n".join(cmd_list))


def is_topology_defined():
    topo = helpers.bigrobot_topology()
    if not topo or not os.path.isfile(topo):
        # Topology file is not defined or does not exist
        return False
    else:
        return True


def exit_if_topology_not_defined():
    if not is_topology_defined():
        helpers.warn("Topology file (%s) is not defined.\n"
                     % helpers.bigrobot_topology(), level=None)


def is_suite_defined():
    if helpers.bigrobot_suite() is None:
        return False
    else:
        return True


def exit_if_suite_not_defined():
    if not is_suite_defined():
        helpers.error_exit("BIGROBOT_SUITE environment variable required."
                           " See 'gobot help' for more information.")
    f = ''.join((helpers.bigrobot_suite(),
                 '.',
                 helpers.bigrobot_suite_format()))
    if not os.path.exists(f):
        helpers.error_exit("Test suite file '%s' does not exist." % f)


def run(cmd, cwd=None, shell=True, quiet=False):
    status, msg = helpers.run_cmd(cmd, cwd=cwd, shell=shell, quiet=quiet)
    if msg:
        print msg
    return status


def format_convert(f, quiet=False):
    """
    Convert the test suite file (special case for 'mw' only at this point) to:
      rst format - ReStructuredText format which is human reable
      html format - HTML file can be fed to Robot Framework for processing
    """
    if helpers.bigrobot_pandoc_support() != '1':
        return
    if helpers.bigrobot_suite_format() != 'mw':
        return

    run('pandoc %s.mw --from=mediawiki --to=rst --output=%s.rst' % (f, f),
        quiet=quiet)
    run('pandoc %s.mw --from=mediawiki --to=html --output=%s.html' % (f, f),
        quiet=quiet)


def format_convert_and_copy(f, p, quiet=False):
    format_convert(f, quiet)
    if not os.path.exists(helpers.bigrobot_log_path_exec_instance()):
        os.makedirs(helpers.bigrobot_log_path_exec_instance())

    for ext in ('mw', 'txt', 'rst', 'html'):
        filename = ''.join((f, '.', ext))
        if os.path.exists(filename):
            shutil.copy(filename, helpers.bigrobot_log_path_exec_instance())


def create_symlinks_to_logs():
    log_path = helpers.bigrobot_log_path()
    log_path_run = helpers.bigrobot_log_path_exec_instance()
    log_files = ['debug.log', 'syslog.txt', 'log.html', 'report.html']

    for f in log_files:
        f2 = '/'.join((log_path, f))

        helpers.file_remove(f)
        helpers.file_remove(f2)

        source_file = '/'.join((log_path_run, f))

        # Create symlink only if source file exists
        if helpers.file_exists(source_file):
            os.symlink(source_file, f)
            if not helpers.file_exists(f2):
                # Create additional symlink, unless f == f2
                os.symlink(source_file, f2)

#
# Gobot command definitions
#

def version_hidden_command(*args):
    """
    Show the version of BigRobot.
    """
    import robot
    robot_framework_version = robot.version.VERSION
    import Exscript
    exscript_version = Exscript.version.__version__
    print "BigRobot version        %s" % helpers.get_version()
    print "Robot Framework version %s" % robot_framework_version
    print "Exscript version        %s" % exscript_version


def suite_command(*args):
    """
    Show the text output of the test suite.
    """
    exit_if_suite_not_defined()
    format_convert(helpers.bigrobot_suite(), quiet=True)
    run('cat %s.rst' % helpers.bigrobot_suite(), quiet=True)


def test_command(*args):
    """
    Run tests in the test suite.
    """
    exit_if_suite_not_defined()
    exit_if_topology_not_defined()
    format_convert_and_copy(helpers.bigrobot_suite(),
                            helpers.bigrobot_log_path_exec_instance())

    ext = 'txt'
    if helpers.bigrobot_suite_format() == 'mw':
        ext = 'html'

    # Command options:
    #   pybot --loglevel=debug \
    #         --debugfile=debug.log \
    #         --exclude=skipped \
    #         --outputdir=./mytest_20140108_052828 \
    #         mytest.txt
    # run('pybot %s %s.%s'
    #    % (ROBOT_FRAMEWORK_OPTS, helpers.bigrobot_suite(), ext))
    opts = []
    opts.extend(ROBOT_FRAMEWORK_OPTS)
    if (args):
        opts.extend(*args)
    opts.extend([''.join((helpers.bigrobot_suite(), '.', ext))])

    # print("Starting Robot with options:\n%s" % helpers.prettify(opts))
    robot.run_cli(opts)
    create_symlinks_to_logs()


def env_command(*args):
    """
    Show the environment used by the test suite (useful for debugging purpose).
    """
    for env in sorted(helpers.bigrobot_env_list()):
        print("%s=%s" % (env, os.environ[env]))


def gui_command(*args):
    """
    Run the Robot Framework GUI (RIDE).
    """
    run('ride.py 2> /dev/null &', shell=True)


def clean_command(*args):
    """
    Remove output files created from Robot runs.
    """
    run('rm -f log.html report.html output.xml debug.log syslog.txt',
        shell=True)


def clean_deep_command(*args):
    """
    Deep cleaning. Run 'clean' command and also remove log directories.
    """
    clean_command()

    if is_suite_defined():
        # Remove log directories matching the pattern 'suite_20yymmdd_hhmmss'
        run('rm -rfv %s_20[0-9][0-9][0-9][0-9][0-9][0-9]_[0-9][0-9][0-9][0-9][0-9][0-9]'
            % helpers.bigrobot_suite(), shell=True)


def codesize_hidden_command(*args):
    """
    Check the size of BigRobot source code.
    """
    cmd = ''.join((helpers.bigrobot_path(), "/bin/chk-code-bloat-bigrobot",
                   " ", helpers.bigrobot_path()))
    run(cmd, shell=True)


def startremotevm_command(*args):
    """
    Setup remote VMs using BigTest (executes 'bt startremotevm').
    """
    run('bt startremotevm', cwd=helpers.bigtest_path())


def stopremotevm_command(*args):
    """
    Tear down remote VMs using BigTest (executes 'bt stopremotevm').
    """
    run('bt stopremotevm', cwd=helpers.bigtest_path())


def main(args):
    if not args or args[0] in ['help', '-h', '--help']:
        usage()
        sys.exit(1)

    cmd = args[0]
    cmd_dict = get_command_dict()
    if cmd not in cmd_dict:
        hidden_cmd = cmd + "_hidden"
        if hidden_cmd not in cmd_dict:
            sys.stderr.write("Unknown command: %s\n" % cmd)
            sys.exit(1)
        else:
            cmd = hidden_cmd

    cmd_dict[cmd](args[1:])


if __name__ == '__main__':
    main(sys.argv[1:])
