#!/usr/bin/env python

"""
A test execution wrapper for Robot Framework.
"""

from __future__ import print_function
import os
import sys
import re
import shutil
import argparse
import robot


# Determine BigRobot path(s) based on this executable (which resides in
# the bin/ directory.
bigrobot_path = os.path.dirname(__file__) + '/..'
exscript_path = bigrobot_path + '/vendors/exscript/src'
marvin_path = bigrobot_path + '/vendors/marvin'
sys.path.insert(0, marvin_path)
sys.path.insert(0, exscript_path)
sys.path.insert(0, bigrobot_path)


import autobot.setup_env as setup_env
import autobot.helpers as helpers

setup_env.big_setup()


def get_command_dict():
    """
    Extract command names from functions which end with '_command' and place
    them in a dictionary. E.g.,
        test_command()
    """
    commands = {}
    for x in globals():
        if not x.endswith("_command"):
            continue
        name, func = x[:-8], globals()[x]
        commands[name] = func
    return commands


def usage():
    """
    Usage information for 'gobot'.
    """
    version_hidden_command()
    print("\nUsage: gobot [command] [options]\n")

    # Print a list of all the test suites in the current directory.
    # Files extension should match the suite extension (e.g., 'txt').

    file_list = []
    for (_, _, filenames) in os.walk('.'):
        file_list.extend(filenames)
        break

    # List of test suites, with file extension removed
    suite_list = [os.path.splitext(f)[0] for f in file_list if f.endswith('txt')]

    print("  Point environment variable BIGROBOT_SUITE to a test suite."
          " Select one below:")
    for _ in sorted(suite_list):
        print("    " + helpers.bigrobot_exec_hint_format() % _)

    if not suite_list:
        print("    export BIGROBOT_SUITE=<testsuite_name>")

    print("")

    # Print the gobot commands
    cmd_list = []
    for cmd, func in sorted(get_command_dict().items()):
        if cmd.endswith("_hidden"):
            # Don't display hidden commands
            continue
        if func.__doc__:
            cmd_list.append("  %s - %s" % (cmd, func.__doc__))
        else:
            cmd_list.append("  %s" % cmd)

    print("Commands:\n%s" % "\n".join(cmd_list))


def is_topology_defined():
    """
    Check whether topo file is specified (via env BIGROBOT_TOPOLOGY) and
    whether the file exists.
    """
    topo = helpers.bigrobot_topology()
    if topo and os.path.isfile(topo):
        return True
    else:
        # Topology file is not defined or does not exist
        return False


def warn_if_topology_not_defined():
    """
    Create warning log if topology is not defined.
    """
    status = is_topology_defined()
    if status == False:
        helpers.debug("Topology file (%s) is not defined.\n"
                      % helpers.bigrobot_topology(), level=None)
    return status


def is_suite_defined():
    """
    Check whether test suite file is specified (via env BIGROBOT_SUITE).
    """
    if helpers.bigrobot_suite() is None:
        return False
    else:
        return True


def exit_if_suite_not_defined():
    """
    Exit program if test suite is not defined.
    """
    if not is_suite_defined():
        helpers.error_exit("BIGROBOT_SUITE environment variable required."
                           " See 'gobot help' for more information.")
    f = ''.join((helpers.bigrobot_suite(), '.txt'))
    if not os.path.exists(f):
        helpers.error_exit("Test suite file '%s' does not exist." % f)
    return True


def run(cmd, cwd=None, shell=True, quiet=False):
    """
    Execute a command.
    """
    status, msg = helpers.run_cmd(cmd, cwd=cwd, shell=shell, quiet=quiet)
    if msg:
        print(msg)
    return status


def copy_suite(f, p, quiet=False):
    """
    Copy suite-related files to the log directory.
    """
    if not os.path.exists(p):
        os.makedirs(p)

    for ext in ('txt', 'topo'):
        filename = ''.join((f, '.', ext))
        if os.path.exists(filename):
            shutil.copy(filename, p)


def touch_log_files():
    log_files = ['debug.log', 'syslog.txt', 'log.html', 'report.html',
                 'output.xml', 'bigrobot_listener.log', 'dev_commands.log']
    for f in log_files:
        filename = '/'.join((helpers.bigrobot_log_path_exec_instance(), f))
        # print("Touching file %s" % filename)
        helpers.file_touch(filename)


def create_links_to_logs():
    """
    Create links to the log files located in the log directory. These
    links provide a convenient way to access the logs.
    """
    log_path = helpers.bigrobot_log_path()
    log_path_run = helpers.bigrobot_log_path_exec_instance()

    if log_path == log_path_run:
        # Paths are identical, so don't create links
        return

    log_files = ['debug.log', 'syslog.txt', 'log.html', 'report.html',
                 'output.xml', 'bigrobot_listener.log', 'dev_commands.log']

    for f in log_files:
        f2 = '/'.join((log_path, f))

        helpers.file_remove(f)
        helpers.file_remove(f2)

        source_file = '/'.join((log_path_run, f))

        # Create link only if source file exists
        if helpers.file_exists(source_file):
            os.link(source_file, f)
            if not helpers.file_exists(f2):
                # Create additional link, unless f == f2
                os.link(source_file, f2)

#
# Gobot command definitions
#

def version_hidden_command(*args):
    """
    Show the version of BigRobot.
    """
    _ = args  # unused, silent Pylint
    print(helpers.bigrobot_module_dependencies())


def cli_params_to_yaml_config(params, filename):
    params_dict = helpers.params_dot_notation_to_dict(params)
    helpers.log("Writing params arguments to file %s" % filename)
    helpers.file_write_once(filename, helpers.to_yaml(params_dict))


def test_command(*args):
    """
    Run tests in the test suite.
    """
    descr = ("Run a BigRobot test suite. Be sure to point the environment"
             " variable BIGROBOT_SUITE to a test suite (e.g.,"
             " export BIGROBOT_SUITE=mytest).")
    parser = argparse.ArgumentParser(prog='gobot test',
                                     description=descr)

    parser.add_argument('--include', metavar=('tag1', 'tag2'), nargs='*',
                        help='Run test cases by tags')
    parser.add_argument('--exclude',
                        metavar=('tag1', 'tag2'), nargs='*',
                        help='Exclude test cases by tags')
    parser.add_argument('--params', metavar=('key1=value1', 'key2=value2'),
                        nargs='*',
                        help='Define parameters for topology file')
    parser.add_argument('--test',
                        metavar=('name1', 'name2'), nargs='*',
                        help='Run test cases by name (must match entire string)')
    parser.add_argument('--testmatch',
                        metavar=('name1', 'name2'), nargs='*',
                        help='Run test cases by name (match anywhere)')
    parser.add_argument('--randomize', action='store_true', dest='randomize',
                        default=False,
                        help="Run test cases in random orders")
    parser.add_argument('--loglevel', default='trace',
                        help="Log level ('trace', 'debug', 'info')")
    parser.add_argument('--debugfile', default='debug.log',
                        help="Debug file")
    parser.add_argument('--outputdir',
                        default=helpers.bigrobot_log_path_exec_instance(),
                        help="Output directory")
    parser.add_argument('--dryrun', action='store_true', default=False,
                        help="Run the tests without executing the keywords")
    parser.add_argument('--include-manual-untested',
                        action='store_true', default=False,
                        help="Include the tests tagged as 'manual-untested'")
    parser.add_argument('--disable-clean-config',
                        action='store_true', default=False,
                        help="Bypass clean-config during Test initialization")

    # Note on --exitonfailure: It will not run subsequent test cases and will
    # simply flag them as failed with the error:
    # "Critical failure occurred and exit-on-failure mode is in use."
    parser.add_argument('--exitonfailure', action='store_true', default=False,
                        help="Stop test execution immediately if any critical test fails")

    args = parser.parse_args(*args)

    include_tags = args.include
    exclude_tags = args.exclude
    params = args.params

    if not exclude_tags:
        exclude_tags = []
    exclude_tags.append('skipped')

    if not args.include_manual_untested:
        exclude_tags.append('manual-untested')

    if args.test:
        print("test_case_names: %s" % args.test)

    if args.disable_clean_config:
        helpers.bigrobot_test_clean_config('False')

    # Comparable to command options:
    #   pybot --loglevel=debug \
    #         --debugfile=debug.log \
    #         --exclude=skipped \
    #         --outputdir=./mytest_20140108_052828 \
    #         mytest.txt

    options = {
               'exclude': exclude_tags,
               'loglevel': args.loglevel + ':info',
               'debugfile': args.debugfile,
               'outputdir': args.outputdir,
               'listener': 'autobot.listener.Listener',
               'dryrun': args.dryrun,
               'exitonfailure': args.exitonfailure,
               }
    if include_tags:
        options['include'] = include_tags
    if args.randomize:
        options['randomize'] = 'tests'
    if args.test:
        options['test'] = args.test
    if args.testmatch:
        if 'test' not in options:
            options['test'] = []
        for tc in args.testmatch:
            options['test'].append("*" + tc + "*")

    exit_if_suite_not_defined()
    status = warn_if_topology_not_defined()

    if status:
        if re.match(r'.*\.virtual\.topo$', helpers.bigrobot_topology()):
            options['settag'] = 'virtual'
        elif re.match(r'.*\.physical\.topo$', helpers.bigrobot_topology()):
            options['settag'] = 'physical'
        else:
            options['settag'] = 'generic-topology'
    else:
        options['settag'] = 'missing-topology'

    print("Robot options:\n%s" % helpers.prettify(options))

    copy_suite(helpers.bigrobot_suite(),
               helpers.bigrobot_log_path_exec_instance())

    ext = 'txt'
    test_suite = ''.join((helpers.bigrobot_suite(), '.', ext))

    touch_log_files()
    if helpers.bigrobot_continuous_integration().lower() == 'true':
        # Don't create links to log files under CI environment
        pass
    else:
        create_links_to_logs()

    if params:
        cli_params_to_yaml_config(params,
                                  helpers.bigrobot_additional_params())

    rc = robot.run(test_suite, **options)
    helpers.log("Robot Framework return code is %s" % rc)
    print("Robot Framework return code is %s" % rc)

    # if helpers.bigrobot_continuous_integration().lower() == 'True':
    #    print("Inside continuous integration environment. Return code"
    #          " set to 0.")
    #    sys.exit(0)
    # else:
    sys.exit(rc)


def validate_command(*args):
    """
    Validate correctness of test suite (useful for catching obvious errors).
    """
    new_args = list(*args)
    new_args.extend(["--dryrun", "--include-manual-untested"])
    test_command(new_args)


def env_command(*args):
    """
    Show the environment used by the test suite (useful for debugging purpose).
    """
    _ = args  # unused, silent Pylint
    helpers.print_bigrobot_env()


def gui_command(*args):
    """
    Run the Robot Framework GUI (RIDE).
    """
    _ = args  # unused, silent Pylint
    run('ride.py 2> /dev/null &', shell=True)


def clean_command(*args):
    """
    Remove output files created from Robot runs.
    """
    _ = args  # unused, silent Pylint
    run('rm -f log.html report.html output.xml debug.log syslog.txt'
        ' dev_commands.log bigrobot_listener.log',
        shell=True)


def clean_deep_command(*args):
    """
    Deep cleaning. Run 'clean' command and also remove log directories.
    """
    _ = args  # unused, silent Pylint
    clean_command()

    if is_suite_defined():
        # Remove log directories matching the pattern 'suite_20yymmdd_hhmmss'
        c = 'rm -rfv %s_20[0-9][0-9][0-9][0-9][0-9][0-9]_[0-9][0-9][0-9][0-9][0-9][0-9]' \
             % helpers.bigrobot_suite()
        run(c, shell=True)


def codesize_hidden_command(*args):
    """
    Check the size of BigRobot source code.
    """
    _ = args  # unused, silent Pylint
    cmd = ''.join((helpers.bigrobot_path(), "/bin/chk-code-bloat-bigrobot",
                   " ", helpers.bigrobot_path()))
    run(cmd, shell=True)


# def startremotevm_command(*args):
#    """
#    Setup remote VMs using BigTest (executes 'bt startremotevm').
#    """
#    _ = args  # unused, silent Pylint
#    run('bt startremotevm', cwd=helpers.bigtest_path())


# def stopremotevm_command(*args):
#    """
#    Tear down remote VMs using BigTest (executes 'bt stopremotevm').
#    """
#    _ = args  # unused, silent Pylint
#    run('bt stopremotevm', cwd=helpers.bigtest_path())


def main(args):
    """
    Launch 'gobot'. If no additional argument is specified, print the usage
    guide.
    """
    if not args or args[0] in ['help', '-h', '--help']:
        usage()
        sys.exit(1)

    cmd = args[0]
    cmd_dict = get_command_dict()
    if cmd not in cmd_dict:
        hidden_cmd = cmd + "_hidden"
        if hidden_cmd not in cmd_dict:
            sys.stderr.write("Unknown command: %s\n" % cmd)
            sys.exit(1)
        else:
            cmd = hidden_cmd

    cmd_dict[cmd](args[1:])


if __name__ == '__main__':
    main(sys.argv[1:])
